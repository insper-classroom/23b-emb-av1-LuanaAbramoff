
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009504  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409504  00409504  00019504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  0040950c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000490  204009c0  00409ecc  000209c0  2**2
                  ALLOC
  4 .stack        00002000  20400e50  0040a35c  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402e50  0040c35c  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   00025231  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004fba  00000000  00000000  00045c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000af8c  00000000  00000000  0004ac32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001060  00000000  00000000  00055bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011a8  00000000  00000000  00056c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025a89  00000000  00000000  00057dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00016299  00000000  00000000  0007d84f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000967c2  00000000  00000000  00093ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003aac  00000000  00000000  0012a2ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 2e 40 20 95 11 40 00 93 11 40 00 93 11 40 00     P.@ ..@...@...@.
  400010:	93 11 40 00 93 11 40 00 93 11 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	6d 15 40 00 93 11 40 00 00 00 00 00 0d 16 40 00     m.@...@.......@.
  40003c:	75 16 40 00 93 11 40 00 93 11 40 00 93 11 40 00     u.@...@...@...@.
  40004c:	d9 35 40 00 93 11 40 00 93 11 40 00 93 11 40 00     .5@...@...@...@.
  40005c:	93 11 40 00 93 11 40 00 00 00 00 00 85 0e 40 00     ..@...@.......@.
  40006c:	99 0e 40 00 ad 0e 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  40007c:	93 11 40 00 c1 0e 40 00 d5 0e 40 00 93 11 40 00     ..@...@...@...@.
  40008c:	93 11 40 00 93 11 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  40009c:	93 11 40 00 93 11 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  4000ac:	93 11 40 00 93 11 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  4000bc:	93 11 40 00 93 11 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  4000cc:	93 11 40 00 00 00 00 00 93 11 40 00 00 00 00 00     ..@.......@.....
  4000dc:	93 11 40 00 93 11 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  4000ec:	93 11 40 00 93 11 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  4000fc:	93 11 40 00 93 11 40 00 93 11 40 00 93 11 40 00     ..@...@...@...@.
  40010c:	93 11 40 00 93 11 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 93 11 40 00 93 11 40 00 93 11 40 00     ......@...@...@.
  40012c:	93 11 40 00 93 11 40 00 00 00 00 00 93 11 40 00     ..@...@.......@.
  40013c:	93 11 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c0 	.word	0x204009c0
  40015c:	00000000 	.word	0x00000000
  400160:	0040950c 	.word	0x0040950c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040950c 	.word	0x0040950c
  4001a0:	204009c4 	.word	0x204009c4
  4001a4:	0040950c 	.word	0x0040950c
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4001ac:	4b03      	ldr	r3, [pc, #12]	; (4001bc <rtt_init+0x10>)
  4001ae:	681b      	ldr	r3, [r3, #0]
  4001b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4001b4:	4319      	orrs	r1, r3
  4001b6:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4001b8:	2000      	movs	r0, #0
  4001ba:	4770      	bx	lr
  4001bc:	204009dc 	.word	0x204009dc

004001c0 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4001c0:	b941      	cbnz	r1, 4001d4 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4001c2:	4a09      	ldr	r2, [pc, #36]	; (4001e8 <rtt_sel_source+0x28>)
  4001c4:	6813      	ldr	r3, [r2, #0]
  4001c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4001ca:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001cc:	6802      	ldr	r2, [r0, #0]
  4001ce:	4313      	orrs	r3, r2
  4001d0:	6003      	str	r3, [r0, #0]
  4001d2:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4001d4:	4a04      	ldr	r2, [pc, #16]	; (4001e8 <rtt_sel_source+0x28>)
  4001d6:	6813      	ldr	r3, [r2, #0]
  4001d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4001dc:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001de:	6802      	ldr	r2, [r0, #0]
  4001e0:	4313      	orrs	r3, r2
  4001e2:	6003      	str	r3, [r0, #0]
  4001e4:	4770      	bx	lr
  4001e6:	bf00      	nop
  4001e8:	204009dc 	.word	0x204009dc

004001ec <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4001ec:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4001ee:	4b03      	ldr	r3, [pc, #12]	; (4001fc <rtt_enable_interrupt+0x10>)
  4001f0:	681b      	ldr	r3, [r3, #0]
  4001f2:	4319      	orrs	r1, r3
  4001f4:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  4001f6:	6001      	str	r1, [r0, #0]
  4001f8:	4770      	bx	lr
  4001fa:	bf00      	nop
  4001fc:	204009dc 	.word	0x204009dc

00400200 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400200:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  400202:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400206:	4b02      	ldr	r3, [pc, #8]	; (400210 <rtt_disable_interrupt+0x10>)
  400208:	681b      	ldr	r3, [r3, #0]
  40020a:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  40020c:	6001      	str	r1, [r0, #0]
  40020e:	4770      	bx	lr
  400210:	204009dc 	.word	0x204009dc

00400214 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400214:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400216:	6883      	ldr	r3, [r0, #8]
  400218:	429a      	cmp	r2, r3
  40021a:	d003      	beq.n	400224 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  40021c:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40021e:	6883      	ldr	r3, [r0, #8]
  400220:	4293      	cmp	r3, r2
  400222:	d1fb      	bne.n	40021c <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400224:	4618      	mov	r0, r3
  400226:	4770      	bx	lr

00400228 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400228:	68c0      	ldr	r0, [r0, #12]
}
  40022a:	4770      	bx	lr

0040022c <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  40022c:	b570      	push	{r4, r5, r6, lr}
  40022e:	4606      	mov	r6, r0
  400230:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  400232:	6804      	ldr	r4, [r0, #0]
  400234:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400238:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40023c:	4809      	ldr	r0, [pc, #36]	; (400264 <rtt_write_alarm_time+0x38>)
  40023e:	4b0a      	ldr	r3, [pc, #40]	; (400268 <rtt_write_alarm_time+0x3c>)
  400240:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400242:	b92d      	cbnz	r5, 400250 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400244:	f04f 33ff 	mov.w	r3, #4294967295
  400248:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  40024a:	b924      	cbnz	r4, 400256 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  40024c:	2000      	movs	r0, #0
  40024e:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400250:	3d01      	subs	r5, #1
  400252:	6075      	str	r5, [r6, #4]
  400254:	e7f9      	b.n	40024a <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400256:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40025a:	4802      	ldr	r0, [pc, #8]	; (400264 <rtt_write_alarm_time+0x38>)
  40025c:	4b03      	ldr	r3, [pc, #12]	; (40026c <rtt_write_alarm_time+0x40>)
  40025e:	4798      	blx	r3
  400260:	e7f4      	b.n	40024c <rtt_write_alarm_time+0x20>
  400262:	bf00      	nop
  400264:	400e1830 	.word	0x400e1830
  400268:	00400201 	.word	0x00400201
  40026c:	004001ed 	.word	0x004001ed

00400270 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400270:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  400272:	4b07      	ldr	r3, [pc, #28]	; (400290 <spi_enable_clock+0x20>)
  400274:	4298      	cmp	r0, r3
  400276:	d003      	beq.n	400280 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400278:	4b06      	ldr	r3, [pc, #24]	; (400294 <spi_enable_clock+0x24>)
  40027a:	4298      	cmp	r0, r3
  40027c:	d004      	beq.n	400288 <spi_enable_clock+0x18>
  40027e:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400280:	2015      	movs	r0, #21
  400282:	4b05      	ldr	r3, [pc, #20]	; (400298 <spi_enable_clock+0x28>)
  400284:	4798      	blx	r3
  400286:	bd08      	pop	{r3, pc}
  400288:	202a      	movs	r0, #42	; 0x2a
  40028a:	4b03      	ldr	r3, [pc, #12]	; (400298 <spi_enable_clock+0x28>)
  40028c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40028e:	e7f6      	b.n	40027e <spi_enable_clock+0xe>
  400290:	40008000 	.word	0x40008000
  400294:	40058000 	.word	0x40058000
  400298:	00401009 	.word	0x00401009

0040029c <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40029c:	6843      	ldr	r3, [r0, #4]
  40029e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4002a2:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4002a4:	6843      	ldr	r3, [r0, #4]
  4002a6:	0409      	lsls	r1, r1, #16
  4002a8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4002ac:	4319      	orrs	r1, r3
  4002ae:	6041      	str	r1, [r0, #4]
  4002b0:	4770      	bx	lr

004002b2 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4002b2:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4002b4:	f643 2499 	movw	r4, #15001	; 0x3a99
  4002b8:	6905      	ldr	r5, [r0, #16]
  4002ba:	f015 0f02 	tst.w	r5, #2
  4002be:	d103      	bne.n	4002c8 <spi_write+0x16>
		if (!timeout--) {
  4002c0:	3c01      	subs	r4, #1
  4002c2:	d1f9      	bne.n	4002b8 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4002c4:	2001      	movs	r0, #1
  4002c6:	e00c      	b.n	4002e2 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4002c8:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4002ca:	f014 0f02 	tst.w	r4, #2
  4002ce:	d006      	beq.n	4002de <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4002d0:	0412      	lsls	r2, r2, #16
  4002d2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4002d6:	4311      	orrs	r1, r2
		if (uc_last) {
  4002d8:	b10b      	cbz	r3, 4002de <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4002da:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4002de:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4002e0:	2000      	movs	r0, #0
}
  4002e2:	bc30      	pop	{r4, r5}
  4002e4:	4770      	bx	lr

004002e6 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4002e6:	b932      	cbnz	r2, 4002f6 <spi_set_clock_polarity+0x10>
  4002e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4002ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002ee:	f023 0301 	bic.w	r3, r3, #1
  4002f2:	6303      	str	r3, [r0, #48]	; 0x30
  4002f4:	4770      	bx	lr
  4002f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4002fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002fc:	f043 0301 	orr.w	r3, r3, #1
  400300:	6303      	str	r3, [r0, #48]	; 0x30
  400302:	4770      	bx	lr

00400304 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400304:	b932      	cbnz	r2, 400314 <spi_set_clock_phase+0x10>
  400306:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40030a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40030c:	f023 0302 	bic.w	r3, r3, #2
  400310:	6303      	str	r3, [r0, #48]	; 0x30
  400312:	4770      	bx	lr
  400314:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400318:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40031a:	f043 0302 	orr.w	r3, r3, #2
  40031e:	6303      	str	r3, [r0, #48]	; 0x30
  400320:	4770      	bx	lr

00400322 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400322:	2a04      	cmp	r2, #4
  400324:	d003      	beq.n	40032e <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400326:	b16a      	cbz	r2, 400344 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400328:	2a08      	cmp	r2, #8
  40032a:	d016      	beq.n	40035a <spi_configure_cs_behavior+0x38>
  40032c:	4770      	bx	lr
  40032e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400332:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400334:	f023 0308 	bic.w	r3, r3, #8
  400338:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40033a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40033c:	f043 0304 	orr.w	r3, r3, #4
  400340:	6303      	str	r3, [r0, #48]	; 0x30
  400342:	4770      	bx	lr
  400344:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400348:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40034a:	f023 0308 	bic.w	r3, r3, #8
  40034e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400350:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400352:	f023 0304 	bic.w	r3, r3, #4
  400356:	6303      	str	r3, [r0, #48]	; 0x30
  400358:	4770      	bx	lr
  40035a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40035e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400360:	f043 0308 	orr.w	r3, r3, #8
  400364:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400366:	e7e1      	b.n	40032c <spi_configure_cs_behavior+0xa>

00400368 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400368:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40036c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40036e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400372:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400374:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400376:	431a      	orrs	r2, r3
  400378:	630a      	str	r2, [r1, #48]	; 0x30
  40037a:	4770      	bx	lr

0040037c <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40037c:	1e43      	subs	r3, r0, #1
  40037e:	4419      	add	r1, r3
  400380:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400384:	1e43      	subs	r3, r0, #1
  400386:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400388:	bf94      	ite	ls
  40038a:	b200      	sxthls	r0, r0
		return -1;
  40038c:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400390:	4770      	bx	lr

00400392 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  400392:	b17a      	cbz	r2, 4003b4 <spi_set_baudrate_div+0x22>
{
  400394:	b410      	push	{r4}
  400396:	4614      	mov	r4, r2
  400398:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40039c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40039e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4003a2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4003a4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4003a6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4003aa:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4003ac:	2000      	movs	r0, #0
}
  4003ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  4003b2:	4770      	bx	lr
        return -1;
  4003b4:	f04f 30ff 	mov.w	r0, #4294967295
  4003b8:	4770      	bx	lr
	...

004003bc <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  4003bc:	4b01      	ldr	r3, [pc, #4]	; (4003c4 <gfx_mono_set_framebuffer+0x8>)
  4003be:	6018      	str	r0, [r3, #0]
  4003c0:	4770      	bx	lr
  4003c2:	bf00      	nop
  4003c4:	204009e0 	.word	0x204009e0

004003c8 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  4003c8:	4b02      	ldr	r3, [pc, #8]	; (4003d4 <gfx_mono_framebuffer_put_byte+0xc>)
  4003ca:	681b      	ldr	r3, [r3, #0]
  4003cc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4003d0:	5442      	strb	r2, [r0, r1]
  4003d2:	4770      	bx	lr
  4003d4:	204009e0 	.word	0x204009e0

004003d8 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4003d8:	4b02      	ldr	r3, [pc, #8]	; (4003e4 <gfx_mono_framebuffer_get_byte+0xc>)
  4003da:	681b      	ldr	r3, [r3, #0]
  4003dc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4003e0:	5c40      	ldrb	r0, [r0, r1]
  4003e2:	4770      	bx	lr
  4003e4:	204009e0 	.word	0x204009e0

004003e8 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
	if (length == 0) {
  4003e8:	2a00      	cmp	r2, #0
  4003ea:	d048      	beq.n	40047e <gfx_mono_generic_draw_vertical_line+0x96>
{
  4003ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4003f0:	4614      	mov	r4, r2
  4003f2:	461f      	mov	r7, r3
  4003f4:	4606      	mov	r6, r0
		return;
	}

	gfx_coord_t y2 = y + length - 1;
  4003f6:	1e4a      	subs	r2, r1, #1
  4003f8:	4422      	add	r2, r4
  4003fa:	b2d2      	uxtb	r2, r2

	if (y == y2) {
  4003fc:	4291      	cmp	r1, r2
  4003fe:	d031      	beq.n	400464 <gfx_mono_generic_draw_vertical_line+0x7c>
  400400:	2a1f      	cmp	r2, #31
  400402:	bf28      	it	cs
  400404:	221f      	movcs	r2, #31
  400406:	4615      	mov	r5, r2

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
		y2 = GFX_MONO_LCD_HEIGHT - 1;
	}

	gfx_coord_t y1page = y / 8;
  400408:	08cc      	lsrs	r4, r1, #3
	gfx_coord_t y2page = y2 / 8;
  40040a:	ea4f 08d2 	mov.w	r8, r2, lsr #3

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
  40040e:	f001 0207 	and.w	r2, r1, #7
  400412:	23ff      	movs	r3, #255	; 0xff
  400414:	fa03 f202 	lsl.w	r2, r3, r2
  400418:	b2d2      	uxtb	r2, r2
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
  40041a:	f005 0507 	and.w	r5, r5, #7
  40041e:	f1c5 0507 	rsb	r5, r5, #7
  400422:	fa43 f505 	asr.w	r5, r3, r5
  400426:	b2ed      	uxtb	r5, r5

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
  400428:	4544      	cmp	r4, r8
  40042a:	d020      	beq.n	40046e <gfx_mono_generic_draw_vertical_line+0x86>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
  40042c:	463b      	mov	r3, r7
  40042e:	4601      	mov	r1, r0
  400430:	4620      	mov	r0, r4
  400432:	f8df 904c 	ldr.w	r9, [pc, #76]	; 400480 <gfx_mono_generic_draw_vertical_line+0x98>
  400436:	47c8      	blx	r9

		while (++y1page < y2page) {
  400438:	3401      	adds	r4, #1
  40043a:	45a0      	cmp	r8, r4
  40043c:	d90a      	bls.n	400454 <gfx_mono_generic_draw_vertical_line+0x6c>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
  40043e:	f04f 0aff 	mov.w	sl, #255	; 0xff
  400442:	463b      	mov	r3, r7
  400444:	4652      	mov	r2, sl
  400446:	4631      	mov	r1, r6
  400448:	4620      	mov	r0, r4
  40044a:	47c8      	blx	r9
		while (++y1page < y2page) {
  40044c:	3401      	adds	r4, #1
  40044e:	b2e4      	uxtb	r4, r4
  400450:	45a0      	cmp	r8, r4
  400452:	d8f6      	bhi.n	400442 <gfx_mono_generic_draw_vertical_line+0x5a>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
  400454:	463b      	mov	r3, r7
  400456:	462a      	mov	r2, r5
  400458:	4631      	mov	r1, r6
  40045a:	4640      	mov	r0, r8
  40045c:	4c08      	ldr	r4, [pc, #32]	; (400480 <gfx_mono_generic_draw_vertical_line+0x98>)
  40045e:	47a0      	blx	r4
  400460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_draw_pixel(x, y, color);
  400464:	461a      	mov	r2, r3
  400466:	4b07      	ldr	r3, [pc, #28]	; (400484 <gfx_mono_generic_draw_vertical_line+0x9c>)
  400468:	4798      	blx	r3
		return;
  40046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
  40046e:	463b      	mov	r3, r7
  400470:	402a      	ands	r2, r5
  400472:	4601      	mov	r1, r0
  400474:	4620      	mov	r0, r4
  400476:	4c02      	ldr	r4, [pc, #8]	; (400480 <gfx_mono_generic_draw_vertical_line+0x98>)
  400478:	47a0      	blx	r4
  40047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40047e:	4770      	bx	lr
  400480:	004006a9 	.word	0x004006a9
  400484:	00400645 	.word	0x00400645

00400488 <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
  400488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40048c:	b085      	sub	sp, #20
  40048e:	4681      	mov	r9, r0
  400490:	9100      	str	r1, [sp, #0]
  400492:	9301      	str	r3, [sp, #4]
  400494:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
  400498:	b17a      	cbz	r2, 4004ba <gfx_mono_generic_draw_filled_circle+0x32>
  40049a:	4616      	mov	r6, r2
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
  40049c:	0055      	lsls	r5, r2, #1
  40049e:	f1c5 0503 	rsb	r5, r5, #3
  4004a2:	2701      	movs	r7, #1
  4004a4:	f04f 0800 	mov.w	r8, #0

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
  4004a8:	f00b 0303 	and.w	r3, fp, #3
  4004ac:	9302      	str	r3, [sp, #8]
			gfx_mono_draw_vertical_line(x + offset_y,
  4004ae:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 4005a0 <gfx_mono_generic_draw_filled_circle+0x118>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
  4004b2:	f00b 030c 	and.w	r3, fp, #12
  4004b6:	9303      	str	r3, [sp, #12]
  4004b8:	e04d      	b.n	400556 <gfx_mono_generic_draw_filled_circle+0xce>
		gfx_mono_draw_pixel(x, y, color);
  4004ba:	461a      	mov	r2, r3
  4004bc:	4b37      	ldr	r3, [pc, #220]	; (40059c <gfx_mono_generic_draw_filled_circle+0x114>)
  4004be:	4798      	blx	r3
		}

		/* Next X. */
		++offset_x;
	}
}
  4004c0:	b005      	add	sp, #20
  4004c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			gfx_mono_draw_vertical_line(x + offset_y,
  4004c6:	9b00      	ldr	r3, [sp, #0]
  4004c8:	1b19      	subs	r1, r3, r4
  4004ca:	eb09 0006 	add.w	r0, r9, r6
  4004ce:	9b01      	ldr	r3, [sp, #4]
  4004d0:	463a      	mov	r2, r7
  4004d2:	b2c9      	uxtb	r1, r1
  4004d4:	b2c0      	uxtb	r0, r0
  4004d6:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  4004d8:	1c72      	adds	r2, r6, #1
  4004da:	9900      	ldr	r1, [sp, #0]
  4004dc:	1b89      	subs	r1, r1, r6
  4004de:	eb09 0004 	add.w	r0, r9, r4
  4004e2:	9b01      	ldr	r3, [sp, #4]
  4004e4:	b2d2      	uxtb	r2, r2
  4004e6:	b2c9      	uxtb	r1, r1
  4004e8:	b2c0      	uxtb	r0, r0
  4004ea:	47d0      	blx	sl
  4004ec:	e038      	b.n	400560 <gfx_mono_generic_draw_filled_circle+0xd8>
			gfx_mono_draw_vertical_line(x - offset_y,
  4004ee:	9b00      	ldr	r3, [sp, #0]
  4004f0:	1b19      	subs	r1, r3, r4
  4004f2:	eba9 0006 	sub.w	r0, r9, r6
  4004f6:	9b01      	ldr	r3, [sp, #4]
  4004f8:	463a      	mov	r2, r7
  4004fa:	b2c9      	uxtb	r1, r1
  4004fc:	b2c0      	uxtb	r0, r0
  4004fe:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  400500:	1c72      	adds	r2, r6, #1
  400502:	9900      	ldr	r1, [sp, #0]
  400504:	1b89      	subs	r1, r1, r6
  400506:	eba9 0004 	sub.w	r0, r9, r4
  40050a:	9b01      	ldr	r3, [sp, #4]
  40050c:	b2d2      	uxtb	r2, r2
  40050e:	b2c9      	uxtb	r1, r1
  400510:	b2c0      	uxtb	r0, r0
  400512:	47d0      	blx	sl
  400514:	e027      	b.n	400566 <gfx_mono_generic_draw_filled_circle+0xde>
			gfx_mono_draw_vertical_line(x - offset_y,
  400516:	eba9 0006 	sub.w	r0, r9, r6
  40051a:	9b01      	ldr	r3, [sp, #4]
  40051c:	463a      	mov	r2, r7
  40051e:	9900      	ldr	r1, [sp, #0]
  400520:	b2c0      	uxtb	r0, r0
  400522:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  400524:	1c72      	adds	r2, r6, #1
  400526:	eba9 0004 	sub.w	r0, r9, r4
  40052a:	9b01      	ldr	r3, [sp, #4]
  40052c:	b2d2      	uxtb	r2, r2
  40052e:	9900      	ldr	r1, [sp, #0]
  400530:	b2c0      	uxtb	r0, r0
  400532:	47d0      	blx	sl
  400534:	e01a      	b.n	40056c <gfx_mono_generic_draw_filled_circle+0xe4>
		if (error < 0) {
  400536:	2d00      	cmp	r5, #0
  400538:	db2b      	blt.n	400592 <gfx_mono_generic_draw_filled_circle+0x10a>
			error += (((offset_x - offset_y) << 2) + 10);
  40053a:	1ba4      	subs	r4, r4, r6
  40053c:	350a      	adds	r5, #10
  40053e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  400542:	b225      	sxth	r5, r4
			--offset_y;
  400544:	3e01      	subs	r6, #1
  400546:	b2f6      	uxtb	r6, r6
  400548:	f108 0801 	add.w	r8, r8, #1
  40054c:	1c7b      	adds	r3, r7, #1
  40054e:	b2db      	uxtb	r3, r3
	while (offset_x <= offset_y) {
  400550:	42be      	cmp	r6, r7
  400552:	d3b5      	bcc.n	4004c0 <gfx_mono_generic_draw_filled_circle+0x38>
  400554:	461f      	mov	r7, r3
  400556:	fa5f f488 	uxtb.w	r4, r8
		if (quadrant_mask & GFX_QUADRANT0) {
  40055a:	9b02      	ldr	r3, [sp, #8]
  40055c:	2b00      	cmp	r3, #0
  40055e:	d1b2      	bne.n	4004c6 <gfx_mono_generic_draw_filled_circle+0x3e>
		if (quadrant_mask & GFX_QUADRANT1) {
  400560:	9b03      	ldr	r3, [sp, #12]
  400562:	2b00      	cmp	r3, #0
  400564:	d1c3      	bne.n	4004ee <gfx_mono_generic_draw_filled_circle+0x66>
		if (quadrant_mask & GFX_QUADRANT2) {
  400566:	f01b 0f30 	tst.w	fp, #48	; 0x30
  40056a:	d1d4      	bne.n	400516 <gfx_mono_generic_draw_filled_circle+0x8e>
		if (quadrant_mask & GFX_QUADRANT3) {
  40056c:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
  400570:	d0e1      	beq.n	400536 <gfx_mono_generic_draw_filled_circle+0xae>
			gfx_mono_draw_vertical_line(x + offset_y,
  400572:	eb09 0006 	add.w	r0, r9, r6
  400576:	9b01      	ldr	r3, [sp, #4]
  400578:	463a      	mov	r2, r7
  40057a:	9900      	ldr	r1, [sp, #0]
  40057c:	b2c0      	uxtb	r0, r0
  40057e:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  400580:	1c72      	adds	r2, r6, #1
  400582:	eb09 0004 	add.w	r0, r9, r4
  400586:	9b01      	ldr	r3, [sp, #4]
  400588:	b2d2      	uxtb	r2, r2
  40058a:	9900      	ldr	r1, [sp, #0]
  40058c:	b2c0      	uxtb	r0, r0
  40058e:	47d0      	blx	sl
  400590:	e7d1      	b.n	400536 <gfx_mono_generic_draw_filled_circle+0xae>
			error += ((offset_x << 2) + 6);
  400592:	3506      	adds	r5, #6
  400594:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  400598:	b22d      	sxth	r5, r5
  40059a:	e7d5      	b.n	400548 <gfx_mono_generic_draw_filled_circle+0xc0>
  40059c:	00400645 	.word	0x00400645
  4005a0:	004003e9 	.word	0x004003e9

004005a4 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  4005a4:	b570      	push	{r4, r5, r6, lr}
  4005a6:	4604      	mov	r4, r0
  4005a8:	460d      	mov	r5, r1
  4005aa:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  4005ac:	b91b      	cbnz	r3, 4005b6 <gfx_mono_ssd1306_put_byte+0x12>
  4005ae:	4b0d      	ldr	r3, [pc, #52]	; (4005e4 <gfx_mono_ssd1306_put_byte+0x40>)
  4005b0:	4798      	blx	r3
  4005b2:	42b0      	cmp	r0, r6
  4005b4:	d015      	beq.n	4005e2 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  4005b6:	4632      	mov	r2, r6
  4005b8:	4629      	mov	r1, r5
  4005ba:	4620      	mov	r0, r4
  4005bc:	4b0a      	ldr	r3, [pc, #40]	; (4005e8 <gfx_mono_ssd1306_put_byte+0x44>)
  4005be:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4005c0:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4005c4:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  4005c8:	4c08      	ldr	r4, [pc, #32]	; (4005ec <gfx_mono_ssd1306_put_byte+0x48>)
  4005ca:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  4005cc:	f3c5 1002 	ubfx	r0, r5, #4, #3
  4005d0:	f040 0010 	orr.w	r0, r0, #16
  4005d4:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  4005d6:	f005 000f 	and.w	r0, r5, #15
  4005da:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  4005dc:	4630      	mov	r0, r6
  4005de:	4b04      	ldr	r3, [pc, #16]	; (4005f0 <gfx_mono_ssd1306_put_byte+0x4c>)
  4005e0:	4798      	blx	r3
  4005e2:	bd70      	pop	{r4, r5, r6, pc}
  4005e4:	004003d9 	.word	0x004003d9
  4005e8:	004003c9 	.word	0x004003c9
  4005ec:	004006ed 	.word	0x004006ed
  4005f0:	0040090d 	.word	0x0040090d

004005f4 <gfx_mono_ssd1306_init>:
{
  4005f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  4005f8:	480d      	ldr	r0, [pc, #52]	; (400630 <gfx_mono_ssd1306_init+0x3c>)
  4005fa:	4b0e      	ldr	r3, [pc, #56]	; (400634 <gfx_mono_ssd1306_init+0x40>)
  4005fc:	4798      	blx	r3
	ssd1306_init();
  4005fe:	4b0e      	ldr	r3, [pc, #56]	; (400638 <gfx_mono_ssd1306_init+0x44>)
  400600:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400602:	2040      	movs	r0, #64	; 0x40
  400604:	4b0d      	ldr	r3, [pc, #52]	; (40063c <gfx_mono_ssd1306_init+0x48>)
  400606:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400608:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  40060a:	f04f 0801 	mov.w	r8, #1
  40060e:	462f      	mov	r7, r5
  400610:	4e0b      	ldr	r6, [pc, #44]	; (400640 <gfx_mono_ssd1306_init+0x4c>)
{
  400612:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400614:	4643      	mov	r3, r8
  400616:	463a      	mov	r2, r7
  400618:	b2e1      	uxtb	r1, r4
  40061a:	4628      	mov	r0, r5
  40061c:	47b0      	blx	r6
  40061e:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400620:	2c80      	cmp	r4, #128	; 0x80
  400622:	d1f7      	bne.n	400614 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400624:	3501      	adds	r5, #1
  400626:	b2ed      	uxtb	r5, r5
  400628:	2d04      	cmp	r5, #4
  40062a:	d1f2      	bne.n	400612 <gfx_mono_ssd1306_init+0x1e>
  40062c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400630:	204009e4 	.word	0x204009e4
  400634:	004003bd 	.word	0x004003bd
  400638:	0040072d 	.word	0x0040072d
  40063c:	004006ed 	.word	0x004006ed
  400640:	004005a5 	.word	0x004005a5

00400644 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400644:	09c3      	lsrs	r3, r0, #7
  400646:	d12a      	bne.n	40069e <gfx_mono_ssd1306_draw_pixel+0x5a>
  400648:	291f      	cmp	r1, #31
  40064a:	d828      	bhi.n	40069e <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  40064c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400650:	4614      	mov	r4, r2
  400652:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400654:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400656:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  40065a:	2201      	movs	r2, #1
  40065c:	fa02 f701 	lsl.w	r7, r2, r1
  400660:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400664:	4601      	mov	r1, r0
  400666:	4630      	mov	r0, r6
  400668:	4b0d      	ldr	r3, [pc, #52]	; (4006a0 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  40066a:	4798      	blx	r3
  40066c:	4602      	mov	r2, r0
	switch (color) {
  40066e:	2c01      	cmp	r4, #1
  400670:	d009      	beq.n	400686 <gfx_mono_ssd1306_draw_pixel+0x42>
  400672:	b164      	cbz	r4, 40068e <gfx_mono_ssd1306_draw_pixel+0x4a>
  400674:	2c02      	cmp	r4, #2
  400676:	d00e      	beq.n	400696 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400678:	2300      	movs	r3, #0
  40067a:	4629      	mov	r1, r5
  40067c:	4630      	mov	r0, r6
  40067e:	4c09      	ldr	r4, [pc, #36]	; (4006a4 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400680:	47a0      	blx	r4
  400682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400686:	ea48 0200 	orr.w	r2, r8, r0
  40068a:	b2d2      	uxtb	r2, r2
		break;
  40068c:	e7f4      	b.n	400678 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  40068e:	ea20 0207 	bic.w	r2, r0, r7
  400692:	b2d2      	uxtb	r2, r2
		break;
  400694:	e7f0      	b.n	400678 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400696:	ea88 0200 	eor.w	r2, r8, r0
  40069a:	b2d2      	uxtb	r2, r2
		break;
  40069c:	e7ec      	b.n	400678 <gfx_mono_ssd1306_draw_pixel+0x34>
  40069e:	4770      	bx	lr
  4006a0:	004003d9 	.word	0x004003d9
  4006a4:	004005a5 	.word	0x004005a5

004006a8 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
  4006a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4006aa:	4605      	mov	r5, r0
  4006ac:	460e      	mov	r6, r1
  4006ae:	4617      	mov	r7, r2
  4006b0:	461c      	mov	r4, r3
	return gfx_mono_framebuffer_get_byte(page, column);
  4006b2:	4b0c      	ldr	r3, [pc, #48]	; (4006e4 <gfx_mono_ssd1306_mask_byte+0x3c>)
  4006b4:	4798      	blx	r3
  4006b6:	4602      	mov	r2, r0
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
  4006b8:	2c01      	cmp	r4, #1
  4006ba:	d008      	beq.n	4006ce <gfx_mono_ssd1306_mask_byte+0x26>
  4006bc:	b154      	cbz	r4, 4006d4 <gfx_mono_ssd1306_mask_byte+0x2c>
  4006be:	2c02      	cmp	r4, #2
  4006c0:	d00c      	beq.n	4006dc <gfx_mono_ssd1306_mask_byte+0x34>

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
  4006c2:	2300      	movs	r3, #0
  4006c4:	4631      	mov	r1, r6
  4006c6:	4628      	mov	r0, r5
  4006c8:	4c07      	ldr	r4, [pc, #28]	; (4006e8 <gfx_mono_ssd1306_mask_byte+0x40>)
  4006ca:	47a0      	blx	r4
  4006cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp |= pixel_mask;
  4006ce:	433a      	orrs	r2, r7
  4006d0:	b2d2      	uxtb	r2, r2
		break;
  4006d2:	e7f6      	b.n	4006c2 <gfx_mono_ssd1306_mask_byte+0x1a>
		temp &= ~pixel_mask;
  4006d4:	ea20 0207 	bic.w	r2, r0, r7
  4006d8:	b2d2      	uxtb	r2, r2
		break;
  4006da:	e7f2      	b.n	4006c2 <gfx_mono_ssd1306_mask_byte+0x1a>
		temp ^= pixel_mask;
  4006dc:	407a      	eors	r2, r7
  4006de:	b2d2      	uxtb	r2, r2
		break;
  4006e0:	e7ef      	b.n	4006c2 <gfx_mono_ssd1306_mask_byte+0x1a>
  4006e2:	bf00      	nop
  4006e4:	004003d9 	.word	0x004003d9
  4006e8:	004005a5 	.word	0x004005a5

004006ec <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4006ec:	b538      	push	{r3, r4, r5, lr}
  4006ee:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4006f0:	2208      	movs	r2, #8
  4006f2:	4b09      	ldr	r3, [pc, #36]	; (400718 <ssd1306_write_command+0x2c>)
  4006f4:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4006f6:	4c09      	ldr	r4, [pc, #36]	; (40071c <ssd1306_write_command+0x30>)
  4006f8:	2101      	movs	r1, #1
  4006fa:	4620      	mov	r0, r4
  4006fc:	4b08      	ldr	r3, [pc, #32]	; (400720 <ssd1306_write_command+0x34>)
  4006fe:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400700:	2301      	movs	r3, #1
  400702:	461a      	mov	r2, r3
  400704:	4629      	mov	r1, r5
  400706:	4620      	mov	r0, r4
  400708:	4c06      	ldr	r4, [pc, #24]	; (400724 <ssd1306_write_command+0x38>)
  40070a:	47a0      	blx	r4
	delay_us(10);
  40070c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400710:	4b05      	ldr	r3, [pc, #20]	; (400728 <ssd1306_write_command+0x3c>)
  400712:	4798      	blx	r3
  400714:	bd38      	pop	{r3, r4, r5, pc}
  400716:	bf00      	nop
  400718:	400e1000 	.word	0x400e1000
  40071c:	40008000 	.word	0x40008000
  400720:	0040029d 	.word	0x0040029d
  400724:	004002b3 	.word	0x004002b3
  400728:	20400001 	.word	0x20400001

0040072c <ssd1306_init>:
{
  40072c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400730:	4d66      	ldr	r5, [pc, #408]	; (4008cc <ssd1306_init+0x1a0>)
  400732:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400736:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400738:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40073c:	4b64      	ldr	r3, [pc, #400]	; (4008d0 <ssd1306_init+0x1a4>)
  40073e:	2708      	movs	r7, #8
  400740:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400742:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400746:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400748:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  40074c:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  40074e:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400750:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400754:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400756:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  40075a:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40075c:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  40075e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400762:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400764:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400766:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40076a:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40076c:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40076e:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400772:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400774:	f022 0208 	bic.w	r2, r2, #8
  400778:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40077a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40077c:	f022 0208 	bic.w	r2, r2, #8
  400780:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400782:	601f      	str	r7, [r3, #0]
  400784:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400786:	631f      	str	r7, [r3, #48]	; 0x30
  400788:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  40078a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400908 <ssd1306_init+0x1dc>
  40078e:	2300      	movs	r3, #0
  400790:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400794:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400798:	4640      	mov	r0, r8
  40079a:	4c4e      	ldr	r4, [pc, #312]	; (4008d4 <ssd1306_init+0x1a8>)
  40079c:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40079e:	2300      	movs	r3, #0
  4007a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4007a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007a8:	4640      	mov	r0, r8
  4007aa:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4007ac:	2300      	movs	r3, #0
  4007ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4007b2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007b6:	4640      	mov	r0, r8
  4007b8:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4007ba:	2300      	movs	r3, #0
  4007bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4007c0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007c4:	4640      	mov	r0, r8
  4007c6:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  4007c8:	2300      	movs	r3, #0
  4007ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4007ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007d2:	4640      	mov	r0, r8
  4007d4:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  4007d6:	2300      	movs	r3, #0
  4007d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4007dc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007e0:	4640      	mov	r0, r8
  4007e2:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4007e4:	4c3c      	ldr	r4, [pc, #240]	; (4008d8 <ssd1306_init+0x1ac>)
  4007e6:	f04f 0902 	mov.w	r9, #2
  4007ea:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4007ee:	f04f 0880 	mov.w	r8, #128	; 0x80
  4007f2:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4007f6:	6863      	ldr	r3, [r4, #4]
  4007f8:	f043 0301 	orr.w	r3, r3, #1
  4007fc:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  4007fe:	463a      	mov	r2, r7
  400800:	2101      	movs	r1, #1
  400802:	4620      	mov	r0, r4
  400804:	4b35      	ldr	r3, [pc, #212]	; (4008dc <ssd1306_init+0x1b0>)
  400806:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400808:	2200      	movs	r2, #0
  40080a:	2101      	movs	r1, #1
  40080c:	4620      	mov	r0, r4
  40080e:	4b34      	ldr	r3, [pc, #208]	; (4008e0 <ssd1306_init+0x1b4>)
  400810:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400812:	2200      	movs	r2, #0
  400814:	2101      	movs	r1, #1
  400816:	4620      	mov	r0, r4
  400818:	4b32      	ldr	r3, [pc, #200]	; (4008e4 <ssd1306_init+0x1b8>)
  40081a:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  40081c:	6863      	ldr	r3, [r4, #4]
  40081e:	f023 0302 	bic.w	r3, r3, #2
  400822:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400824:	2200      	movs	r2, #0
  400826:	2101      	movs	r1, #1
  400828:	4620      	mov	r0, r4
  40082a:	4b2f      	ldr	r3, [pc, #188]	; (4008e8 <ssd1306_init+0x1bc>)
  40082c:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  40082e:	6863      	ldr	r3, [r4, #4]
  400830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400834:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400836:	6863      	ldr	r3, [r4, #4]
  400838:	f043 0310 	orr.w	r3, r3, #16
  40083c:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  40083e:	492b      	ldr	r1, [pc, #172]	; (4008ec <ssd1306_init+0x1c0>)
  400840:	482b      	ldr	r0, [pc, #172]	; (4008f0 <ssd1306_init+0x1c4>)
  400842:	4b2c      	ldr	r3, [pc, #176]	; (4008f4 <ssd1306_init+0x1c8>)
  400844:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400846:	b2c2      	uxtb	r2, r0
  400848:	2101      	movs	r1, #1
  40084a:	4620      	mov	r0, r4
  40084c:	4b2a      	ldr	r3, [pc, #168]	; (4008f8 <ssd1306_init+0x1cc>)
  40084e:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400850:	4620      	mov	r0, r4
  400852:	4b2a      	ldr	r3, [pc, #168]	; (4008fc <ssd1306_init+0x1d0>)
  400854:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400856:	2301      	movs	r3, #1
  400858:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40085a:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  40085c:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400860:	4c27      	ldr	r4, [pc, #156]	; (400900 <ssd1306_init+0x1d4>)
  400862:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400864:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400866:	f640 30b8 	movw	r0, #3000	; 0xbb8
  40086a:	47a0      	blx	r4
  40086c:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  40086e:	20a8      	movs	r0, #168	; 0xa8
  400870:	4c24      	ldr	r4, [pc, #144]	; (400904 <ssd1306_init+0x1d8>)
  400872:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400874:	201f      	movs	r0, #31
  400876:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400878:	20d3      	movs	r0, #211	; 0xd3
  40087a:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  40087c:	2000      	movs	r0, #0
  40087e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400880:	2040      	movs	r0, #64	; 0x40
  400882:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400884:	20a1      	movs	r0, #161	; 0xa1
  400886:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400888:	20c8      	movs	r0, #200	; 0xc8
  40088a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  40088c:	20da      	movs	r0, #218	; 0xda
  40088e:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400890:	4648      	mov	r0, r9
  400892:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400894:	2081      	movs	r0, #129	; 0x81
  400896:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400898:	208f      	movs	r0, #143	; 0x8f
  40089a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  40089c:	20a4      	movs	r0, #164	; 0xa4
  40089e:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  4008a0:	20a6      	movs	r0, #166	; 0xa6
  4008a2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  4008a4:	20d5      	movs	r0, #213	; 0xd5
  4008a6:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  4008a8:	4640      	mov	r0, r8
  4008aa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  4008ac:	208d      	movs	r0, #141	; 0x8d
  4008ae:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  4008b0:	2014      	movs	r0, #20
  4008b2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  4008b4:	20db      	movs	r0, #219	; 0xdb
  4008b6:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  4008b8:	2040      	movs	r0, #64	; 0x40
  4008ba:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  4008bc:	20d9      	movs	r0, #217	; 0xd9
  4008be:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  4008c0:	20f1      	movs	r0, #241	; 0xf1
  4008c2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  4008c4:	20af      	movs	r0, #175	; 0xaf
  4008c6:	47a0      	blx	r4
  4008c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008cc:	400e1200 	.word	0x400e1200
  4008d0:	400e1000 	.word	0x400e1000
  4008d4:	00400cf5 	.word	0x00400cf5
  4008d8:	40008000 	.word	0x40008000
  4008dc:	00400323 	.word	0x00400323
  4008e0:	004002e7 	.word	0x004002e7
  4008e4:	00400305 	.word	0x00400305
  4008e8:	00400369 	.word	0x00400369
  4008ec:	08f0d180 	.word	0x08f0d180
  4008f0:	001e8480 	.word	0x001e8480
  4008f4:	0040037d 	.word	0x0040037d
  4008f8:	00400393 	.word	0x00400393
  4008fc:	00400271 	.word	0x00400271
  400900:	20400001 	.word	0x20400001
  400904:	004006ed 	.word	0x004006ed
  400908:	400e1400 	.word	0x400e1400

0040090c <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  40090c:	b538      	push	{r3, r4, r5, lr}
  40090e:	4605      	mov	r5, r0
  400910:	2208      	movs	r2, #8
  400912:	4b09      	ldr	r3, [pc, #36]	; (400938 <ssd1306_write_data+0x2c>)
  400914:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400916:	4c09      	ldr	r4, [pc, #36]	; (40093c <ssd1306_write_data+0x30>)
  400918:	2101      	movs	r1, #1
  40091a:	4620      	mov	r0, r4
  40091c:	4b08      	ldr	r3, [pc, #32]	; (400940 <ssd1306_write_data+0x34>)
  40091e:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400920:	2301      	movs	r3, #1
  400922:	461a      	mov	r2, r3
  400924:	4629      	mov	r1, r5
  400926:	4620      	mov	r0, r4
  400928:	4c06      	ldr	r4, [pc, #24]	; (400944 <ssd1306_write_data+0x38>)
  40092a:	47a0      	blx	r4
	delay_us(10);
  40092c:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400930:	4b05      	ldr	r3, [pc, #20]	; (400948 <ssd1306_write_data+0x3c>)
  400932:	4798      	blx	r3
  400934:	bd38      	pop	{r3, r4, r5, pc}
  400936:	bf00      	nop
  400938:	400e1000 	.word	0x400e1000
  40093c:	40008000 	.word	0x40008000
  400940:	0040029d 	.word	0x0040029d
  400944:	004002b3 	.word	0x004002b3
  400948:	20400001 	.word	0x20400001

0040094c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40094c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40094e:	4810      	ldr	r0, [pc, #64]	; (400990 <sysclk_init+0x44>)
  400950:	4b10      	ldr	r3, [pc, #64]	; (400994 <sysclk_init+0x48>)
  400952:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400954:	213e      	movs	r1, #62	; 0x3e
  400956:	2000      	movs	r0, #0
  400958:	4b0f      	ldr	r3, [pc, #60]	; (400998 <sysclk_init+0x4c>)
  40095a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40095c:	4c0f      	ldr	r4, [pc, #60]	; (40099c <sysclk_init+0x50>)
  40095e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400960:	2800      	cmp	r0, #0
  400962:	d0fc      	beq.n	40095e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400964:	4b0e      	ldr	r3, [pc, #56]	; (4009a0 <sysclk_init+0x54>)
  400966:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400968:	4a0e      	ldr	r2, [pc, #56]	; (4009a4 <sysclk_init+0x58>)
  40096a:	4b0f      	ldr	r3, [pc, #60]	; (4009a8 <sysclk_init+0x5c>)
  40096c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40096e:	4c0f      	ldr	r4, [pc, #60]	; (4009ac <sysclk_init+0x60>)
  400970:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400972:	2800      	cmp	r0, #0
  400974:	d0fc      	beq.n	400970 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400976:	2002      	movs	r0, #2
  400978:	4b0d      	ldr	r3, [pc, #52]	; (4009b0 <sysclk_init+0x64>)
  40097a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40097c:	2000      	movs	r0, #0
  40097e:	4b0d      	ldr	r3, [pc, #52]	; (4009b4 <sysclk_init+0x68>)
  400980:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400982:	4b0d      	ldr	r3, [pc, #52]	; (4009b8 <sysclk_init+0x6c>)
  400984:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400986:	4802      	ldr	r0, [pc, #8]	; (400990 <sysclk_init+0x44>)
  400988:	4b02      	ldr	r3, [pc, #8]	; (400994 <sysclk_init+0x48>)
  40098a:	4798      	blx	r3
  40098c:	bd10      	pop	{r4, pc}
  40098e:	bf00      	nop
  400990:	11e1a300 	.word	0x11e1a300
  400994:	00401369 	.word	0x00401369
  400998:	00400f85 	.word	0x00400f85
  40099c:	00400fd9 	.word	0x00400fd9
  4009a0:	00400fe9 	.word	0x00400fe9
  4009a4:	20183f01 	.word	0x20183f01
  4009a8:	400e0600 	.word	0x400e0600
  4009ac:	00400ff9 	.word	0x00400ff9
  4009b0:	00400ee9 	.word	0x00400ee9
  4009b4:	00400f21 	.word	0x00400f21
  4009b8:	0040125d 	.word	0x0040125d

004009bc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4009bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4009c0:	b980      	cbnz	r0, 4009e4 <_read+0x28>
  4009c2:	460c      	mov	r4, r1
  4009c4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4009c6:	2a00      	cmp	r2, #0
  4009c8:	dd0f      	ble.n	4009ea <_read+0x2e>
  4009ca:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4009cc:	4e08      	ldr	r6, [pc, #32]	; (4009f0 <_read+0x34>)
  4009ce:	4d09      	ldr	r5, [pc, #36]	; (4009f4 <_read+0x38>)
  4009d0:	6830      	ldr	r0, [r6, #0]
  4009d2:	4621      	mov	r1, r4
  4009d4:	682b      	ldr	r3, [r5, #0]
  4009d6:	4798      	blx	r3
		ptr++;
  4009d8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4009da:	42bc      	cmp	r4, r7
  4009dc:	d1f8      	bne.n	4009d0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4009de:	4640      	mov	r0, r8
  4009e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4009e4:	f04f 38ff 	mov.w	r8, #4294967295
  4009e8:	e7f9      	b.n	4009de <_read+0x22>
	for (; len > 0; --len) {
  4009ea:	4680      	mov	r8, r0
  4009ec:	e7f7      	b.n	4009de <_read+0x22>
  4009ee:	bf00      	nop
  4009f0:	20400ddc 	.word	0x20400ddc
  4009f4:	20400dd4 	.word	0x20400dd4

004009f8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4009f8:	3801      	subs	r0, #1
  4009fa:	2802      	cmp	r0, #2
  4009fc:	d815      	bhi.n	400a2a <_write+0x32>
{
  4009fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a02:	460e      	mov	r6, r1
  400a04:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400a06:	b19a      	cbz	r2, 400a30 <_write+0x38>
  400a08:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400a0a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400a44 <_write+0x4c>
  400a0e:	4f0c      	ldr	r7, [pc, #48]	; (400a40 <_write+0x48>)
  400a10:	f8d8 0000 	ldr.w	r0, [r8]
  400a14:	f815 1b01 	ldrb.w	r1, [r5], #1
  400a18:	683b      	ldr	r3, [r7, #0]
  400a1a:	4798      	blx	r3
  400a1c:	2800      	cmp	r0, #0
  400a1e:	db0a      	blt.n	400a36 <_write+0x3e>
  400a20:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400a22:	3c01      	subs	r4, #1
  400a24:	d1f4      	bne.n	400a10 <_write+0x18>
  400a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400a2a:	f04f 30ff 	mov.w	r0, #4294967295
  400a2e:	4770      	bx	lr
	for (; len != 0; --len) {
  400a30:	4610      	mov	r0, r2
  400a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400a36:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a3e:	bf00      	nop
  400a40:	20400dd8 	.word	0x20400dd8
  400a44:	20400ddc 	.word	0x20400ddc

00400a48 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400a4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a4e:	4b5c      	ldr	r3, [pc, #368]	; (400bc0 <board_init+0x178>)
  400a50:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400a52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a56:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400a5a:	4b5a      	ldr	r3, [pc, #360]	; (400bc4 <board_init+0x17c>)
  400a5c:	2200      	movs	r2, #0
  400a5e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400a62:	695a      	ldr	r2, [r3, #20]
  400a64:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400a68:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400a6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a6e:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400a72:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400a76:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400a7a:	f007 0007 	and.w	r0, r7, #7
  400a7e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400a80:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400a84:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400a88:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400a8c:	f3bf 8f4f 	dsb	sy
  400a90:	f04f 34ff 	mov.w	r4, #4294967295
  400a94:	fa04 fc00 	lsl.w	ip, r4, r0
  400a98:	fa06 f000 	lsl.w	r0, r6, r0
  400a9c:	fa04 f40e 	lsl.w	r4, r4, lr
  400aa0:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400aa4:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400aa6:	463a      	mov	r2, r7
  400aa8:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400aaa:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400aae:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400ab2:	3a01      	subs	r2, #1
  400ab4:	4423      	add	r3, r4
  400ab6:	f1b2 3fff 	cmp.w	r2, #4294967295
  400aba:	d1f6      	bne.n	400aaa <board_init+0x62>
        } while(sets--);
  400abc:	3e01      	subs	r6, #1
  400abe:	4460      	add	r0, ip
  400ac0:	f1b6 3fff 	cmp.w	r6, #4294967295
  400ac4:	d1ef      	bne.n	400aa6 <board_init+0x5e>
  400ac6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400aca:	4b3e      	ldr	r3, [pc, #248]	; (400bc4 <board_init+0x17c>)
  400acc:	695a      	ldr	r2, [r3, #20]
  400ace:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400ad2:	615a      	str	r2, [r3, #20]
  400ad4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ad8:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400adc:	4a3a      	ldr	r2, [pc, #232]	; (400bc8 <board_init+0x180>)
  400ade:	493b      	ldr	r1, [pc, #236]	; (400bcc <board_init+0x184>)
  400ae0:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400ae2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400ae6:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400ae8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400aec:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400af0:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400af4:	f022 0201 	bic.w	r2, r2, #1
  400af8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400afc:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400b00:	f022 0201 	bic.w	r2, r2, #1
  400b04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400b08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400b0c:	f3bf 8f6f 	isb	sy
  400b10:	200a      	movs	r0, #10
  400b12:	4c2f      	ldr	r4, [pc, #188]	; (400bd0 <board_init+0x188>)
  400b14:	47a0      	blx	r4
  400b16:	200b      	movs	r0, #11
  400b18:	47a0      	blx	r4
  400b1a:	200c      	movs	r0, #12
  400b1c:	47a0      	blx	r4
  400b1e:	2010      	movs	r0, #16
  400b20:	47a0      	blx	r4
  400b22:	2011      	movs	r0, #17
  400b24:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400b26:	4b2b      	ldr	r3, [pc, #172]	; (400bd4 <board_init+0x18c>)
  400b28:	f44f 7280 	mov.w	r2, #256	; 0x100
  400b2c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b2e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b32:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400b34:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400b38:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400b3c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400b3e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400b42:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400b44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b48:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400b4a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400b50:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400b52:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400b56:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b58:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400b5a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400b5e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400b60:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400b64:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400b68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400b6c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400b70:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b76:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b78:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400b7e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400b80:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400b84:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400b86:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400b88:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400b8c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b8e:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400b90:	4a11      	ldr	r2, [pc, #68]	; (400bd8 <board_init+0x190>)
  400b92:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400b96:	f043 0310 	orr.w	r3, r3, #16
  400b9a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400b9e:	4b0f      	ldr	r3, [pc, #60]	; (400bdc <board_init+0x194>)
  400ba0:	2210      	movs	r2, #16
  400ba2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400ba4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ba8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400baa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400bb0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400bb2:	4311      	orrs	r1, r2
  400bb4:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400bb6:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400bb8:	4311      	orrs	r1, r2
  400bba:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400bbc:	605a      	str	r2, [r3, #4]
  400bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400bc0:	400e1850 	.word	0x400e1850
  400bc4:	e000ed00 	.word	0xe000ed00
  400bc8:	400e0c00 	.word	0x400e0c00
  400bcc:	5a00080c 	.word	0x5a00080c
  400bd0:	00401009 	.word	0x00401009
  400bd4:	400e1200 	.word	0x400e1200
  400bd8:	40088000 	.word	0x40088000
  400bdc:	400e1000 	.word	0x400e1000

00400be0 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400be0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400be4:	0053      	lsls	r3, r2, #1
  400be6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400bea:	fbb2 f2f3 	udiv	r2, r2, r3
  400bee:	3a01      	subs	r2, #1
  400bf0:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400bf4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400bf8:	4770      	bx	lr

00400bfa <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400bfa:	6301      	str	r1, [r0, #48]	; 0x30
  400bfc:	4770      	bx	lr

00400bfe <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400bfe:	6341      	str	r1, [r0, #52]	; 0x34
  400c00:	4770      	bx	lr

00400c02 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400c02:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400c04:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400c08:	d03a      	beq.n	400c80 <pio_set_peripheral+0x7e>
  400c0a:	d813      	bhi.n	400c34 <pio_set_peripheral+0x32>
  400c0c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400c10:	d025      	beq.n	400c5e <pio_set_peripheral+0x5c>
  400c12:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400c16:	d10a      	bne.n	400c2e <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c18:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c1a:	4313      	orrs	r3, r2
  400c1c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400c1e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c20:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400c22:	400b      	ands	r3, r1
  400c24:	ea23 0302 	bic.w	r3, r3, r2
  400c28:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400c2a:	6042      	str	r2, [r0, #4]
  400c2c:	4770      	bx	lr
	switch (ul_type) {
  400c2e:	2900      	cmp	r1, #0
  400c30:	d1fb      	bne.n	400c2a <pio_set_peripheral+0x28>
  400c32:	4770      	bx	lr
  400c34:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400c38:	d021      	beq.n	400c7e <pio_set_peripheral+0x7c>
  400c3a:	d809      	bhi.n	400c50 <pio_set_peripheral+0x4e>
  400c3c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400c40:	d1f3      	bne.n	400c2a <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c42:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400c44:	4313      	orrs	r3, r2
  400c46:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c48:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c4a:	4313      	orrs	r3, r2
  400c4c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c4e:	e7ec      	b.n	400c2a <pio_set_peripheral+0x28>
	switch (ul_type) {
  400c50:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400c54:	d013      	beq.n	400c7e <pio_set_peripheral+0x7c>
  400c56:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400c5a:	d010      	beq.n	400c7e <pio_set_peripheral+0x7c>
  400c5c:	e7e5      	b.n	400c2a <pio_set_peripheral+0x28>
{
  400c5e:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c60:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c62:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400c64:	43d3      	mvns	r3, r2
  400c66:	4021      	ands	r1, r4
  400c68:	461c      	mov	r4, r3
  400c6a:	4019      	ands	r1, r3
  400c6c:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c6e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400c70:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400c72:	400b      	ands	r3, r1
  400c74:	4023      	ands	r3, r4
  400c76:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400c78:	6042      	str	r2, [r0, #4]
}
  400c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c7e:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c80:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c82:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400c84:	400b      	ands	r3, r1
  400c86:	ea23 0302 	bic.w	r3, r3, r2
  400c8a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c8c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c8e:	4313      	orrs	r3, r2
  400c90:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c92:	e7ca      	b.n	400c2a <pio_set_peripheral+0x28>

00400c94 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400c94:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400c96:	f012 0f01 	tst.w	r2, #1
  400c9a:	d10d      	bne.n	400cb8 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400c9c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400c9e:	f012 0f0a 	tst.w	r2, #10
  400ca2:	d00b      	beq.n	400cbc <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400ca4:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400ca6:	f012 0f02 	tst.w	r2, #2
  400caa:	d109      	bne.n	400cc0 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400cac:	f012 0f08 	tst.w	r2, #8
  400cb0:	d008      	beq.n	400cc4 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400cb2:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400cb6:	e005      	b.n	400cc4 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400cb8:	6641      	str	r1, [r0, #100]	; 0x64
  400cba:	e7f0      	b.n	400c9e <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400cbc:	6241      	str	r1, [r0, #36]	; 0x24
  400cbe:	e7f2      	b.n	400ca6 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400cc0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400cc4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400cc6:	6001      	str	r1, [r0, #0]
  400cc8:	4770      	bx	lr

00400cca <pio_set_output>:
{
  400cca:	b410      	push	{r4}
  400ccc:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400cce:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400cd0:	b94c      	cbnz	r4, 400ce6 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400cd2:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400cd4:	b14b      	cbz	r3, 400cea <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400cd6:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400cd8:	b94a      	cbnz	r2, 400cee <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400cda:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400cdc:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400cde:	6001      	str	r1, [r0, #0]
}
  400ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ce4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400ce6:	6641      	str	r1, [r0, #100]	; 0x64
  400ce8:	e7f4      	b.n	400cd4 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400cea:	6541      	str	r1, [r0, #84]	; 0x54
  400cec:	e7f4      	b.n	400cd8 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400cee:	6301      	str	r1, [r0, #48]	; 0x30
  400cf0:	e7f4      	b.n	400cdc <pio_set_output+0x12>
	...

00400cf4 <pio_configure>:
{
  400cf4:	b570      	push	{r4, r5, r6, lr}
  400cf6:	b082      	sub	sp, #8
  400cf8:	4605      	mov	r5, r0
  400cfa:	4616      	mov	r6, r2
  400cfc:	461c      	mov	r4, r3
	switch (ul_type) {
  400cfe:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400d02:	d014      	beq.n	400d2e <pio_configure+0x3a>
  400d04:	d90a      	bls.n	400d1c <pio_configure+0x28>
  400d06:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400d0a:	d024      	beq.n	400d56 <pio_configure+0x62>
  400d0c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d10:	d021      	beq.n	400d56 <pio_configure+0x62>
  400d12:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400d16:	d017      	beq.n	400d48 <pio_configure+0x54>
		return 0;
  400d18:	2000      	movs	r0, #0
  400d1a:	e01a      	b.n	400d52 <pio_configure+0x5e>
	switch (ul_type) {
  400d1c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400d20:	d005      	beq.n	400d2e <pio_configure+0x3a>
  400d22:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400d26:	d002      	beq.n	400d2e <pio_configure+0x3a>
  400d28:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400d2c:	d1f4      	bne.n	400d18 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400d2e:	4632      	mov	r2, r6
  400d30:	4628      	mov	r0, r5
  400d32:	4b11      	ldr	r3, [pc, #68]	; (400d78 <pio_configure+0x84>)
  400d34:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400d36:	f014 0f01 	tst.w	r4, #1
  400d3a:	d102      	bne.n	400d42 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400d3c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400d3e:	2001      	movs	r0, #1
  400d40:	e007      	b.n	400d52 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400d42:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400d44:	2001      	movs	r0, #1
  400d46:	e004      	b.n	400d52 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400d48:	461a      	mov	r2, r3
  400d4a:	4631      	mov	r1, r6
  400d4c:	4b0b      	ldr	r3, [pc, #44]	; (400d7c <pio_configure+0x88>)
  400d4e:	4798      	blx	r3
	return 1;
  400d50:	2001      	movs	r0, #1
}
  400d52:	b002      	add	sp, #8
  400d54:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400d56:	f004 0301 	and.w	r3, r4, #1
  400d5a:	9300      	str	r3, [sp, #0]
  400d5c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400d60:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d64:	bf14      	ite	ne
  400d66:	2200      	movne	r2, #0
  400d68:	2201      	moveq	r2, #1
  400d6a:	4631      	mov	r1, r6
  400d6c:	4628      	mov	r0, r5
  400d6e:	4c04      	ldr	r4, [pc, #16]	; (400d80 <pio_configure+0x8c>)
  400d70:	47a0      	blx	r4
	return 1;
  400d72:	2001      	movs	r0, #1
		break;
  400d74:	e7ed      	b.n	400d52 <pio_configure+0x5e>
  400d76:	bf00      	nop
  400d78:	00400c03 	.word	0x00400c03
  400d7c:	00400c95 	.word	0x00400c95
  400d80:	00400ccb 	.word	0x00400ccb

00400d84 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400d84:	f012 0f10 	tst.w	r2, #16
  400d88:	d012      	beq.n	400db0 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400d8a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400d8e:	f012 0f20 	tst.w	r2, #32
  400d92:	d007      	beq.n	400da4 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400d94:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400d98:	f012 0f40 	tst.w	r2, #64	; 0x40
  400d9c:	d005      	beq.n	400daa <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400d9e:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400da2:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400da4:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400da8:	e7f6      	b.n	400d98 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400daa:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400dae:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400db0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400db4:	4770      	bx	lr

00400db6 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400db6:	6401      	str	r1, [r0, #64]	; 0x40
  400db8:	4770      	bx	lr

00400dba <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400dba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400dbc:	4770      	bx	lr

00400dbe <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400dbe:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400dc0:	4770      	bx	lr
	...

00400dc4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400dc8:	4604      	mov	r4, r0
  400dca:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400dcc:	4b0e      	ldr	r3, [pc, #56]	; (400e08 <pio_handler_process+0x44>)
  400dce:	4798      	blx	r3
  400dd0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400dd2:	4620      	mov	r0, r4
  400dd4:	4b0d      	ldr	r3, [pc, #52]	; (400e0c <pio_handler_process+0x48>)
  400dd6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400dd8:	4005      	ands	r5, r0
  400dda:	d013      	beq.n	400e04 <pio_handler_process+0x40>
  400ddc:	4c0c      	ldr	r4, [pc, #48]	; (400e10 <pio_handler_process+0x4c>)
  400dde:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400de2:	e003      	b.n	400dec <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400de4:	42b4      	cmp	r4, r6
  400de6:	d00d      	beq.n	400e04 <pio_handler_process+0x40>
  400de8:	3410      	adds	r4, #16
		while (status != 0) {
  400dea:	b15d      	cbz	r5, 400e04 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400dec:	6820      	ldr	r0, [r4, #0]
  400dee:	4540      	cmp	r0, r8
  400df0:	d1f8      	bne.n	400de4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400df2:	6861      	ldr	r1, [r4, #4]
  400df4:	4229      	tst	r1, r5
  400df6:	d0f5      	beq.n	400de4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400df8:	68e3      	ldr	r3, [r4, #12]
  400dfa:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400dfc:	6863      	ldr	r3, [r4, #4]
  400dfe:	ea25 0503 	bic.w	r5, r5, r3
  400e02:	e7ef      	b.n	400de4 <pio_handler_process+0x20>
  400e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e08:	00400dbb 	.word	0x00400dbb
  400e0c:	00400dbf 	.word	0x00400dbf
  400e10:	20400be4 	.word	0x20400be4

00400e14 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400e16:	4c18      	ldr	r4, [pc, #96]	; (400e78 <pio_handler_set+0x64>)
  400e18:	6826      	ldr	r6, [r4, #0]
  400e1a:	2e06      	cmp	r6, #6
  400e1c:	d82a      	bhi.n	400e74 <pio_handler_set+0x60>
  400e1e:	f04f 0c00 	mov.w	ip, #0
  400e22:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400e24:	4f15      	ldr	r7, [pc, #84]	; (400e7c <pio_handler_set+0x68>)
  400e26:	e004      	b.n	400e32 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400e28:	3401      	adds	r4, #1
  400e2a:	b2e4      	uxtb	r4, r4
  400e2c:	46a4      	mov	ip, r4
  400e2e:	42a6      	cmp	r6, r4
  400e30:	d309      	bcc.n	400e46 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400e32:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400e34:	0125      	lsls	r5, r4, #4
  400e36:	597d      	ldr	r5, [r7, r5]
  400e38:	428d      	cmp	r5, r1
  400e3a:	d1f5      	bne.n	400e28 <pio_handler_set+0x14>
  400e3c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400e40:	686d      	ldr	r5, [r5, #4]
  400e42:	4295      	cmp	r5, r2
  400e44:	d1f0      	bne.n	400e28 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400e46:	4d0d      	ldr	r5, [pc, #52]	; (400e7c <pio_handler_set+0x68>)
  400e48:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400e4c:	eb05 040e 	add.w	r4, r5, lr
  400e50:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400e54:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400e56:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400e58:	9906      	ldr	r1, [sp, #24]
  400e5a:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400e5c:	3601      	adds	r6, #1
  400e5e:	4566      	cmp	r6, ip
  400e60:	d005      	beq.n	400e6e <pio_handler_set+0x5a>
  400e62:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400e64:	461a      	mov	r2, r3
  400e66:	4b06      	ldr	r3, [pc, #24]	; (400e80 <pio_handler_set+0x6c>)
  400e68:	4798      	blx	r3

	return 0;
  400e6a:	2000      	movs	r0, #0
  400e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400e6e:	4902      	ldr	r1, [pc, #8]	; (400e78 <pio_handler_set+0x64>)
  400e70:	600e      	str	r6, [r1, #0]
  400e72:	e7f6      	b.n	400e62 <pio_handler_set+0x4e>
		return 1;
  400e74:	2001      	movs	r0, #1
}
  400e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e78:	20400c54 	.word	0x20400c54
  400e7c:	20400be4 	.word	0x20400be4
  400e80:	00400d85 	.word	0x00400d85

00400e84 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400e84:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400e86:	210a      	movs	r1, #10
  400e88:	4801      	ldr	r0, [pc, #4]	; (400e90 <PIOA_Handler+0xc>)
  400e8a:	4b02      	ldr	r3, [pc, #8]	; (400e94 <PIOA_Handler+0x10>)
  400e8c:	4798      	blx	r3
  400e8e:	bd08      	pop	{r3, pc}
  400e90:	400e0e00 	.word	0x400e0e00
  400e94:	00400dc5 	.word	0x00400dc5

00400e98 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400e98:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400e9a:	210b      	movs	r1, #11
  400e9c:	4801      	ldr	r0, [pc, #4]	; (400ea4 <PIOB_Handler+0xc>)
  400e9e:	4b02      	ldr	r3, [pc, #8]	; (400ea8 <PIOB_Handler+0x10>)
  400ea0:	4798      	blx	r3
  400ea2:	bd08      	pop	{r3, pc}
  400ea4:	400e1000 	.word	0x400e1000
  400ea8:	00400dc5 	.word	0x00400dc5

00400eac <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400eac:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400eae:	210c      	movs	r1, #12
  400eb0:	4801      	ldr	r0, [pc, #4]	; (400eb8 <PIOC_Handler+0xc>)
  400eb2:	4b02      	ldr	r3, [pc, #8]	; (400ebc <PIOC_Handler+0x10>)
  400eb4:	4798      	blx	r3
  400eb6:	bd08      	pop	{r3, pc}
  400eb8:	400e1200 	.word	0x400e1200
  400ebc:	00400dc5 	.word	0x00400dc5

00400ec0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400ec0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400ec2:	2110      	movs	r1, #16
  400ec4:	4801      	ldr	r0, [pc, #4]	; (400ecc <PIOD_Handler+0xc>)
  400ec6:	4b02      	ldr	r3, [pc, #8]	; (400ed0 <PIOD_Handler+0x10>)
  400ec8:	4798      	blx	r3
  400eca:	bd08      	pop	{r3, pc}
  400ecc:	400e1400 	.word	0x400e1400
  400ed0:	00400dc5 	.word	0x00400dc5

00400ed4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400ed4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400ed6:	2111      	movs	r1, #17
  400ed8:	4801      	ldr	r0, [pc, #4]	; (400ee0 <PIOE_Handler+0xc>)
  400eda:	4b02      	ldr	r3, [pc, #8]	; (400ee4 <PIOE_Handler+0x10>)
  400edc:	4798      	blx	r3
  400ede:	bd08      	pop	{r3, pc}
  400ee0:	400e1600 	.word	0x400e1600
  400ee4:	00400dc5 	.word	0x00400dc5

00400ee8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400ee8:	2803      	cmp	r0, #3
  400eea:	d011      	beq.n	400f10 <pmc_mck_set_division+0x28>
  400eec:	2804      	cmp	r0, #4
  400eee:	d012      	beq.n	400f16 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400ef0:	2802      	cmp	r0, #2
  400ef2:	bf0c      	ite	eq
  400ef4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400ef8:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400efa:	4a08      	ldr	r2, [pc, #32]	; (400f1c <pmc_mck_set_division+0x34>)
  400efc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400f02:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400f04:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400f06:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f08:	f013 0f08 	tst.w	r3, #8
  400f0c:	d0fb      	beq.n	400f06 <pmc_mck_set_division+0x1e>
}
  400f0e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400f10:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400f14:	e7f1      	b.n	400efa <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400f16:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400f1a:	e7ee      	b.n	400efa <pmc_mck_set_division+0x12>
  400f1c:	400e0600 	.word	0x400e0600

00400f20 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400f20:	4a17      	ldr	r2, [pc, #92]	; (400f80 <pmc_switch_mck_to_pllack+0x60>)
  400f22:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400f28:	4318      	orrs	r0, r3
  400f2a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f2c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f2e:	f013 0f08 	tst.w	r3, #8
  400f32:	d10a      	bne.n	400f4a <pmc_switch_mck_to_pllack+0x2a>
  400f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f38:	4911      	ldr	r1, [pc, #68]	; (400f80 <pmc_switch_mck_to_pllack+0x60>)
  400f3a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f3c:	f012 0f08 	tst.w	r2, #8
  400f40:	d103      	bne.n	400f4a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f42:	3b01      	subs	r3, #1
  400f44:	d1f9      	bne.n	400f3a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400f46:	2001      	movs	r0, #1
  400f48:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400f4a:	4a0d      	ldr	r2, [pc, #52]	; (400f80 <pmc_switch_mck_to_pllack+0x60>)
  400f4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f4e:	f023 0303 	bic.w	r3, r3, #3
  400f52:	f043 0302 	orr.w	r3, r3, #2
  400f56:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f58:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f5a:	f013 0f08 	tst.w	r3, #8
  400f5e:	d10a      	bne.n	400f76 <pmc_switch_mck_to_pllack+0x56>
  400f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f64:	4906      	ldr	r1, [pc, #24]	; (400f80 <pmc_switch_mck_to_pllack+0x60>)
  400f66:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f68:	f012 0f08 	tst.w	r2, #8
  400f6c:	d105      	bne.n	400f7a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f6e:	3b01      	subs	r3, #1
  400f70:	d1f9      	bne.n	400f66 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400f72:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400f74:	4770      	bx	lr
	return 0;
  400f76:	2000      	movs	r0, #0
  400f78:	4770      	bx	lr
  400f7a:	2000      	movs	r0, #0
  400f7c:	4770      	bx	lr
  400f7e:	bf00      	nop
  400f80:	400e0600 	.word	0x400e0600

00400f84 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400f84:	b9a0      	cbnz	r0, 400fb0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f86:	480e      	ldr	r0, [pc, #56]	; (400fc0 <pmc_switch_mainck_to_xtal+0x3c>)
  400f88:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400f8a:	0209      	lsls	r1, r1, #8
  400f8c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400f8e:	4a0d      	ldr	r2, [pc, #52]	; (400fc4 <pmc_switch_mainck_to_xtal+0x40>)
  400f90:	401a      	ands	r2, r3
  400f92:	4b0d      	ldr	r3, [pc, #52]	; (400fc8 <pmc_switch_mainck_to_xtal+0x44>)
  400f94:	4313      	orrs	r3, r2
  400f96:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f98:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400f9a:	4602      	mov	r2, r0
  400f9c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f9e:	f013 0f01 	tst.w	r3, #1
  400fa2:	d0fb      	beq.n	400f9c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400fa4:	4a06      	ldr	r2, [pc, #24]	; (400fc0 <pmc_switch_mainck_to_xtal+0x3c>)
  400fa6:	6a11      	ldr	r1, [r2, #32]
  400fa8:	4b08      	ldr	r3, [pc, #32]	; (400fcc <pmc_switch_mainck_to_xtal+0x48>)
  400faa:	430b      	orrs	r3, r1
  400fac:	6213      	str	r3, [r2, #32]
  400fae:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fb0:	4903      	ldr	r1, [pc, #12]	; (400fc0 <pmc_switch_mainck_to_xtal+0x3c>)
  400fb2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400fb4:	4a06      	ldr	r2, [pc, #24]	; (400fd0 <pmc_switch_mainck_to_xtal+0x4c>)
  400fb6:	401a      	ands	r2, r3
  400fb8:	4b06      	ldr	r3, [pc, #24]	; (400fd4 <pmc_switch_mainck_to_xtal+0x50>)
  400fba:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400fbc:	620b      	str	r3, [r1, #32]
  400fbe:	4770      	bx	lr
  400fc0:	400e0600 	.word	0x400e0600
  400fc4:	ffc8fffc 	.word	0xffc8fffc
  400fc8:	00370001 	.word	0x00370001
  400fcc:	01370000 	.word	0x01370000
  400fd0:	fec8fffc 	.word	0xfec8fffc
  400fd4:	01370002 	.word	0x01370002

00400fd8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400fd8:	4b02      	ldr	r3, [pc, #8]	; (400fe4 <pmc_osc_is_ready_mainck+0xc>)
  400fda:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400fdc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400fe0:	4770      	bx	lr
  400fe2:	bf00      	nop
  400fe4:	400e0600 	.word	0x400e0600

00400fe8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400fe8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400fec:	4b01      	ldr	r3, [pc, #4]	; (400ff4 <pmc_disable_pllack+0xc>)
  400fee:	629a      	str	r2, [r3, #40]	; 0x28
  400ff0:	4770      	bx	lr
  400ff2:	bf00      	nop
  400ff4:	400e0600 	.word	0x400e0600

00400ff8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400ff8:	4b02      	ldr	r3, [pc, #8]	; (401004 <pmc_is_locked_pllack+0xc>)
  400ffa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400ffc:	f000 0002 	and.w	r0, r0, #2
  401000:	4770      	bx	lr
  401002:	bf00      	nop
  401004:	400e0600 	.word	0x400e0600

00401008 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401008:	283f      	cmp	r0, #63	; 0x3f
  40100a:	d81e      	bhi.n	40104a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40100c:	281f      	cmp	r0, #31
  40100e:	d80c      	bhi.n	40102a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401010:	4b11      	ldr	r3, [pc, #68]	; (401058 <pmc_enable_periph_clk+0x50>)
  401012:	699a      	ldr	r2, [r3, #24]
  401014:	2301      	movs	r3, #1
  401016:	4083      	lsls	r3, r0
  401018:	4393      	bics	r3, r2
  40101a:	d018      	beq.n	40104e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40101c:	2301      	movs	r3, #1
  40101e:	fa03 f000 	lsl.w	r0, r3, r0
  401022:	4b0d      	ldr	r3, [pc, #52]	; (401058 <pmc_enable_periph_clk+0x50>)
  401024:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401026:	2000      	movs	r0, #0
  401028:	4770      	bx	lr
		ul_id -= 32;
  40102a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40102c:	4b0a      	ldr	r3, [pc, #40]	; (401058 <pmc_enable_periph_clk+0x50>)
  40102e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401032:	2301      	movs	r3, #1
  401034:	4083      	lsls	r3, r0
  401036:	4393      	bics	r3, r2
  401038:	d00b      	beq.n	401052 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40103a:	2301      	movs	r3, #1
  40103c:	fa03 f000 	lsl.w	r0, r3, r0
  401040:	4b05      	ldr	r3, [pc, #20]	; (401058 <pmc_enable_periph_clk+0x50>)
  401042:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401046:	2000      	movs	r0, #0
  401048:	4770      	bx	lr
		return 1;
  40104a:	2001      	movs	r0, #1
  40104c:	4770      	bx	lr
	return 0;
  40104e:	2000      	movs	r0, #0
  401050:	4770      	bx	lr
  401052:	2000      	movs	r0, #0
}
  401054:	4770      	bx	lr
  401056:	bf00      	nop
  401058:	400e0600 	.word	0x400e0600

0040105c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40105c:	6943      	ldr	r3, [r0, #20]
  40105e:	f013 0f02 	tst.w	r3, #2
  401062:	d002      	beq.n	40106a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401064:	61c1      	str	r1, [r0, #28]
	return 0;
  401066:	2000      	movs	r0, #0
  401068:	4770      	bx	lr
		return 1;
  40106a:	2001      	movs	r0, #1
}
  40106c:	4770      	bx	lr

0040106e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40106e:	6943      	ldr	r3, [r0, #20]
  401070:	f013 0f01 	tst.w	r3, #1
  401074:	d003      	beq.n	40107e <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401076:	6983      	ldr	r3, [r0, #24]
  401078:	700b      	strb	r3, [r1, #0]
	return 0;
  40107a:	2000      	movs	r0, #0
  40107c:	4770      	bx	lr
		return 1;
  40107e:	2001      	movs	r0, #1
}
  401080:	4770      	bx	lr

00401082 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401082:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401084:	010b      	lsls	r3, r1, #4
  401086:	4293      	cmp	r3, r2
  401088:	d914      	bls.n	4010b4 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40108a:	00c9      	lsls	r1, r1, #3
  40108c:	084b      	lsrs	r3, r1, #1
  40108e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401092:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401096:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401098:	1e5c      	subs	r4, r3, #1
  40109a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40109e:	428c      	cmp	r4, r1
  4010a0:	d901      	bls.n	4010a6 <usart_set_async_baudrate+0x24>
		return 1;
  4010a2:	2001      	movs	r0, #1
  4010a4:	e017      	b.n	4010d6 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4010a6:	6841      	ldr	r1, [r0, #4]
  4010a8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4010ac:	6041      	str	r1, [r0, #4]
  4010ae:	e00c      	b.n	4010ca <usart_set_async_baudrate+0x48>
		return 1;
  4010b0:	2001      	movs	r0, #1
  4010b2:	e010      	b.n	4010d6 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4010b4:	0859      	lsrs	r1, r3, #1
  4010b6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4010ba:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4010be:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4010c0:	1e5c      	subs	r4, r3, #1
  4010c2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4010c6:	428c      	cmp	r4, r1
  4010c8:	d8f2      	bhi.n	4010b0 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4010ca:	0412      	lsls	r2, r2, #16
  4010cc:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4010d0:	431a      	orrs	r2, r3
  4010d2:	6202      	str	r2, [r0, #32]

	return 0;
  4010d4:	2000      	movs	r0, #0
}
  4010d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010da:	4770      	bx	lr

004010dc <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4010dc:	4b08      	ldr	r3, [pc, #32]	; (401100 <usart_reset+0x24>)
  4010de:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4010e2:	2300      	movs	r3, #0
  4010e4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4010e6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4010e8:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4010ea:	2388      	movs	r3, #136	; 0x88
  4010ec:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4010ee:	2324      	movs	r3, #36	; 0x24
  4010f0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4010f2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4010f6:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4010f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4010fc:	6003      	str	r3, [r0, #0]
  4010fe:	4770      	bx	lr
  401100:	55534100 	.word	0x55534100

00401104 <usart_init_rs232>:
{
  401104:	b570      	push	{r4, r5, r6, lr}
  401106:	4605      	mov	r5, r0
  401108:	460c      	mov	r4, r1
  40110a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40110c:	4b0f      	ldr	r3, [pc, #60]	; (40114c <usart_init_rs232+0x48>)
  40110e:	4798      	blx	r3
	ul_reg_val = 0;
  401110:	2200      	movs	r2, #0
  401112:	4b0f      	ldr	r3, [pc, #60]	; (401150 <usart_init_rs232+0x4c>)
  401114:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401116:	b1a4      	cbz	r4, 401142 <usart_init_rs232+0x3e>
  401118:	4632      	mov	r2, r6
  40111a:	6821      	ldr	r1, [r4, #0]
  40111c:	4628      	mov	r0, r5
  40111e:	4b0d      	ldr	r3, [pc, #52]	; (401154 <usart_init_rs232+0x50>)
  401120:	4798      	blx	r3
  401122:	4602      	mov	r2, r0
  401124:	b978      	cbnz	r0, 401146 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401126:	6863      	ldr	r3, [r4, #4]
  401128:	68a1      	ldr	r1, [r4, #8]
  40112a:	430b      	orrs	r3, r1
  40112c:	6921      	ldr	r1, [r4, #16]
  40112e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401130:	68e1      	ldr	r1, [r4, #12]
  401132:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401134:	4906      	ldr	r1, [pc, #24]	; (401150 <usart_init_rs232+0x4c>)
  401136:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401138:	6869      	ldr	r1, [r5, #4]
  40113a:	430b      	orrs	r3, r1
  40113c:	606b      	str	r3, [r5, #4]
}
  40113e:	4610      	mov	r0, r2
  401140:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401142:	2201      	movs	r2, #1
  401144:	e7fb      	b.n	40113e <usart_init_rs232+0x3a>
  401146:	2201      	movs	r2, #1
  401148:	e7f9      	b.n	40113e <usart_init_rs232+0x3a>
  40114a:	bf00      	nop
  40114c:	004010dd 	.word	0x004010dd
  401150:	20400c58 	.word	0x20400c58
  401154:	00401083 	.word	0x00401083

00401158 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401158:	2340      	movs	r3, #64	; 0x40
  40115a:	6003      	str	r3, [r0, #0]
  40115c:	4770      	bx	lr

0040115e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40115e:	2310      	movs	r3, #16
  401160:	6003      	str	r3, [r0, #0]
  401162:	4770      	bx	lr

00401164 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401164:	6943      	ldr	r3, [r0, #20]
  401166:	f013 0f02 	tst.w	r3, #2
  40116a:	d004      	beq.n	401176 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  40116c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401170:	61c1      	str	r1, [r0, #28]
	return 0;
  401172:	2000      	movs	r0, #0
  401174:	4770      	bx	lr
		return 1;
  401176:	2001      	movs	r0, #1
}
  401178:	4770      	bx	lr

0040117a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40117a:	6943      	ldr	r3, [r0, #20]
  40117c:	f013 0f01 	tst.w	r3, #1
  401180:	d005      	beq.n	40118e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401182:	6983      	ldr	r3, [r0, #24]
  401184:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401188:	600b      	str	r3, [r1, #0]
	return 0;
  40118a:	2000      	movs	r0, #0
  40118c:	4770      	bx	lr
		return 1;
  40118e:	2001      	movs	r0, #1
}
  401190:	4770      	bx	lr

00401192 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401192:	e7fe      	b.n	401192 <Dummy_Handler>

00401194 <Reset_Handler>:
{
  401194:	b500      	push	{lr}
  401196:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401198:	4b25      	ldr	r3, [pc, #148]	; (401230 <Reset_Handler+0x9c>)
  40119a:	4a26      	ldr	r2, [pc, #152]	; (401234 <Reset_Handler+0xa0>)
  40119c:	429a      	cmp	r2, r3
  40119e:	d010      	beq.n	4011c2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4011a0:	4b25      	ldr	r3, [pc, #148]	; (401238 <Reset_Handler+0xa4>)
  4011a2:	4a23      	ldr	r2, [pc, #140]	; (401230 <Reset_Handler+0x9c>)
  4011a4:	429a      	cmp	r2, r3
  4011a6:	d20c      	bcs.n	4011c2 <Reset_Handler+0x2e>
  4011a8:	3b01      	subs	r3, #1
  4011aa:	1a9b      	subs	r3, r3, r2
  4011ac:	f023 0303 	bic.w	r3, r3, #3
  4011b0:	3304      	adds	r3, #4
  4011b2:	4413      	add	r3, r2
  4011b4:	491f      	ldr	r1, [pc, #124]	; (401234 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4011b6:	f851 0b04 	ldr.w	r0, [r1], #4
  4011ba:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4011be:	429a      	cmp	r2, r3
  4011c0:	d1f9      	bne.n	4011b6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4011c2:	4b1e      	ldr	r3, [pc, #120]	; (40123c <Reset_Handler+0xa8>)
  4011c4:	4a1e      	ldr	r2, [pc, #120]	; (401240 <Reset_Handler+0xac>)
  4011c6:	429a      	cmp	r2, r3
  4011c8:	d20a      	bcs.n	4011e0 <Reset_Handler+0x4c>
  4011ca:	3b01      	subs	r3, #1
  4011cc:	1a9b      	subs	r3, r3, r2
  4011ce:	f023 0303 	bic.w	r3, r3, #3
  4011d2:	3304      	adds	r3, #4
  4011d4:	4413      	add	r3, r2
                *pDest++ = 0;
  4011d6:	2100      	movs	r1, #0
  4011d8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4011dc:	4293      	cmp	r3, r2
  4011de:	d1fb      	bne.n	4011d8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4011e0:	4a18      	ldr	r2, [pc, #96]	; (401244 <Reset_Handler+0xb0>)
  4011e2:	4b19      	ldr	r3, [pc, #100]	; (401248 <Reset_Handler+0xb4>)
  4011e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4011e8:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4011ea:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4011ee:	fab3 f383 	clz	r3, r3
  4011f2:	095b      	lsrs	r3, r3, #5
  4011f4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4011f6:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4011f8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4011fc:	2200      	movs	r2, #0
  4011fe:	4b13      	ldr	r3, [pc, #76]	; (40124c <Reset_Handler+0xb8>)
  401200:	701a      	strb	r2, [r3, #0]
	return flags;
  401202:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401204:	4a12      	ldr	r2, [pc, #72]	; (401250 <Reset_Handler+0xbc>)
  401206:	6813      	ldr	r3, [r2, #0]
  401208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40120c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40120e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401212:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401216:	b129      	cbz	r1, 401224 <Reset_Handler+0x90>
		cpu_irq_enable();
  401218:	2201      	movs	r2, #1
  40121a:	4b0c      	ldr	r3, [pc, #48]	; (40124c <Reset_Handler+0xb8>)
  40121c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40121e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401222:	b662      	cpsie	i
        __libc_init_array();
  401224:	4b0b      	ldr	r3, [pc, #44]	; (401254 <Reset_Handler+0xc0>)
  401226:	4798      	blx	r3
        main();
  401228:	4b0b      	ldr	r3, [pc, #44]	; (401258 <Reset_Handler+0xc4>)
  40122a:	4798      	blx	r3
  40122c:	e7fe      	b.n	40122c <Reset_Handler+0x98>
  40122e:	bf00      	nop
  401230:	20400000 	.word	0x20400000
  401234:	0040950c 	.word	0x0040950c
  401238:	204009c0 	.word	0x204009c0
  40123c:	20400e50 	.word	0x20400e50
  401240:	204009c0 	.word	0x204009c0
  401244:	e000ed00 	.word	0xe000ed00
  401248:	00400000 	.word	0x00400000
  40124c:	2040000a 	.word	0x2040000a
  401250:	e000ed88 	.word	0xe000ed88
  401254:	00403f65 	.word	0x00403f65
  401258:	00403759 	.word	0x00403759

0040125c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40125c:	4b3b      	ldr	r3, [pc, #236]	; (40134c <SystemCoreClockUpdate+0xf0>)
  40125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401260:	f003 0303 	and.w	r3, r3, #3
  401264:	2b01      	cmp	r3, #1
  401266:	d01d      	beq.n	4012a4 <SystemCoreClockUpdate+0x48>
  401268:	b183      	cbz	r3, 40128c <SystemCoreClockUpdate+0x30>
  40126a:	2b02      	cmp	r3, #2
  40126c:	d036      	beq.n	4012dc <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40126e:	4b37      	ldr	r3, [pc, #220]	; (40134c <SystemCoreClockUpdate+0xf0>)
  401270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401272:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401276:	2b70      	cmp	r3, #112	; 0x70
  401278:	d05f      	beq.n	40133a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40127a:	4b34      	ldr	r3, [pc, #208]	; (40134c <SystemCoreClockUpdate+0xf0>)
  40127c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40127e:	4934      	ldr	r1, [pc, #208]	; (401350 <SystemCoreClockUpdate+0xf4>)
  401280:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401284:	680b      	ldr	r3, [r1, #0]
  401286:	40d3      	lsrs	r3, r2
  401288:	600b      	str	r3, [r1, #0]
  40128a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40128c:	4b31      	ldr	r3, [pc, #196]	; (401354 <SystemCoreClockUpdate+0xf8>)
  40128e:	695b      	ldr	r3, [r3, #20]
  401290:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401294:	bf14      	ite	ne
  401296:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40129a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40129e:	4b2c      	ldr	r3, [pc, #176]	; (401350 <SystemCoreClockUpdate+0xf4>)
  4012a0:	601a      	str	r2, [r3, #0]
  4012a2:	e7e4      	b.n	40126e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4012a4:	4b29      	ldr	r3, [pc, #164]	; (40134c <SystemCoreClockUpdate+0xf0>)
  4012a6:	6a1b      	ldr	r3, [r3, #32]
  4012a8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4012ac:	d003      	beq.n	4012b6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4012ae:	4a2a      	ldr	r2, [pc, #168]	; (401358 <SystemCoreClockUpdate+0xfc>)
  4012b0:	4b27      	ldr	r3, [pc, #156]	; (401350 <SystemCoreClockUpdate+0xf4>)
  4012b2:	601a      	str	r2, [r3, #0]
  4012b4:	e7db      	b.n	40126e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4012b6:	4a29      	ldr	r2, [pc, #164]	; (40135c <SystemCoreClockUpdate+0x100>)
  4012b8:	4b25      	ldr	r3, [pc, #148]	; (401350 <SystemCoreClockUpdate+0xf4>)
  4012ba:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4012bc:	4b23      	ldr	r3, [pc, #140]	; (40134c <SystemCoreClockUpdate+0xf0>)
  4012be:	6a1b      	ldr	r3, [r3, #32]
  4012c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012c4:	2b10      	cmp	r3, #16
  4012c6:	d005      	beq.n	4012d4 <SystemCoreClockUpdate+0x78>
  4012c8:	2b20      	cmp	r3, #32
  4012ca:	d1d0      	bne.n	40126e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4012cc:	4a22      	ldr	r2, [pc, #136]	; (401358 <SystemCoreClockUpdate+0xfc>)
  4012ce:	4b20      	ldr	r3, [pc, #128]	; (401350 <SystemCoreClockUpdate+0xf4>)
  4012d0:	601a      	str	r2, [r3, #0]
          break;
  4012d2:	e7cc      	b.n	40126e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4012d4:	4a22      	ldr	r2, [pc, #136]	; (401360 <SystemCoreClockUpdate+0x104>)
  4012d6:	4b1e      	ldr	r3, [pc, #120]	; (401350 <SystemCoreClockUpdate+0xf4>)
  4012d8:	601a      	str	r2, [r3, #0]
          break;
  4012da:	e7c8      	b.n	40126e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4012dc:	4b1b      	ldr	r3, [pc, #108]	; (40134c <SystemCoreClockUpdate+0xf0>)
  4012de:	6a1b      	ldr	r3, [r3, #32]
  4012e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4012e4:	d016      	beq.n	401314 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4012e6:	4a1c      	ldr	r2, [pc, #112]	; (401358 <SystemCoreClockUpdate+0xfc>)
  4012e8:	4b19      	ldr	r3, [pc, #100]	; (401350 <SystemCoreClockUpdate+0xf4>)
  4012ea:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4012ec:	4b17      	ldr	r3, [pc, #92]	; (40134c <SystemCoreClockUpdate+0xf0>)
  4012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4012f0:	f003 0303 	and.w	r3, r3, #3
  4012f4:	2b02      	cmp	r3, #2
  4012f6:	d1ba      	bne.n	40126e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4012f8:	4a14      	ldr	r2, [pc, #80]	; (40134c <SystemCoreClockUpdate+0xf0>)
  4012fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4012fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4012fe:	4814      	ldr	r0, [pc, #80]	; (401350 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401300:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401304:	6803      	ldr	r3, [r0, #0]
  401306:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40130a:	b2d2      	uxtb	r2, r2
  40130c:	fbb3 f3f2 	udiv	r3, r3, r2
  401310:	6003      	str	r3, [r0, #0]
  401312:	e7ac      	b.n	40126e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401314:	4a11      	ldr	r2, [pc, #68]	; (40135c <SystemCoreClockUpdate+0x100>)
  401316:	4b0e      	ldr	r3, [pc, #56]	; (401350 <SystemCoreClockUpdate+0xf4>)
  401318:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40131a:	4b0c      	ldr	r3, [pc, #48]	; (40134c <SystemCoreClockUpdate+0xf0>)
  40131c:	6a1b      	ldr	r3, [r3, #32]
  40131e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401322:	2b10      	cmp	r3, #16
  401324:	d005      	beq.n	401332 <SystemCoreClockUpdate+0xd6>
  401326:	2b20      	cmp	r3, #32
  401328:	d1e0      	bne.n	4012ec <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40132a:	4a0b      	ldr	r2, [pc, #44]	; (401358 <SystemCoreClockUpdate+0xfc>)
  40132c:	4b08      	ldr	r3, [pc, #32]	; (401350 <SystemCoreClockUpdate+0xf4>)
  40132e:	601a      	str	r2, [r3, #0]
          break;
  401330:	e7dc      	b.n	4012ec <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401332:	4a0b      	ldr	r2, [pc, #44]	; (401360 <SystemCoreClockUpdate+0x104>)
  401334:	4b06      	ldr	r3, [pc, #24]	; (401350 <SystemCoreClockUpdate+0xf4>)
  401336:	601a      	str	r2, [r3, #0]
          break;
  401338:	e7d8      	b.n	4012ec <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40133a:	4a05      	ldr	r2, [pc, #20]	; (401350 <SystemCoreClockUpdate+0xf4>)
  40133c:	6813      	ldr	r3, [r2, #0]
  40133e:	4909      	ldr	r1, [pc, #36]	; (401364 <SystemCoreClockUpdate+0x108>)
  401340:	fba1 1303 	umull	r1, r3, r1, r3
  401344:	085b      	lsrs	r3, r3, #1
  401346:	6013      	str	r3, [r2, #0]
  401348:	4770      	bx	lr
  40134a:	bf00      	nop
  40134c:	400e0600 	.word	0x400e0600
  401350:	2040000c 	.word	0x2040000c
  401354:	400e1810 	.word	0x400e1810
  401358:	00b71b00 	.word	0x00b71b00
  40135c:	003d0900 	.word	0x003d0900
  401360:	007a1200 	.word	0x007a1200
  401364:	aaaaaaab 	.word	0xaaaaaaab

00401368 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401368:	4b16      	ldr	r3, [pc, #88]	; (4013c4 <system_init_flash+0x5c>)
  40136a:	4298      	cmp	r0, r3
  40136c:	d913      	bls.n	401396 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40136e:	4b16      	ldr	r3, [pc, #88]	; (4013c8 <system_init_flash+0x60>)
  401370:	4298      	cmp	r0, r3
  401372:	d915      	bls.n	4013a0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401374:	4b15      	ldr	r3, [pc, #84]	; (4013cc <system_init_flash+0x64>)
  401376:	4298      	cmp	r0, r3
  401378:	d916      	bls.n	4013a8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40137a:	4b15      	ldr	r3, [pc, #84]	; (4013d0 <system_init_flash+0x68>)
  40137c:	4298      	cmp	r0, r3
  40137e:	d917      	bls.n	4013b0 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401380:	4b14      	ldr	r3, [pc, #80]	; (4013d4 <system_init_flash+0x6c>)
  401382:	4298      	cmp	r0, r3
  401384:	d918      	bls.n	4013b8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401386:	4b14      	ldr	r3, [pc, #80]	; (4013d8 <system_init_flash+0x70>)
  401388:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40138a:	bf94      	ite	ls
  40138c:	4a13      	ldrls	r2, [pc, #76]	; (4013dc <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40138e:	4a14      	ldrhi	r2, [pc, #80]	; (4013e0 <system_init_flash+0x78>)
  401390:	4b14      	ldr	r3, [pc, #80]	; (4013e4 <system_init_flash+0x7c>)
  401392:	601a      	str	r2, [r3, #0]
  401394:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401396:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40139a:	4b12      	ldr	r3, [pc, #72]	; (4013e4 <system_init_flash+0x7c>)
  40139c:	601a      	str	r2, [r3, #0]
  40139e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4013a0:	4a11      	ldr	r2, [pc, #68]	; (4013e8 <system_init_flash+0x80>)
  4013a2:	4b10      	ldr	r3, [pc, #64]	; (4013e4 <system_init_flash+0x7c>)
  4013a4:	601a      	str	r2, [r3, #0]
  4013a6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4013a8:	4a10      	ldr	r2, [pc, #64]	; (4013ec <system_init_flash+0x84>)
  4013aa:	4b0e      	ldr	r3, [pc, #56]	; (4013e4 <system_init_flash+0x7c>)
  4013ac:	601a      	str	r2, [r3, #0]
  4013ae:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4013b0:	4a0f      	ldr	r2, [pc, #60]	; (4013f0 <system_init_flash+0x88>)
  4013b2:	4b0c      	ldr	r3, [pc, #48]	; (4013e4 <system_init_flash+0x7c>)
  4013b4:	601a      	str	r2, [r3, #0]
  4013b6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4013b8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4013bc:	4b09      	ldr	r3, [pc, #36]	; (4013e4 <system_init_flash+0x7c>)
  4013be:	601a      	str	r2, [r3, #0]
  4013c0:	4770      	bx	lr
  4013c2:	bf00      	nop
  4013c4:	015ef3bf 	.word	0x015ef3bf
  4013c8:	02bde77f 	.word	0x02bde77f
  4013cc:	041cdb3f 	.word	0x041cdb3f
  4013d0:	057bceff 	.word	0x057bceff
  4013d4:	06dac2bf 	.word	0x06dac2bf
  4013d8:	0839b67f 	.word	0x0839b67f
  4013dc:	04000500 	.word	0x04000500
  4013e0:	04000600 	.word	0x04000600
  4013e4:	400e0c00 	.word	0x400e0c00
  4013e8:	04000100 	.word	0x04000100
  4013ec:	04000200 	.word	0x04000200
  4013f0:	04000300 	.word	0x04000300

004013f4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4013f4:	4b0a      	ldr	r3, [pc, #40]	; (401420 <_sbrk+0x2c>)
  4013f6:	681b      	ldr	r3, [r3, #0]
  4013f8:	b153      	cbz	r3, 401410 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4013fa:	4b09      	ldr	r3, [pc, #36]	; (401420 <_sbrk+0x2c>)
  4013fc:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4013fe:	181a      	adds	r2, r3, r0
  401400:	4908      	ldr	r1, [pc, #32]	; (401424 <_sbrk+0x30>)
  401402:	4291      	cmp	r1, r2
  401404:	db08      	blt.n	401418 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401406:	4610      	mov	r0, r2
  401408:	4a05      	ldr	r2, [pc, #20]	; (401420 <_sbrk+0x2c>)
  40140a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40140c:	4618      	mov	r0, r3
  40140e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401410:	4a05      	ldr	r2, [pc, #20]	; (401428 <_sbrk+0x34>)
  401412:	4b03      	ldr	r3, [pc, #12]	; (401420 <_sbrk+0x2c>)
  401414:	601a      	str	r2, [r3, #0]
  401416:	e7f0      	b.n	4013fa <_sbrk+0x6>
		return (caddr_t) -1;	
  401418:	f04f 30ff 	mov.w	r0, #4294967295
}
  40141c:	4770      	bx	lr
  40141e:	bf00      	nop
  401420:	20400c5c 	.word	0x20400c5c
  401424:	2045fffc 	.word	0x2045fffc
  401428:	20403050 	.word	0x20403050

0040142c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40142c:	f04f 30ff 	mov.w	r0, #4294967295
  401430:	4770      	bx	lr

00401432 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401436:	604b      	str	r3, [r1, #4]

	return 0;
}
  401438:	2000      	movs	r0, #0
  40143a:	4770      	bx	lr

0040143c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40143c:	2001      	movs	r0, #1
  40143e:	4770      	bx	lr

00401440 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401440:	2000      	movs	r0, #0
  401442:	4770      	bx	lr

00401444 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401444:	f100 0308 	add.w	r3, r0, #8
  401448:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40144a:	f04f 32ff 	mov.w	r2, #4294967295
  40144e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401450:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401452:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401454:	2300      	movs	r3, #0
  401456:	6003      	str	r3, [r0, #0]
  401458:	4770      	bx	lr

0040145a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40145a:	2300      	movs	r3, #0
  40145c:	6103      	str	r3, [r0, #16]
  40145e:	4770      	bx	lr

00401460 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401460:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401462:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401464:	689a      	ldr	r2, [r3, #8]
  401466:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401468:	689a      	ldr	r2, [r3, #8]
  40146a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40146c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40146e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401470:	6803      	ldr	r3, [r0, #0]
  401472:	3301      	adds	r3, #1
  401474:	6003      	str	r3, [r0, #0]
  401476:	4770      	bx	lr

00401478 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401478:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40147a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40147c:	f1b5 3fff 	cmp.w	r5, #4294967295
  401480:	d002      	beq.n	401488 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401482:	f100 0208 	add.w	r2, r0, #8
  401486:	e002      	b.n	40148e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401488:	6902      	ldr	r2, [r0, #16]
  40148a:	e004      	b.n	401496 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40148c:	461a      	mov	r2, r3
  40148e:	6853      	ldr	r3, [r2, #4]
  401490:	681c      	ldr	r4, [r3, #0]
  401492:	42a5      	cmp	r5, r4
  401494:	d2fa      	bcs.n	40148c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401496:	6853      	ldr	r3, [r2, #4]
  401498:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40149a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40149c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40149e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4014a0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4014a2:	6803      	ldr	r3, [r0, #0]
  4014a4:	3301      	adds	r3, #1
  4014a6:	6003      	str	r3, [r0, #0]
}
  4014a8:	bc30      	pop	{r4, r5}
  4014aa:	4770      	bx	lr

004014ac <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4014ac:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4014ae:	6842      	ldr	r2, [r0, #4]
  4014b0:	6881      	ldr	r1, [r0, #8]
  4014b2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4014b4:	6882      	ldr	r2, [r0, #8]
  4014b6:	6841      	ldr	r1, [r0, #4]
  4014b8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4014ba:	685a      	ldr	r2, [r3, #4]
  4014bc:	4290      	cmp	r0, r2
  4014be:	d005      	beq.n	4014cc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4014c0:	2200      	movs	r2, #0
  4014c2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4014c4:	6818      	ldr	r0, [r3, #0]
  4014c6:	3801      	subs	r0, #1
  4014c8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4014ca:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4014cc:	6882      	ldr	r2, [r0, #8]
  4014ce:	605a      	str	r2, [r3, #4]
  4014d0:	e7f6      	b.n	4014c0 <uxListRemove+0x14>
	...

004014d4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4014d4:	4b0d      	ldr	r3, [pc, #52]	; (40150c <prvTaskExitError+0x38>)
  4014d6:	681b      	ldr	r3, [r3, #0]
  4014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4014dc:	d00a      	beq.n	4014f4 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4014de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014e2:	b672      	cpsid	i
  4014e4:	f383 8811 	msr	BASEPRI, r3
  4014e8:	f3bf 8f6f 	isb	sy
  4014ec:	f3bf 8f4f 	dsb	sy
  4014f0:	b662      	cpsie	i
  4014f2:	e7fe      	b.n	4014f2 <prvTaskExitError+0x1e>
  4014f4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014f8:	b672      	cpsid	i
  4014fa:	f383 8811 	msr	BASEPRI, r3
  4014fe:	f3bf 8f6f 	isb	sy
  401502:	f3bf 8f4f 	dsb	sy
  401506:	b662      	cpsie	i
  401508:	e7fe      	b.n	401508 <prvTaskExitError+0x34>
  40150a:	bf00      	nop
  40150c:	20400010 	.word	0x20400010

00401510 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401510:	4806      	ldr	r0, [pc, #24]	; (40152c <prvPortStartFirstTask+0x1c>)
  401512:	6800      	ldr	r0, [r0, #0]
  401514:	6800      	ldr	r0, [r0, #0]
  401516:	f380 8808 	msr	MSP, r0
  40151a:	b662      	cpsie	i
  40151c:	b661      	cpsie	f
  40151e:	f3bf 8f4f 	dsb	sy
  401522:	f3bf 8f6f 	isb	sy
  401526:	df00      	svc	0
  401528:	bf00      	nop
  40152a:	0000      	.short	0x0000
  40152c:	e000ed08 	.word	0xe000ed08

00401530 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401530:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401540 <vPortEnableVFP+0x10>
  401534:	6801      	ldr	r1, [r0, #0]
  401536:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40153a:	6001      	str	r1, [r0, #0]
  40153c:	4770      	bx	lr
  40153e:	0000      	.short	0x0000
  401540:	e000ed88 	.word	0xe000ed88

00401544 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401548:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  40154c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401550:	4b05      	ldr	r3, [pc, #20]	; (401568 <pxPortInitialiseStack+0x24>)
  401552:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401556:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  40155a:	f06f 0302 	mvn.w	r3, #2
  40155e:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401562:	3844      	subs	r0, #68	; 0x44
  401564:	4770      	bx	lr
  401566:	bf00      	nop
  401568:	004014d5 	.word	0x004014d5

0040156c <SVC_Handler>:
	__asm volatile (
  40156c:	4b06      	ldr	r3, [pc, #24]	; (401588 <pxCurrentTCBConst2>)
  40156e:	6819      	ldr	r1, [r3, #0]
  401570:	6808      	ldr	r0, [r1, #0]
  401572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401576:	f380 8809 	msr	PSP, r0
  40157a:	f3bf 8f6f 	isb	sy
  40157e:	f04f 0000 	mov.w	r0, #0
  401582:	f380 8811 	msr	BASEPRI, r0
  401586:	4770      	bx	lr

00401588 <pxCurrentTCBConst2>:
  401588:	20400c68 	.word	0x20400c68
  40158c:	4770      	bx	lr
  40158e:	bf00      	nop

00401590 <vPortEnterCritical>:
  401590:	f04f 0380 	mov.w	r3, #128	; 0x80
  401594:	b672      	cpsid	i
  401596:	f383 8811 	msr	BASEPRI, r3
  40159a:	f3bf 8f6f 	isb	sy
  40159e:	f3bf 8f4f 	dsb	sy
  4015a2:	b662      	cpsie	i
	uxCriticalNesting++;
  4015a4:	4a0b      	ldr	r2, [pc, #44]	; (4015d4 <vPortEnterCritical+0x44>)
  4015a6:	6813      	ldr	r3, [r2, #0]
  4015a8:	3301      	adds	r3, #1
  4015aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4015ac:	2b01      	cmp	r3, #1
  4015ae:	d10f      	bne.n	4015d0 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4015b0:	4b09      	ldr	r3, [pc, #36]	; (4015d8 <vPortEnterCritical+0x48>)
  4015b2:	681b      	ldr	r3, [r3, #0]
  4015b4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4015b8:	d00a      	beq.n	4015d0 <vPortEnterCritical+0x40>
  4015ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015be:	b672      	cpsid	i
  4015c0:	f383 8811 	msr	BASEPRI, r3
  4015c4:	f3bf 8f6f 	isb	sy
  4015c8:	f3bf 8f4f 	dsb	sy
  4015cc:	b662      	cpsie	i
  4015ce:	e7fe      	b.n	4015ce <vPortEnterCritical+0x3e>
  4015d0:	4770      	bx	lr
  4015d2:	bf00      	nop
  4015d4:	20400010 	.word	0x20400010
  4015d8:	e000ed04 	.word	0xe000ed04

004015dc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4015dc:	4b0a      	ldr	r3, [pc, #40]	; (401608 <vPortExitCritical+0x2c>)
  4015de:	681b      	ldr	r3, [r3, #0]
  4015e0:	b953      	cbnz	r3, 4015f8 <vPortExitCritical+0x1c>
  4015e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015e6:	b672      	cpsid	i
  4015e8:	f383 8811 	msr	BASEPRI, r3
  4015ec:	f3bf 8f6f 	isb	sy
  4015f0:	f3bf 8f4f 	dsb	sy
  4015f4:	b662      	cpsie	i
  4015f6:	e7fe      	b.n	4015f6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4015f8:	3b01      	subs	r3, #1
  4015fa:	4a03      	ldr	r2, [pc, #12]	; (401608 <vPortExitCritical+0x2c>)
  4015fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4015fe:	b90b      	cbnz	r3, 401604 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401600:	f383 8811 	msr	BASEPRI, r3
  401604:	4770      	bx	lr
  401606:	bf00      	nop
  401608:	20400010 	.word	0x20400010

0040160c <PendSV_Handler>:
	__asm volatile
  40160c:	f3ef 8009 	mrs	r0, PSP
  401610:	f3bf 8f6f 	isb	sy
  401614:	4b15      	ldr	r3, [pc, #84]	; (40166c <pxCurrentTCBConst>)
  401616:	681a      	ldr	r2, [r3, #0]
  401618:	f01e 0f10 	tst.w	lr, #16
  40161c:	bf08      	it	eq
  40161e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401622:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401626:	6010      	str	r0, [r2, #0]
  401628:	f84d 3d04 	str.w	r3, [sp, #-4]!
  40162c:	f04f 0080 	mov.w	r0, #128	; 0x80
  401630:	b672      	cpsid	i
  401632:	f380 8811 	msr	BASEPRI, r0
  401636:	f3bf 8f4f 	dsb	sy
  40163a:	f3bf 8f6f 	isb	sy
  40163e:	b662      	cpsie	i
  401640:	f001 f8fe 	bl	402840 <vTaskSwitchContext>
  401644:	f04f 0000 	mov.w	r0, #0
  401648:	f380 8811 	msr	BASEPRI, r0
  40164c:	bc08      	pop	{r3}
  40164e:	6819      	ldr	r1, [r3, #0]
  401650:	6808      	ldr	r0, [r1, #0]
  401652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401656:	f01e 0f10 	tst.w	lr, #16
  40165a:	bf08      	it	eq
  40165c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401660:	f380 8809 	msr	PSP, r0
  401664:	f3bf 8f6f 	isb	sy
  401668:	4770      	bx	lr
  40166a:	bf00      	nop

0040166c <pxCurrentTCBConst>:
  40166c:	20400c68 	.word	0x20400c68
  401670:	4770      	bx	lr
  401672:	bf00      	nop

00401674 <SysTick_Handler>:
{
  401674:	b508      	push	{r3, lr}
	__asm volatile
  401676:	f3ef 8311 	mrs	r3, BASEPRI
  40167a:	f04f 0280 	mov.w	r2, #128	; 0x80
  40167e:	b672      	cpsid	i
  401680:	f382 8811 	msr	BASEPRI, r2
  401684:	f3bf 8f6f 	isb	sy
  401688:	f3bf 8f4f 	dsb	sy
  40168c:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40168e:	4b05      	ldr	r3, [pc, #20]	; (4016a4 <SysTick_Handler+0x30>)
  401690:	4798      	blx	r3
  401692:	b118      	cbz	r0, 40169c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401698:	4b03      	ldr	r3, [pc, #12]	; (4016a8 <SysTick_Handler+0x34>)
  40169a:	601a      	str	r2, [r3, #0]
	__asm volatile
  40169c:	2300      	movs	r3, #0
  40169e:	f383 8811 	msr	BASEPRI, r3
  4016a2:	bd08      	pop	{r3, pc}
  4016a4:	004024ad 	.word	0x004024ad
  4016a8:	e000ed04 	.word	0xe000ed04

004016ac <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4016ac:	4a03      	ldr	r2, [pc, #12]	; (4016bc <vPortSetupTimerInterrupt+0x10>)
  4016ae:	4b04      	ldr	r3, [pc, #16]	; (4016c0 <vPortSetupTimerInterrupt+0x14>)
  4016b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4016b2:	2207      	movs	r2, #7
  4016b4:	3b04      	subs	r3, #4
  4016b6:	601a      	str	r2, [r3, #0]
  4016b8:	4770      	bx	lr
  4016ba:	bf00      	nop
  4016bc:	000927bf 	.word	0x000927bf
  4016c0:	e000e014 	.word	0xe000e014

004016c4 <xPortStartScheduler>:
{
  4016c4:	b500      	push	{lr}
  4016c6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4016c8:	4b25      	ldr	r3, [pc, #148]	; (401760 <xPortStartScheduler+0x9c>)
  4016ca:	781a      	ldrb	r2, [r3, #0]
  4016cc:	b2d2      	uxtb	r2, r2
  4016ce:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4016d0:	22ff      	movs	r2, #255	; 0xff
  4016d2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4016d4:	781b      	ldrb	r3, [r3, #0]
  4016d6:	b2db      	uxtb	r3, r3
  4016d8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4016dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4016e4:	4a1f      	ldr	r2, [pc, #124]	; (401764 <xPortStartScheduler+0xa0>)
  4016e6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4016e8:	2207      	movs	r2, #7
  4016ea:	4b1f      	ldr	r3, [pc, #124]	; (401768 <xPortStartScheduler+0xa4>)
  4016ec:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4016ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016f2:	f013 0f80 	tst.w	r3, #128	; 0x80
  4016f6:	d010      	beq.n	40171a <xPortStartScheduler+0x56>
  4016f8:	2206      	movs	r2, #6
  4016fa:	e000      	b.n	4016fe <xPortStartScheduler+0x3a>
  4016fc:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4016fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401702:	005b      	lsls	r3, r3, #1
  401704:	b2db      	uxtb	r3, r3
  401706:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40170a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40170e:	1e51      	subs	r1, r2, #1
  401710:	f013 0f80 	tst.w	r3, #128	; 0x80
  401714:	d1f2      	bne.n	4016fc <xPortStartScheduler+0x38>
  401716:	4b14      	ldr	r3, [pc, #80]	; (401768 <xPortStartScheduler+0xa4>)
  401718:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40171a:	4a13      	ldr	r2, [pc, #76]	; (401768 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  40171c:	6813      	ldr	r3, [r2, #0]
  40171e:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401720:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401724:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401726:	9b01      	ldr	r3, [sp, #4]
  401728:	b2db      	uxtb	r3, r3
  40172a:	4a0d      	ldr	r2, [pc, #52]	; (401760 <xPortStartScheduler+0x9c>)
  40172c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40172e:	4b0f      	ldr	r3, [pc, #60]	; (40176c <xPortStartScheduler+0xa8>)
  401730:	681a      	ldr	r2, [r3, #0]
  401732:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401736:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401738:	681a      	ldr	r2, [r3, #0]
  40173a:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40173e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401740:	4b0b      	ldr	r3, [pc, #44]	; (401770 <xPortStartScheduler+0xac>)
  401742:	4798      	blx	r3
	uxCriticalNesting = 0;
  401744:	2200      	movs	r2, #0
  401746:	4b0b      	ldr	r3, [pc, #44]	; (401774 <xPortStartScheduler+0xb0>)
  401748:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  40174a:	4b0b      	ldr	r3, [pc, #44]	; (401778 <xPortStartScheduler+0xb4>)
  40174c:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40174e:	4a0b      	ldr	r2, [pc, #44]	; (40177c <xPortStartScheduler+0xb8>)
  401750:	6813      	ldr	r3, [r2, #0]
  401752:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401756:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401758:	4b09      	ldr	r3, [pc, #36]	; (401780 <xPortStartScheduler+0xbc>)
  40175a:	4798      	blx	r3
	prvTaskExitError();
  40175c:	4b09      	ldr	r3, [pc, #36]	; (401784 <xPortStartScheduler+0xc0>)
  40175e:	4798      	blx	r3
  401760:	e000e400 	.word	0xe000e400
  401764:	20400c60 	.word	0x20400c60
  401768:	20400c64 	.word	0x20400c64
  40176c:	e000ed20 	.word	0xe000ed20
  401770:	004016ad 	.word	0x004016ad
  401774:	20400010 	.word	0x20400010
  401778:	00401531 	.word	0x00401531
  40177c:	e000ef34 	.word	0xe000ef34
  401780:	00401511 	.word	0x00401511
  401784:	004014d5 	.word	0x004014d5

00401788 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401788:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  40178c:	2b0f      	cmp	r3, #15
  40178e:	d911      	bls.n	4017b4 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401790:	4a12      	ldr	r2, [pc, #72]	; (4017dc <vPortValidateInterruptPriority+0x54>)
  401792:	5c9b      	ldrb	r3, [r3, r2]
  401794:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401796:	4a12      	ldr	r2, [pc, #72]	; (4017e0 <vPortValidateInterruptPriority+0x58>)
  401798:	7812      	ldrb	r2, [r2, #0]
  40179a:	429a      	cmp	r2, r3
  40179c:	d90a      	bls.n	4017b4 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  40179e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017a2:	b672      	cpsid	i
  4017a4:	f383 8811 	msr	BASEPRI, r3
  4017a8:	f3bf 8f6f 	isb	sy
  4017ac:	f3bf 8f4f 	dsb	sy
  4017b0:	b662      	cpsie	i
  4017b2:	e7fe      	b.n	4017b2 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4017b4:	4b0b      	ldr	r3, [pc, #44]	; (4017e4 <vPortValidateInterruptPriority+0x5c>)
  4017b6:	681b      	ldr	r3, [r3, #0]
  4017b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4017bc:	4a0a      	ldr	r2, [pc, #40]	; (4017e8 <vPortValidateInterruptPriority+0x60>)
  4017be:	6812      	ldr	r2, [r2, #0]
  4017c0:	4293      	cmp	r3, r2
  4017c2:	d90a      	bls.n	4017da <vPortValidateInterruptPriority+0x52>
  4017c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017c8:	b672      	cpsid	i
  4017ca:	f383 8811 	msr	BASEPRI, r3
  4017ce:	f3bf 8f6f 	isb	sy
  4017d2:	f3bf 8f4f 	dsb	sy
  4017d6:	b662      	cpsie	i
  4017d8:	e7fe      	b.n	4017d8 <vPortValidateInterruptPriority+0x50>
  4017da:	4770      	bx	lr
  4017dc:	e000e3f0 	.word	0xe000e3f0
  4017e0:	20400c60 	.word	0x20400c60
  4017e4:	e000ed0c 	.word	0xe000ed0c
  4017e8:	20400c64 	.word	0x20400c64

004017ec <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4017ec:	b510      	push	{r4, lr}
  4017ee:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  4017f0:	4b06      	ldr	r3, [pc, #24]	; (40180c <pvPortMalloc+0x20>)
  4017f2:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  4017f4:	4620      	mov	r0, r4
  4017f6:	4b06      	ldr	r3, [pc, #24]	; (401810 <pvPortMalloc+0x24>)
  4017f8:	4798      	blx	r3
  4017fa:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4017fc:	4b05      	ldr	r3, [pc, #20]	; (401814 <pvPortMalloc+0x28>)
  4017fe:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401800:	b10c      	cbz	r4, 401806 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401802:	4620      	mov	r0, r4
  401804:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401806:	4b04      	ldr	r3, [pc, #16]	; (401818 <pvPortMalloc+0x2c>)
  401808:	4798      	blx	r3
	return pvReturn;
  40180a:	e7fa      	b.n	401802 <pvPortMalloc+0x16>
  40180c:	00402491 	.word	0x00402491
  401810:	00403fb5 	.word	0x00403fb5
  401814:	004025f9 	.word	0x004025f9
  401818:	004033ab 	.word	0x004033ab

0040181c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  40181c:	b148      	cbz	r0, 401832 <vPortFree+0x16>
{
  40181e:	b510      	push	{r4, lr}
  401820:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401822:	4b04      	ldr	r3, [pc, #16]	; (401834 <vPortFree+0x18>)
  401824:	4798      	blx	r3
		{
			free( pv );
  401826:	4620      	mov	r0, r4
  401828:	4b03      	ldr	r3, [pc, #12]	; (401838 <vPortFree+0x1c>)
  40182a:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  40182c:	4b03      	ldr	r3, [pc, #12]	; (40183c <vPortFree+0x20>)
  40182e:	4798      	blx	r3
  401830:	bd10      	pop	{r4, pc}
  401832:	4770      	bx	lr
  401834:	00402491 	.word	0x00402491
  401838:	00403fc5 	.word	0x00403fc5
  40183c:	004025f9 	.word	0x004025f9

00401840 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  401840:	b538      	push	{r3, r4, r5, lr}
  401842:	4604      	mov	r4, r0
  401844:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401846:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401848:	b95a      	cbnz	r2, 401862 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40184a:	6803      	ldr	r3, [r0, #0]
  40184c:	2b00      	cmp	r3, #0
  40184e:	d12e      	bne.n	4018ae <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401850:	6840      	ldr	r0, [r0, #4]
  401852:	4b1b      	ldr	r3, [pc, #108]	; (4018c0 <prvCopyDataToQueue+0x80>)
  401854:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401856:	2300      	movs	r3, #0
  401858:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40185a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40185c:	3301      	adds	r3, #1
  40185e:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  401860:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401862:	b96d      	cbnz	r5, 401880 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401864:	6880      	ldr	r0, [r0, #8]
  401866:	4b17      	ldr	r3, [pc, #92]	; (4018c4 <prvCopyDataToQueue+0x84>)
  401868:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40186a:	68a3      	ldr	r3, [r4, #8]
  40186c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40186e:	4413      	add	r3, r2
  401870:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401872:	6862      	ldr	r2, [r4, #4]
  401874:	4293      	cmp	r3, r2
  401876:	d31c      	bcc.n	4018b2 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401878:	6823      	ldr	r3, [r4, #0]
  40187a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  40187c:	2000      	movs	r0, #0
  40187e:	e7ec      	b.n	40185a <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401880:	68c0      	ldr	r0, [r0, #12]
  401882:	4b10      	ldr	r3, [pc, #64]	; (4018c4 <prvCopyDataToQueue+0x84>)
  401884:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401886:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401888:	425b      	negs	r3, r3
  40188a:	68e2      	ldr	r2, [r4, #12]
  40188c:	441a      	add	r2, r3
  40188e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401890:	6821      	ldr	r1, [r4, #0]
  401892:	428a      	cmp	r2, r1
  401894:	d202      	bcs.n	40189c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401896:	6862      	ldr	r2, [r4, #4]
  401898:	4413      	add	r3, r2
  40189a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  40189c:	2d02      	cmp	r5, #2
  40189e:	d10a      	bne.n	4018b6 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4018a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018a2:	b153      	cbz	r3, 4018ba <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4018a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018a6:	3b01      	subs	r3, #1
  4018a8:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  4018aa:	2000      	movs	r0, #0
  4018ac:	e7d5      	b.n	40185a <prvCopyDataToQueue+0x1a>
  4018ae:	2000      	movs	r0, #0
  4018b0:	e7d3      	b.n	40185a <prvCopyDataToQueue+0x1a>
  4018b2:	2000      	movs	r0, #0
  4018b4:	e7d1      	b.n	40185a <prvCopyDataToQueue+0x1a>
  4018b6:	2000      	movs	r0, #0
  4018b8:	e7cf      	b.n	40185a <prvCopyDataToQueue+0x1a>
  4018ba:	2000      	movs	r0, #0
  4018bc:	e7cd      	b.n	40185a <prvCopyDataToQueue+0x1a>
  4018be:	bf00      	nop
  4018c0:	00402c41 	.word	0x00402c41
  4018c4:	00404535 	.word	0x00404535

004018c8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4018c8:	b530      	push	{r4, r5, lr}
  4018ca:	b083      	sub	sp, #12
  4018cc:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4018ce:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4018d0:	b174      	cbz	r4, 4018f0 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4018d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4018d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4018d6:	429a      	cmp	r2, r3
  4018d8:	d315      	bcc.n	401906 <prvNotifyQueueSetContainer+0x3e>
  4018da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018de:	b672      	cpsid	i
  4018e0:	f383 8811 	msr	BASEPRI, r3
  4018e4:	f3bf 8f6f 	isb	sy
  4018e8:	f3bf 8f4f 	dsb	sy
  4018ec:	b662      	cpsie	i
  4018ee:	e7fe      	b.n	4018ee <prvNotifyQueueSetContainer+0x26>
  4018f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018f4:	b672      	cpsid	i
  4018f6:	f383 8811 	msr	BASEPRI, r3
  4018fa:	f3bf 8f6f 	isb	sy
  4018fe:	f3bf 8f4f 	dsb	sy
  401902:	b662      	cpsie	i
  401904:	e7fe      	b.n	401904 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401906:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401908:	4293      	cmp	r3, r2
  40190a:	d803      	bhi.n	401914 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  40190c:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40190e:	4628      	mov	r0, r5
  401910:	b003      	add	sp, #12
  401912:	bd30      	pop	{r4, r5, pc}
  401914:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401916:	a901      	add	r1, sp, #4
  401918:	4620      	mov	r0, r4
  40191a:	4b0b      	ldr	r3, [pc, #44]	; (401948 <prvNotifyQueueSetContainer+0x80>)
  40191c:	4798      	blx	r3
  40191e:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401920:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401922:	f1b3 3fff 	cmp.w	r3, #4294967295
  401926:	d10a      	bne.n	40193e <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401928:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40192a:	2b00      	cmp	r3, #0
  40192c:	d0ef      	beq.n	40190e <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40192e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401932:	4b06      	ldr	r3, [pc, #24]	; (40194c <prvNotifyQueueSetContainer+0x84>)
  401934:	4798      	blx	r3
  401936:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401938:	bf18      	it	ne
  40193a:	2501      	movne	r5, #1
  40193c:	e7e7      	b.n	40190e <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  40193e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401940:	3301      	adds	r3, #1
  401942:	64a3      	str	r3, [r4, #72]	; 0x48
  401944:	e7e3      	b.n	40190e <prvNotifyQueueSetContainer+0x46>
  401946:	bf00      	nop
  401948:	00401841 	.word	0x00401841
  40194c:	00402a15 	.word	0x00402a15

00401950 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401950:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401952:	b172      	cbz	r2, 401972 <prvCopyDataFromQueue+0x22>
{
  401954:	b510      	push	{r4, lr}
  401956:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401958:	68c4      	ldr	r4, [r0, #12]
  40195a:	4414      	add	r4, r2
  40195c:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40195e:	6840      	ldr	r0, [r0, #4]
  401960:	4284      	cmp	r4, r0
  401962:	d301      	bcc.n	401968 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401964:	6818      	ldr	r0, [r3, #0]
  401966:	60d8      	str	r0, [r3, #12]
  401968:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40196a:	68d9      	ldr	r1, [r3, #12]
  40196c:	4b01      	ldr	r3, [pc, #4]	; (401974 <prvCopyDataFromQueue+0x24>)
  40196e:	4798      	blx	r3
  401970:	bd10      	pop	{r4, pc}
  401972:	4770      	bx	lr
  401974:	00404535 	.word	0x00404535

00401978 <prvUnlockQueue>:
{
  401978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40197a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40197c:	4b22      	ldr	r3, [pc, #136]	; (401a08 <prvUnlockQueue+0x90>)
  40197e:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401980:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401982:	2b00      	cmp	r3, #0
  401984:	dd1b      	ble.n	4019be <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401986:	4d21      	ldr	r5, [pc, #132]	; (401a0c <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401988:	4f21      	ldr	r7, [pc, #132]	; (401a10 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40198a:	4e22      	ldr	r6, [pc, #136]	; (401a14 <prvUnlockQueue+0x9c>)
  40198c:	e00b      	b.n	4019a6 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40198e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401990:	b1ab      	cbz	r3, 4019be <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401992:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401996:	47b0      	blx	r6
  401998:	b978      	cbnz	r0, 4019ba <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  40199a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40199c:	3b01      	subs	r3, #1
  40199e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4019a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019a2:	2b00      	cmp	r3, #0
  4019a4:	dd0b      	ble.n	4019be <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  4019a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4019a8:	2b00      	cmp	r3, #0
  4019aa:	d0f0      	beq.n	40198e <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4019ac:	2100      	movs	r1, #0
  4019ae:	4620      	mov	r0, r4
  4019b0:	47a8      	blx	r5
  4019b2:	2801      	cmp	r0, #1
  4019b4:	d1f1      	bne.n	40199a <prvUnlockQueue+0x22>
						vTaskMissedYield();
  4019b6:	47b8      	blx	r7
  4019b8:	e7ef      	b.n	40199a <prvUnlockQueue+0x22>
							vTaskMissedYield();
  4019ba:	47b8      	blx	r7
  4019bc:	e7ed      	b.n	40199a <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  4019be:	f04f 33ff 	mov.w	r3, #4294967295
  4019c2:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4019c4:	4b14      	ldr	r3, [pc, #80]	; (401a18 <prvUnlockQueue+0xa0>)
  4019c6:	4798      	blx	r3
	taskENTER_CRITICAL();
  4019c8:	4b0f      	ldr	r3, [pc, #60]	; (401a08 <prvUnlockQueue+0x90>)
  4019ca:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4019cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019ce:	2b00      	cmp	r3, #0
  4019d0:	dd14      	ble.n	4019fc <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4019d2:	6923      	ldr	r3, [r4, #16]
  4019d4:	b193      	cbz	r3, 4019fc <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4019d6:	f104 0610 	add.w	r6, r4, #16
  4019da:	4d0e      	ldr	r5, [pc, #56]	; (401a14 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4019dc:	4f0c      	ldr	r7, [pc, #48]	; (401a10 <prvUnlockQueue+0x98>)
  4019de:	e007      	b.n	4019f0 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  4019e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019e2:	3b01      	subs	r3, #1
  4019e4:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4019e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019e8:	2b00      	cmp	r3, #0
  4019ea:	dd07      	ble.n	4019fc <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4019ec:	6923      	ldr	r3, [r4, #16]
  4019ee:	b12b      	cbz	r3, 4019fc <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4019f0:	4630      	mov	r0, r6
  4019f2:	47a8      	blx	r5
  4019f4:	2800      	cmp	r0, #0
  4019f6:	d0f3      	beq.n	4019e0 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  4019f8:	47b8      	blx	r7
  4019fa:	e7f1      	b.n	4019e0 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4019fc:	f04f 33ff 	mov.w	r3, #4294967295
  401a00:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401a02:	4b05      	ldr	r3, [pc, #20]	; (401a18 <prvUnlockQueue+0xa0>)
  401a04:	4798      	blx	r3
  401a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a08:	00401591 	.word	0x00401591
  401a0c:	004018c9 	.word	0x004018c9
  401a10:	00402b71 	.word	0x00402b71
  401a14:	00402a15 	.word	0x00402a15
  401a18:	004015dd 	.word	0x004015dd

00401a1c <xQueueGenericReset>:
{
  401a1c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401a1e:	b308      	cbz	r0, 401a64 <xQueueGenericReset+0x48>
  401a20:	4604      	mov	r4, r0
  401a22:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401a24:	4b1d      	ldr	r3, [pc, #116]	; (401a9c <xQueueGenericReset+0x80>)
  401a26:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401a28:	6822      	ldr	r2, [r4, #0]
  401a2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401a2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401a2e:	fb03 f301 	mul.w	r3, r3, r1
  401a32:	18d0      	adds	r0, r2, r3
  401a34:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401a36:	2000      	movs	r0, #0
  401a38:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401a3a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401a3c:	1a5b      	subs	r3, r3, r1
  401a3e:	4413      	add	r3, r2
  401a40:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401a42:	f04f 33ff 	mov.w	r3, #4294967295
  401a46:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401a48:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401a4a:	b9fd      	cbnz	r5, 401a8c <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401a4c:	6923      	ldr	r3, [r4, #16]
  401a4e:	b12b      	cbz	r3, 401a5c <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401a50:	f104 0010 	add.w	r0, r4, #16
  401a54:	4b12      	ldr	r3, [pc, #72]	; (401aa0 <xQueueGenericReset+0x84>)
  401a56:	4798      	blx	r3
  401a58:	2801      	cmp	r0, #1
  401a5a:	d00e      	beq.n	401a7a <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401a5c:	4b11      	ldr	r3, [pc, #68]	; (401aa4 <xQueueGenericReset+0x88>)
  401a5e:	4798      	blx	r3
}
  401a60:	2001      	movs	r0, #1
  401a62:	bd38      	pop	{r3, r4, r5, pc}
  401a64:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a68:	b672      	cpsid	i
  401a6a:	f383 8811 	msr	BASEPRI, r3
  401a6e:	f3bf 8f6f 	isb	sy
  401a72:	f3bf 8f4f 	dsb	sy
  401a76:	b662      	cpsie	i
  401a78:	e7fe      	b.n	401a78 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a7e:	4b0a      	ldr	r3, [pc, #40]	; (401aa8 <xQueueGenericReset+0x8c>)
  401a80:	601a      	str	r2, [r3, #0]
  401a82:	f3bf 8f4f 	dsb	sy
  401a86:	f3bf 8f6f 	isb	sy
  401a8a:	e7e7      	b.n	401a5c <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401a8c:	f104 0010 	add.w	r0, r4, #16
  401a90:	4d06      	ldr	r5, [pc, #24]	; (401aac <xQueueGenericReset+0x90>)
  401a92:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401a94:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a98:	47a8      	blx	r5
  401a9a:	e7df      	b.n	401a5c <xQueueGenericReset+0x40>
  401a9c:	00401591 	.word	0x00401591
  401aa0:	00402a15 	.word	0x00402a15
  401aa4:	004015dd 	.word	0x004015dd
  401aa8:	e000ed04 	.word	0xe000ed04
  401aac:	00401445 	.word	0x00401445

00401ab0 <xQueueGenericCreate>:
{
  401ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401ab2:	b950      	cbnz	r0, 401aca <xQueueGenericCreate+0x1a>
  401ab4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ab8:	b672      	cpsid	i
  401aba:	f383 8811 	msr	BASEPRI, r3
  401abe:	f3bf 8f6f 	isb	sy
  401ac2:	f3bf 8f4f 	dsb	sy
  401ac6:	b662      	cpsie	i
  401ac8:	e7fe      	b.n	401ac8 <xQueueGenericCreate+0x18>
  401aca:	4606      	mov	r6, r0
  401acc:	4617      	mov	r7, r2
  401ace:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401ad0:	b189      	cbz	r1, 401af6 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ad2:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401ad6:	3059      	adds	r0, #89	; 0x59
  401ad8:	4b12      	ldr	r3, [pc, #72]	; (401b24 <xQueueGenericCreate+0x74>)
  401ada:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401adc:	4604      	mov	r4, r0
  401ade:	b9e8      	cbnz	r0, 401b1c <xQueueGenericCreate+0x6c>
  401ae0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ae4:	b672      	cpsid	i
  401ae6:	f383 8811 	msr	BASEPRI, r3
  401aea:	f3bf 8f6f 	isb	sy
  401aee:	f3bf 8f4f 	dsb	sy
  401af2:	b662      	cpsie	i
  401af4:	e7fe      	b.n	401af4 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401af6:	2058      	movs	r0, #88	; 0x58
  401af8:	4b0a      	ldr	r3, [pc, #40]	; (401b24 <xQueueGenericCreate+0x74>)
  401afa:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401afc:	4604      	mov	r4, r0
  401afe:	2800      	cmp	r0, #0
  401b00:	d0ee      	beq.n	401ae0 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401b02:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401b04:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401b06:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401b08:	2101      	movs	r1, #1
  401b0a:	4620      	mov	r0, r4
  401b0c:	4b06      	ldr	r3, [pc, #24]	; (401b28 <xQueueGenericCreate+0x78>)
  401b0e:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401b10:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401b14:	2300      	movs	r3, #0
  401b16:	6563      	str	r3, [r4, #84]	; 0x54
}
  401b18:	4620      	mov	r0, r4
  401b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401b1c:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401b20:	6003      	str	r3, [r0, #0]
  401b22:	e7ef      	b.n	401b04 <xQueueGenericCreate+0x54>
  401b24:	004017ed 	.word	0x004017ed
  401b28:	00401a1d 	.word	0x00401a1d

00401b2c <xQueueGenericSend>:
{
  401b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b30:	b085      	sub	sp, #20
  401b32:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401b34:	b1b8      	cbz	r0, 401b66 <xQueueGenericSend+0x3a>
  401b36:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b38:	b301      	cbz	r1, 401b7c <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401b3a:	2b02      	cmp	r3, #2
  401b3c:	d02c      	beq.n	401b98 <xQueueGenericSend+0x6c>
  401b3e:	461d      	mov	r5, r3
  401b40:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401b42:	4b66      	ldr	r3, [pc, #408]	; (401cdc <xQueueGenericSend+0x1b0>)
  401b44:	4798      	blx	r3
  401b46:	2800      	cmp	r0, #0
  401b48:	d134      	bne.n	401bb4 <xQueueGenericSend+0x88>
  401b4a:	9b01      	ldr	r3, [sp, #4]
  401b4c:	2b00      	cmp	r3, #0
  401b4e:	d038      	beq.n	401bc2 <xQueueGenericSend+0x96>
  401b50:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b54:	b672      	cpsid	i
  401b56:	f383 8811 	msr	BASEPRI, r3
  401b5a:	f3bf 8f6f 	isb	sy
  401b5e:	f3bf 8f4f 	dsb	sy
  401b62:	b662      	cpsie	i
  401b64:	e7fe      	b.n	401b64 <xQueueGenericSend+0x38>
  401b66:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b6a:	b672      	cpsid	i
  401b6c:	f383 8811 	msr	BASEPRI, r3
  401b70:	f3bf 8f6f 	isb	sy
  401b74:	f3bf 8f4f 	dsb	sy
  401b78:	b662      	cpsie	i
  401b7a:	e7fe      	b.n	401b7a <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401b7e:	2a00      	cmp	r2, #0
  401b80:	d0db      	beq.n	401b3a <xQueueGenericSend+0xe>
  401b82:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b86:	b672      	cpsid	i
  401b88:	f383 8811 	msr	BASEPRI, r3
  401b8c:	f3bf 8f6f 	isb	sy
  401b90:	f3bf 8f4f 	dsb	sy
  401b94:	b662      	cpsie	i
  401b96:	e7fe      	b.n	401b96 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401b98:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401b9a:	2a01      	cmp	r2, #1
  401b9c:	d0cf      	beq.n	401b3e <xQueueGenericSend+0x12>
  401b9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ba2:	b672      	cpsid	i
  401ba4:	f383 8811 	msr	BASEPRI, r3
  401ba8:	f3bf 8f6f 	isb	sy
  401bac:	f3bf 8f4f 	dsb	sy
  401bb0:	b662      	cpsie	i
  401bb2:	e7fe      	b.n	401bb2 <xQueueGenericSend+0x86>
  401bb4:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401bb6:	4e4a      	ldr	r6, [pc, #296]	; (401ce0 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401bb8:	f8df a150 	ldr.w	sl, [pc, #336]	; 401d0c <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401bbc:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401cec <xQueueGenericSend+0x1c0>
  401bc0:	e042      	b.n	401c48 <xQueueGenericSend+0x11c>
  401bc2:	2700      	movs	r7, #0
  401bc4:	e7f7      	b.n	401bb6 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401bc6:	462a      	mov	r2, r5
  401bc8:	4641      	mov	r1, r8
  401bca:	4620      	mov	r0, r4
  401bcc:	4b45      	ldr	r3, [pc, #276]	; (401ce4 <xQueueGenericSend+0x1b8>)
  401bce:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401bd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401bd2:	b19b      	cbz	r3, 401bfc <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401bd4:	4629      	mov	r1, r5
  401bd6:	4620      	mov	r0, r4
  401bd8:	4b43      	ldr	r3, [pc, #268]	; (401ce8 <xQueueGenericSend+0x1bc>)
  401bda:	4798      	blx	r3
  401bdc:	2801      	cmp	r0, #1
  401bde:	d107      	bne.n	401bf0 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401be4:	4b41      	ldr	r3, [pc, #260]	; (401cec <xQueueGenericSend+0x1c0>)
  401be6:	601a      	str	r2, [r3, #0]
  401be8:	f3bf 8f4f 	dsb	sy
  401bec:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401bf0:	4b3f      	ldr	r3, [pc, #252]	; (401cf0 <xQueueGenericSend+0x1c4>)
  401bf2:	4798      	blx	r3
				return pdPASS;
  401bf4:	2001      	movs	r0, #1
}
  401bf6:	b005      	add	sp, #20
  401bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401bfe:	b173      	cbz	r3, 401c1e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401c00:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c04:	4b3b      	ldr	r3, [pc, #236]	; (401cf4 <xQueueGenericSend+0x1c8>)
  401c06:	4798      	blx	r3
  401c08:	2801      	cmp	r0, #1
  401c0a:	d1f1      	bne.n	401bf0 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c10:	4b36      	ldr	r3, [pc, #216]	; (401cec <xQueueGenericSend+0x1c0>)
  401c12:	601a      	str	r2, [r3, #0]
  401c14:	f3bf 8f4f 	dsb	sy
  401c18:	f3bf 8f6f 	isb	sy
  401c1c:	e7e8      	b.n	401bf0 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401c1e:	2800      	cmp	r0, #0
  401c20:	d0e6      	beq.n	401bf0 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c26:	4b31      	ldr	r3, [pc, #196]	; (401cec <xQueueGenericSend+0x1c0>)
  401c28:	601a      	str	r2, [r3, #0]
  401c2a:	f3bf 8f4f 	dsb	sy
  401c2e:	f3bf 8f6f 	isb	sy
  401c32:	e7dd      	b.n	401bf0 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401c34:	4b2e      	ldr	r3, [pc, #184]	; (401cf0 <xQueueGenericSend+0x1c4>)
  401c36:	4798      	blx	r3
					return errQUEUE_FULL;
  401c38:	2000      	movs	r0, #0
  401c3a:	e7dc      	b.n	401bf6 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401c3c:	4620      	mov	r0, r4
  401c3e:	4b2e      	ldr	r3, [pc, #184]	; (401cf8 <xQueueGenericSend+0x1cc>)
  401c40:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401c42:	4b2e      	ldr	r3, [pc, #184]	; (401cfc <xQueueGenericSend+0x1d0>)
  401c44:	4798      	blx	r3
  401c46:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401c48:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401c4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401c4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401c4e:	429a      	cmp	r2, r3
  401c50:	d3b9      	bcc.n	401bc6 <xQueueGenericSend+0x9a>
  401c52:	2d02      	cmp	r5, #2
  401c54:	d0b7      	beq.n	401bc6 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401c56:	9b01      	ldr	r3, [sp, #4]
  401c58:	2b00      	cmp	r3, #0
  401c5a:	d0eb      	beq.n	401c34 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401c5c:	b90f      	cbnz	r7, 401c62 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  401c5e:	a802      	add	r0, sp, #8
  401c60:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401c62:	4b23      	ldr	r3, [pc, #140]	; (401cf0 <xQueueGenericSend+0x1c4>)
  401c64:	4798      	blx	r3
		vTaskSuspendAll();
  401c66:	4b26      	ldr	r3, [pc, #152]	; (401d00 <xQueueGenericSend+0x1d4>)
  401c68:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401c6a:	47b0      	blx	r6
  401c6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c72:	d101      	bne.n	401c78 <xQueueGenericSend+0x14c>
  401c74:	2300      	movs	r3, #0
  401c76:	6463      	str	r3, [r4, #68]	; 0x44
  401c78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c7e:	d101      	bne.n	401c84 <xQueueGenericSend+0x158>
  401c80:	2300      	movs	r3, #0
  401c82:	64a3      	str	r3, [r4, #72]	; 0x48
  401c84:	4b1a      	ldr	r3, [pc, #104]	; (401cf0 <xQueueGenericSend+0x1c4>)
  401c86:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401c88:	a901      	add	r1, sp, #4
  401c8a:	a802      	add	r0, sp, #8
  401c8c:	4b1d      	ldr	r3, [pc, #116]	; (401d04 <xQueueGenericSend+0x1d8>)
  401c8e:	4798      	blx	r3
  401c90:	b9e0      	cbnz	r0, 401ccc <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  401c92:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401c94:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401c98:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401c9a:	4b15      	ldr	r3, [pc, #84]	; (401cf0 <xQueueGenericSend+0x1c4>)
  401c9c:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401c9e:	45bb      	cmp	fp, r7
  401ca0:	d1cc      	bne.n	401c3c <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401ca2:	9901      	ldr	r1, [sp, #4]
  401ca4:	f104 0010 	add.w	r0, r4, #16
  401ca8:	4b17      	ldr	r3, [pc, #92]	; (401d08 <xQueueGenericSend+0x1dc>)
  401caa:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401cac:	4620      	mov	r0, r4
  401cae:	4b12      	ldr	r3, [pc, #72]	; (401cf8 <xQueueGenericSend+0x1cc>)
  401cb0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401cb2:	4b12      	ldr	r3, [pc, #72]	; (401cfc <xQueueGenericSend+0x1d0>)
  401cb4:	4798      	blx	r3
  401cb6:	2800      	cmp	r0, #0
  401cb8:	d1c5      	bne.n	401c46 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401cba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401cbe:	f8c9 3000 	str.w	r3, [r9]
  401cc2:	f3bf 8f4f 	dsb	sy
  401cc6:	f3bf 8f6f 	isb	sy
  401cca:	e7bc      	b.n	401c46 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401ccc:	4620      	mov	r0, r4
  401cce:	4b0a      	ldr	r3, [pc, #40]	; (401cf8 <xQueueGenericSend+0x1cc>)
  401cd0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401cd2:	4b0a      	ldr	r3, [pc, #40]	; (401cfc <xQueueGenericSend+0x1d0>)
  401cd4:	4798      	blx	r3
			return errQUEUE_FULL;
  401cd6:	2000      	movs	r0, #0
  401cd8:	e78d      	b.n	401bf6 <xQueueGenericSend+0xca>
  401cda:	bf00      	nop
  401cdc:	00402b7d 	.word	0x00402b7d
  401ce0:	00401591 	.word	0x00401591
  401ce4:	00401841 	.word	0x00401841
  401ce8:	004018c9 	.word	0x004018c9
  401cec:	e000ed04 	.word	0xe000ed04
  401cf0:	004015dd 	.word	0x004015dd
  401cf4:	00402a15 	.word	0x00402a15
  401cf8:	00401979 	.word	0x00401979
  401cfc:	004025f9 	.word	0x004025f9
  401d00:	00402491 	.word	0x00402491
  401d04:	00402add 	.word	0x00402add
  401d08:	00402911 	.word	0x00402911
  401d0c:	00402aad 	.word	0x00402aad

00401d10 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401d10:	2800      	cmp	r0, #0
  401d12:	d036      	beq.n	401d82 <xQueueGenericSendFromISR+0x72>
{
  401d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401d18:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401d1a:	2900      	cmp	r1, #0
  401d1c:	d03c      	beq.n	401d98 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401d1e:	2b02      	cmp	r3, #2
  401d20:	d048      	beq.n	401db4 <xQueueGenericSendFromISR+0xa4>
  401d22:	461e      	mov	r6, r3
  401d24:	4615      	mov	r5, r2
  401d26:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401d28:	4b35      	ldr	r3, [pc, #212]	; (401e00 <xQueueGenericSendFromISR+0xf0>)
  401d2a:	4798      	blx	r3
	__asm volatile
  401d2c:	f3ef 8711 	mrs	r7, BASEPRI
  401d30:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d34:	b672      	cpsid	i
  401d36:	f383 8811 	msr	BASEPRI, r3
  401d3a:	f3bf 8f6f 	isb	sy
  401d3e:	f3bf 8f4f 	dsb	sy
  401d42:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401d44:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401d46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401d48:	429a      	cmp	r2, r3
  401d4a:	d301      	bcc.n	401d50 <xQueueGenericSendFromISR+0x40>
  401d4c:	2e02      	cmp	r6, #2
  401d4e:	d14f      	bne.n	401df0 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401d50:	4632      	mov	r2, r6
  401d52:	4641      	mov	r1, r8
  401d54:	4620      	mov	r0, r4
  401d56:	4b2b      	ldr	r3, [pc, #172]	; (401e04 <xQueueGenericSendFromISR+0xf4>)
  401d58:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401d5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d60:	d141      	bne.n	401de6 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401d62:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401d64:	2b00      	cmp	r3, #0
  401d66:	d033      	beq.n	401dd0 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401d68:	4631      	mov	r1, r6
  401d6a:	4620      	mov	r0, r4
  401d6c:	4b26      	ldr	r3, [pc, #152]	; (401e08 <xQueueGenericSendFromISR+0xf8>)
  401d6e:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401d70:	2d00      	cmp	r5, #0
  401d72:	d03f      	beq.n	401df4 <xQueueGenericSendFromISR+0xe4>
  401d74:	2801      	cmp	r0, #1
  401d76:	d13d      	bne.n	401df4 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401d78:	6028      	str	r0, [r5, #0]
	__asm volatile
  401d7a:	f387 8811 	msr	BASEPRI, r7
}
  401d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  401d82:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d86:	b672      	cpsid	i
  401d88:	f383 8811 	msr	BASEPRI, r3
  401d8c:	f3bf 8f6f 	isb	sy
  401d90:	f3bf 8f4f 	dsb	sy
  401d94:	b662      	cpsie	i
  401d96:	e7fe      	b.n	401d96 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401d98:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401d9a:	2800      	cmp	r0, #0
  401d9c:	d0bf      	beq.n	401d1e <xQueueGenericSendFromISR+0xe>
  401d9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401da2:	b672      	cpsid	i
  401da4:	f383 8811 	msr	BASEPRI, r3
  401da8:	f3bf 8f6f 	isb	sy
  401dac:	f3bf 8f4f 	dsb	sy
  401db0:	b662      	cpsie	i
  401db2:	e7fe      	b.n	401db2 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401db4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401db6:	2801      	cmp	r0, #1
  401db8:	d0b3      	beq.n	401d22 <xQueueGenericSendFromISR+0x12>
  401dba:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dbe:	b672      	cpsid	i
  401dc0:	f383 8811 	msr	BASEPRI, r3
  401dc4:	f3bf 8f6f 	isb	sy
  401dc8:	f3bf 8f4f 	dsb	sy
  401dcc:	b662      	cpsie	i
  401dce:	e7fe      	b.n	401dce <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401dd2:	b18b      	cbz	r3, 401df8 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401dd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401dd8:	4b0c      	ldr	r3, [pc, #48]	; (401e0c <xQueueGenericSendFromISR+0xfc>)
  401dda:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401ddc:	b175      	cbz	r5, 401dfc <xQueueGenericSendFromISR+0xec>
  401dde:	b168      	cbz	r0, 401dfc <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401de0:	2001      	movs	r0, #1
  401de2:	6028      	str	r0, [r5, #0]
  401de4:	e7c9      	b.n	401d7a <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401de6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401de8:	3301      	adds	r3, #1
  401dea:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401dec:	2001      	movs	r0, #1
  401dee:	e7c4      	b.n	401d7a <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401df0:	2000      	movs	r0, #0
  401df2:	e7c2      	b.n	401d7a <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401df4:	2001      	movs	r0, #1
  401df6:	e7c0      	b.n	401d7a <xQueueGenericSendFromISR+0x6a>
  401df8:	2001      	movs	r0, #1
  401dfa:	e7be      	b.n	401d7a <xQueueGenericSendFromISR+0x6a>
  401dfc:	2001      	movs	r0, #1
  401dfe:	e7bc      	b.n	401d7a <xQueueGenericSendFromISR+0x6a>
  401e00:	00401789 	.word	0x00401789
  401e04:	00401841 	.word	0x00401841
  401e08:	004018c9 	.word	0x004018c9
  401e0c:	00402a15 	.word	0x00402a15

00401e10 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  401e10:	b170      	cbz	r0, 401e30 <xQueueGiveFromISR+0x20>
{
  401e12:	b570      	push	{r4, r5, r6, lr}
  401e14:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401e16:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401e18:	b1ab      	cbz	r3, 401e46 <xQueueGiveFromISR+0x36>
  401e1a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e1e:	b672      	cpsid	i
  401e20:	f383 8811 	msr	BASEPRI, r3
  401e24:	f3bf 8f6f 	isb	sy
  401e28:	f3bf 8f4f 	dsb	sy
  401e2c:	b662      	cpsie	i
  401e2e:	e7fe      	b.n	401e2e <xQueueGiveFromISR+0x1e>
  401e30:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e34:	b672      	cpsid	i
  401e36:	f383 8811 	msr	BASEPRI, r3
  401e3a:	f3bf 8f6f 	isb	sy
  401e3e:	f3bf 8f4f 	dsb	sy
  401e42:	b662      	cpsie	i
  401e44:	e7fe      	b.n	401e44 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401e46:	6803      	ldr	r3, [r0, #0]
  401e48:	b333      	cbz	r3, 401e98 <xQueueGiveFromISR+0x88>
  401e4a:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401e4c:	4b25      	ldr	r3, [pc, #148]	; (401ee4 <xQueueGiveFromISR+0xd4>)
  401e4e:	4798      	blx	r3
	__asm volatile
  401e50:	f3ef 8611 	mrs	r6, BASEPRI
  401e54:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e58:	b672      	cpsid	i
  401e5a:	f383 8811 	msr	BASEPRI, r3
  401e5e:	f3bf 8f6f 	isb	sy
  401e62:	f3bf 8f4f 	dsb	sy
  401e66:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401e68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401e6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401e6c:	429a      	cmp	r2, r3
  401e6e:	d231      	bcs.n	401ed4 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  401e70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401e72:	3301      	adds	r3, #1
  401e74:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  401e76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e78:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e7c:	d125      	bne.n	401eca <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  401e7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401e80:	b1c3      	cbz	r3, 401eb4 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401e82:	2100      	movs	r1, #0
  401e84:	4620      	mov	r0, r4
  401e86:	4b18      	ldr	r3, [pc, #96]	; (401ee8 <xQueueGiveFromISR+0xd8>)
  401e88:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401e8a:	b32d      	cbz	r5, 401ed8 <xQueueGiveFromISR+0xc8>
  401e8c:	2801      	cmp	r0, #1
  401e8e:	d123      	bne.n	401ed8 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401e90:	6028      	str	r0, [r5, #0]
	__asm volatile
  401e92:	f386 8811 	msr	BASEPRI, r6
}
  401e96:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401e98:	6843      	ldr	r3, [r0, #4]
  401e9a:	2b00      	cmp	r3, #0
  401e9c:	d0d5      	beq.n	401e4a <xQueueGiveFromISR+0x3a>
	__asm volatile
  401e9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ea2:	b672      	cpsid	i
  401ea4:	f383 8811 	msr	BASEPRI, r3
  401ea8:	f3bf 8f6f 	isb	sy
  401eac:	f3bf 8f4f 	dsb	sy
  401eb0:	b662      	cpsie	i
  401eb2:	e7fe      	b.n	401eb2 <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401eb6:	b18b      	cbz	r3, 401edc <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401eb8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ebc:	4b0b      	ldr	r3, [pc, #44]	; (401eec <xQueueGiveFromISR+0xdc>)
  401ebe:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401ec0:	b175      	cbz	r5, 401ee0 <xQueueGiveFromISR+0xd0>
  401ec2:	b168      	cbz	r0, 401ee0 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401ec4:	2001      	movs	r0, #1
  401ec6:	6028      	str	r0, [r5, #0]
  401ec8:	e7e3      	b.n	401e92 <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  401eca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ecc:	3301      	adds	r3, #1
  401ece:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401ed0:	2001      	movs	r0, #1
  401ed2:	e7de      	b.n	401e92 <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  401ed4:	2000      	movs	r0, #0
  401ed6:	e7dc      	b.n	401e92 <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  401ed8:	2001      	movs	r0, #1
  401eda:	e7da      	b.n	401e92 <xQueueGiveFromISR+0x82>
  401edc:	2001      	movs	r0, #1
  401ede:	e7d8      	b.n	401e92 <xQueueGiveFromISR+0x82>
  401ee0:	2001      	movs	r0, #1
  401ee2:	e7d6      	b.n	401e92 <xQueueGiveFromISR+0x82>
  401ee4:	00401789 	.word	0x00401789
  401ee8:	004018c9 	.word	0x004018c9
  401eec:	00402a15 	.word	0x00402a15

00401ef0 <xQueueGenericReceive>:
{
  401ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401ef4:	b084      	sub	sp, #16
  401ef6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401ef8:	b198      	cbz	r0, 401f22 <xQueueGenericReceive+0x32>
  401efa:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401efc:	b1e1      	cbz	r1, 401f38 <xQueueGenericReceive+0x48>
  401efe:	4698      	mov	r8, r3
  401f00:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401f02:	4b61      	ldr	r3, [pc, #388]	; (402088 <xQueueGenericReceive+0x198>)
  401f04:	4798      	blx	r3
  401f06:	bb28      	cbnz	r0, 401f54 <xQueueGenericReceive+0x64>
  401f08:	9b01      	ldr	r3, [sp, #4]
  401f0a:	b353      	cbz	r3, 401f62 <xQueueGenericReceive+0x72>
  401f0c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f10:	b672      	cpsid	i
  401f12:	f383 8811 	msr	BASEPRI, r3
  401f16:	f3bf 8f6f 	isb	sy
  401f1a:	f3bf 8f4f 	dsb	sy
  401f1e:	b662      	cpsie	i
  401f20:	e7fe      	b.n	401f20 <xQueueGenericReceive+0x30>
  401f22:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f26:	b672      	cpsid	i
  401f28:	f383 8811 	msr	BASEPRI, r3
  401f2c:	f3bf 8f6f 	isb	sy
  401f30:	f3bf 8f4f 	dsb	sy
  401f34:	b662      	cpsie	i
  401f36:	e7fe      	b.n	401f36 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401f38:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401f3a:	2a00      	cmp	r2, #0
  401f3c:	d0df      	beq.n	401efe <xQueueGenericReceive+0xe>
  401f3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f42:	b672      	cpsid	i
  401f44:	f383 8811 	msr	BASEPRI, r3
  401f48:	f3bf 8f6f 	isb	sy
  401f4c:	f3bf 8f4f 	dsb	sy
  401f50:	b662      	cpsie	i
  401f52:	e7fe      	b.n	401f52 <xQueueGenericReceive+0x62>
  401f54:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401f56:	4d4d      	ldr	r5, [pc, #308]	; (40208c <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401f58:	f8df a160 	ldr.w	sl, [pc, #352]	; 4020bc <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401f5c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 40209c <xQueueGenericReceive+0x1ac>
  401f60:	e04b      	b.n	401ffa <xQueueGenericReceive+0x10a>
  401f62:	2600      	movs	r6, #0
  401f64:	e7f7      	b.n	401f56 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401f66:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401f68:	4639      	mov	r1, r7
  401f6a:	4620      	mov	r0, r4
  401f6c:	4b48      	ldr	r3, [pc, #288]	; (402090 <xQueueGenericReceive+0x1a0>)
  401f6e:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401f70:	f1b8 0f00 	cmp.w	r8, #0
  401f74:	d11d      	bne.n	401fb2 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401f76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401f78:	3b01      	subs	r3, #1
  401f7a:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401f7c:	6823      	ldr	r3, [r4, #0]
  401f7e:	b913      	cbnz	r3, 401f86 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401f80:	4b44      	ldr	r3, [pc, #272]	; (402094 <xQueueGenericReceive+0x1a4>)
  401f82:	4798      	blx	r3
  401f84:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401f86:	6923      	ldr	r3, [r4, #16]
  401f88:	b16b      	cbz	r3, 401fa6 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401f8a:	f104 0010 	add.w	r0, r4, #16
  401f8e:	4b42      	ldr	r3, [pc, #264]	; (402098 <xQueueGenericReceive+0x1a8>)
  401f90:	4798      	blx	r3
  401f92:	2801      	cmp	r0, #1
  401f94:	d107      	bne.n	401fa6 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f9a:	4b40      	ldr	r3, [pc, #256]	; (40209c <xQueueGenericReceive+0x1ac>)
  401f9c:	601a      	str	r2, [r3, #0]
  401f9e:	f3bf 8f4f 	dsb	sy
  401fa2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401fa6:	4b3e      	ldr	r3, [pc, #248]	; (4020a0 <xQueueGenericReceive+0x1b0>)
  401fa8:	4798      	blx	r3
				return pdPASS;
  401faa:	2001      	movs	r0, #1
}
  401fac:	b004      	add	sp, #16
  401fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401fb2:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401fb6:	2b00      	cmp	r3, #0
  401fb8:	d0f5      	beq.n	401fa6 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401fba:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401fbe:	4b36      	ldr	r3, [pc, #216]	; (402098 <xQueueGenericReceive+0x1a8>)
  401fc0:	4798      	blx	r3
  401fc2:	2800      	cmp	r0, #0
  401fc4:	d0ef      	beq.n	401fa6 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fca:	4b34      	ldr	r3, [pc, #208]	; (40209c <xQueueGenericReceive+0x1ac>)
  401fcc:	601a      	str	r2, [r3, #0]
  401fce:	f3bf 8f4f 	dsb	sy
  401fd2:	f3bf 8f6f 	isb	sy
  401fd6:	e7e6      	b.n	401fa6 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401fd8:	4b31      	ldr	r3, [pc, #196]	; (4020a0 <xQueueGenericReceive+0x1b0>)
  401fda:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401fdc:	2000      	movs	r0, #0
  401fde:	e7e5      	b.n	401fac <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401fe0:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401fe2:	6860      	ldr	r0, [r4, #4]
  401fe4:	4b2f      	ldr	r3, [pc, #188]	; (4020a4 <xQueueGenericReceive+0x1b4>)
  401fe6:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401fe8:	4b2d      	ldr	r3, [pc, #180]	; (4020a0 <xQueueGenericReceive+0x1b0>)
  401fea:	4798      	blx	r3
  401fec:	e030      	b.n	402050 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401fee:	4620      	mov	r0, r4
  401ff0:	4b2d      	ldr	r3, [pc, #180]	; (4020a8 <xQueueGenericReceive+0x1b8>)
  401ff2:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401ff4:	4b2d      	ldr	r3, [pc, #180]	; (4020ac <xQueueGenericReceive+0x1bc>)
  401ff6:	4798      	blx	r3
  401ff8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401ffa:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401ffc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401ffe:	2b00      	cmp	r3, #0
  402000:	d1b1      	bne.n	401f66 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  402002:	9b01      	ldr	r3, [sp, #4]
  402004:	2b00      	cmp	r3, #0
  402006:	d0e7      	beq.n	401fd8 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  402008:	b90e      	cbnz	r6, 40200e <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  40200a:	a802      	add	r0, sp, #8
  40200c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40200e:	4b24      	ldr	r3, [pc, #144]	; (4020a0 <xQueueGenericReceive+0x1b0>)
  402010:	4798      	blx	r3
		vTaskSuspendAll();
  402012:	4b27      	ldr	r3, [pc, #156]	; (4020b0 <xQueueGenericReceive+0x1c0>)
  402014:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402016:	47a8      	blx	r5
  402018:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40201a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40201e:	d101      	bne.n	402024 <xQueueGenericReceive+0x134>
  402020:	2300      	movs	r3, #0
  402022:	6463      	str	r3, [r4, #68]	; 0x44
  402024:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402026:	f1b3 3fff 	cmp.w	r3, #4294967295
  40202a:	d101      	bne.n	402030 <xQueueGenericReceive+0x140>
  40202c:	2300      	movs	r3, #0
  40202e:	64a3      	str	r3, [r4, #72]	; 0x48
  402030:	4b1b      	ldr	r3, [pc, #108]	; (4020a0 <xQueueGenericReceive+0x1b0>)
  402032:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402034:	a901      	add	r1, sp, #4
  402036:	a802      	add	r0, sp, #8
  402038:	4b1e      	ldr	r3, [pc, #120]	; (4020b4 <xQueueGenericReceive+0x1c4>)
  40203a:	4798      	blx	r3
  40203c:	b9e8      	cbnz	r0, 40207a <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  40203e:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402040:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  402042:	4b17      	ldr	r3, [pc, #92]	; (4020a0 <xQueueGenericReceive+0x1b0>)
  402044:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402046:	2e00      	cmp	r6, #0
  402048:	d1d1      	bne.n	401fee <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40204a:	6823      	ldr	r3, [r4, #0]
  40204c:	2b00      	cmp	r3, #0
  40204e:	d0c7      	beq.n	401fe0 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402050:	9901      	ldr	r1, [sp, #4]
  402052:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402056:	4b18      	ldr	r3, [pc, #96]	; (4020b8 <xQueueGenericReceive+0x1c8>)
  402058:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40205a:	4620      	mov	r0, r4
  40205c:	4b12      	ldr	r3, [pc, #72]	; (4020a8 <xQueueGenericReceive+0x1b8>)
  40205e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402060:	4b12      	ldr	r3, [pc, #72]	; (4020ac <xQueueGenericReceive+0x1bc>)
  402062:	4798      	blx	r3
  402064:	2800      	cmp	r0, #0
  402066:	d1c7      	bne.n	401ff8 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  402068:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40206c:	f8c9 3000 	str.w	r3, [r9]
  402070:	f3bf 8f4f 	dsb	sy
  402074:	f3bf 8f6f 	isb	sy
  402078:	e7be      	b.n	401ff8 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  40207a:	4620      	mov	r0, r4
  40207c:	4b0a      	ldr	r3, [pc, #40]	; (4020a8 <xQueueGenericReceive+0x1b8>)
  40207e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402080:	4b0a      	ldr	r3, [pc, #40]	; (4020ac <xQueueGenericReceive+0x1bc>)
  402082:	4798      	blx	r3
			return errQUEUE_EMPTY;
  402084:	2000      	movs	r0, #0
  402086:	e791      	b.n	401fac <xQueueGenericReceive+0xbc>
  402088:	00402b7d 	.word	0x00402b7d
  40208c:	00401591 	.word	0x00401591
  402090:	00401951 	.word	0x00401951
  402094:	00402cfd 	.word	0x00402cfd
  402098:	00402a15 	.word	0x00402a15
  40209c:	e000ed04 	.word	0xe000ed04
  4020a0:	004015dd 	.word	0x004015dd
  4020a4:	00402b9d 	.word	0x00402b9d
  4020a8:	00401979 	.word	0x00401979
  4020ac:	004025f9 	.word	0x004025f9
  4020b0:	00402491 	.word	0x00402491
  4020b4:	00402add 	.word	0x00402add
  4020b8:	00402911 	.word	0x00402911
  4020bc:	00402aad 	.word	0x00402aad

004020c0 <vQueueAddToRegistry>:
	{
  4020c0:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4020c2:	4b0b      	ldr	r3, [pc, #44]	; (4020f0 <vQueueAddToRegistry+0x30>)
  4020c4:	681b      	ldr	r3, [r3, #0]
  4020c6:	b153      	cbz	r3, 4020de <vQueueAddToRegistry+0x1e>
  4020c8:	2301      	movs	r3, #1
  4020ca:	4c09      	ldr	r4, [pc, #36]	; (4020f0 <vQueueAddToRegistry+0x30>)
  4020cc:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4020d0:	b132      	cbz	r2, 4020e0 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4020d2:	3301      	adds	r3, #1
  4020d4:	2b08      	cmp	r3, #8
  4020d6:	d1f9      	bne.n	4020cc <vQueueAddToRegistry+0xc>
	}
  4020d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4020dc:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4020de:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4020e0:	4a03      	ldr	r2, [pc, #12]	; (4020f0 <vQueueAddToRegistry+0x30>)
  4020e2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4020e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4020ea:	6058      	str	r0, [r3, #4]
				break;
  4020ec:	e7f4      	b.n	4020d8 <vQueueAddToRegistry+0x18>
  4020ee:	bf00      	nop
  4020f0:	20400de0 	.word	0x20400de0

004020f4 <vQueueWaitForMessageRestricted>:
	{
  4020f4:	b570      	push	{r4, r5, r6, lr}
  4020f6:	4604      	mov	r4, r0
  4020f8:	460d      	mov	r5, r1
  4020fa:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4020fc:	4b0f      	ldr	r3, [pc, #60]	; (40213c <vQueueWaitForMessageRestricted+0x48>)
  4020fe:	4798      	blx	r3
  402100:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402102:	f1b3 3fff 	cmp.w	r3, #4294967295
  402106:	d00b      	beq.n	402120 <vQueueWaitForMessageRestricted+0x2c>
  402108:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40210a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40210e:	d00a      	beq.n	402126 <vQueueWaitForMessageRestricted+0x32>
  402110:	4b0b      	ldr	r3, [pc, #44]	; (402140 <vQueueWaitForMessageRestricted+0x4c>)
  402112:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402114:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402116:	b14b      	cbz	r3, 40212c <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  402118:	4620      	mov	r0, r4
  40211a:	4b0a      	ldr	r3, [pc, #40]	; (402144 <vQueueWaitForMessageRestricted+0x50>)
  40211c:	4798      	blx	r3
  40211e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402120:	2300      	movs	r3, #0
  402122:	6463      	str	r3, [r4, #68]	; 0x44
  402124:	e7f0      	b.n	402108 <vQueueWaitForMessageRestricted+0x14>
  402126:	2300      	movs	r3, #0
  402128:	64a3      	str	r3, [r4, #72]	; 0x48
  40212a:	e7f1      	b.n	402110 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  40212c:	4632      	mov	r2, r6
  40212e:	4629      	mov	r1, r5
  402130:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402134:	4b04      	ldr	r3, [pc, #16]	; (402148 <vQueueWaitForMessageRestricted+0x54>)
  402136:	4798      	blx	r3
  402138:	e7ee      	b.n	402118 <vQueueWaitForMessageRestricted+0x24>
  40213a:	bf00      	nop
  40213c:	00401591 	.word	0x00401591
  402140:	004015dd 	.word	0x004015dd
  402144:	00401979 	.word	0x00401979
  402148:	00402995 	.word	0x00402995

0040214c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40214c:	4b08      	ldr	r3, [pc, #32]	; (402170 <prvResetNextTaskUnblockTime+0x24>)
  40214e:	681b      	ldr	r3, [r3, #0]
  402150:	681b      	ldr	r3, [r3, #0]
  402152:	b13b      	cbz	r3, 402164 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402154:	4b06      	ldr	r3, [pc, #24]	; (402170 <prvResetNextTaskUnblockTime+0x24>)
  402156:	681b      	ldr	r3, [r3, #0]
  402158:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40215a:	68db      	ldr	r3, [r3, #12]
  40215c:	685a      	ldr	r2, [r3, #4]
  40215e:	4b05      	ldr	r3, [pc, #20]	; (402174 <prvResetNextTaskUnblockTime+0x28>)
  402160:	601a      	str	r2, [r3, #0]
  402162:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402164:	f04f 32ff 	mov.w	r2, #4294967295
  402168:	4b02      	ldr	r3, [pc, #8]	; (402174 <prvResetNextTaskUnblockTime+0x28>)
  40216a:	601a      	str	r2, [r3, #0]
  40216c:	4770      	bx	lr
  40216e:	bf00      	nop
  402170:	20400c6c 	.word	0x20400c6c
  402174:	20400d18 	.word	0x20400d18

00402178 <prvAddCurrentTaskToDelayedList>:
{
  402178:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40217a:	4b0f      	ldr	r3, [pc, #60]	; (4021b8 <prvAddCurrentTaskToDelayedList+0x40>)
  40217c:	681b      	ldr	r3, [r3, #0]
  40217e:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  402180:	4b0e      	ldr	r3, [pc, #56]	; (4021bc <prvAddCurrentTaskToDelayedList+0x44>)
  402182:	681b      	ldr	r3, [r3, #0]
  402184:	4298      	cmp	r0, r3
  402186:	d30e      	bcc.n	4021a6 <prvAddCurrentTaskToDelayedList+0x2e>
  402188:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40218a:	4b0d      	ldr	r3, [pc, #52]	; (4021c0 <prvAddCurrentTaskToDelayedList+0x48>)
  40218c:	6818      	ldr	r0, [r3, #0]
  40218e:	4b0a      	ldr	r3, [pc, #40]	; (4021b8 <prvAddCurrentTaskToDelayedList+0x40>)
  402190:	6819      	ldr	r1, [r3, #0]
  402192:	3104      	adds	r1, #4
  402194:	4b0b      	ldr	r3, [pc, #44]	; (4021c4 <prvAddCurrentTaskToDelayedList+0x4c>)
  402196:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402198:	4b0b      	ldr	r3, [pc, #44]	; (4021c8 <prvAddCurrentTaskToDelayedList+0x50>)
  40219a:	681b      	ldr	r3, [r3, #0]
  40219c:	429c      	cmp	r4, r3
  40219e:	d201      	bcs.n	4021a4 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  4021a0:	4b09      	ldr	r3, [pc, #36]	; (4021c8 <prvAddCurrentTaskToDelayedList+0x50>)
  4021a2:	601c      	str	r4, [r3, #0]
  4021a4:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4021a6:	4b09      	ldr	r3, [pc, #36]	; (4021cc <prvAddCurrentTaskToDelayedList+0x54>)
  4021a8:	6818      	ldr	r0, [r3, #0]
  4021aa:	4b03      	ldr	r3, [pc, #12]	; (4021b8 <prvAddCurrentTaskToDelayedList+0x40>)
  4021ac:	6819      	ldr	r1, [r3, #0]
  4021ae:	3104      	adds	r1, #4
  4021b0:	4b04      	ldr	r3, [pc, #16]	; (4021c4 <prvAddCurrentTaskToDelayedList+0x4c>)
  4021b2:	4798      	blx	r3
  4021b4:	bd10      	pop	{r4, pc}
  4021b6:	bf00      	nop
  4021b8:	20400c68 	.word	0x20400c68
  4021bc:	20400d60 	.word	0x20400d60
  4021c0:	20400c6c 	.word	0x20400c6c
  4021c4:	00401479 	.word	0x00401479
  4021c8:	20400d18 	.word	0x20400d18
  4021cc:	20400c70 	.word	0x20400c70

004021d0 <xTaskGenericCreate>:
{
  4021d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4021d4:	b083      	sub	sp, #12
  4021d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  4021d8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4021dc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  4021de:	b160      	cbz	r0, 4021fa <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4021e0:	2d04      	cmp	r5, #4
  4021e2:	d915      	bls.n	402210 <xTaskGenericCreate+0x40>
  4021e4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021e8:	b672      	cpsid	i
  4021ea:	f383 8811 	msr	BASEPRI, r3
  4021ee:	f3bf 8f6f 	isb	sy
  4021f2:	f3bf 8f4f 	dsb	sy
  4021f6:	b662      	cpsie	i
  4021f8:	e7fe      	b.n	4021f8 <xTaskGenericCreate+0x28>
  4021fa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021fe:	b672      	cpsid	i
  402200:	f383 8811 	msr	BASEPRI, r3
  402204:	f3bf 8f6f 	isb	sy
  402208:	f3bf 8f4f 	dsb	sy
  40220c:	b662      	cpsie	i
  40220e:	e7fe      	b.n	40220e <xTaskGenericCreate+0x3e>
  402210:	9001      	str	r0, [sp, #4]
  402212:	4698      	mov	r8, r3
  402214:	4691      	mov	r9, r2
  402216:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402218:	b936      	cbnz	r6, 402228 <xTaskGenericCreate+0x58>
  40221a:	0090      	lsls	r0, r2, #2
  40221c:	4b62      	ldr	r3, [pc, #392]	; (4023a8 <xTaskGenericCreate+0x1d8>)
  40221e:	4798      	blx	r3
		if( pxStack != NULL )
  402220:	4606      	mov	r6, r0
  402222:	2800      	cmp	r0, #0
  402224:	f000 809e 	beq.w	402364 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402228:	2058      	movs	r0, #88	; 0x58
  40222a:	4b5f      	ldr	r3, [pc, #380]	; (4023a8 <xTaskGenericCreate+0x1d8>)
  40222c:	4798      	blx	r3
			if( pxNewTCB != NULL )
  40222e:	4604      	mov	r4, r0
  402230:	2800      	cmp	r0, #0
  402232:	f000 8094 	beq.w	40235e <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402236:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402238:	ea4f 0289 	mov.w	r2, r9, lsl #2
  40223c:	21a5      	movs	r1, #165	; 0xa5
  40223e:	4630      	mov	r0, r6
  402240:	4b5a      	ldr	r3, [pc, #360]	; (4023ac <xTaskGenericCreate+0x1dc>)
  402242:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402244:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402248:	444e      	add	r6, r9
  40224a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40224c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402250:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402254:	783b      	ldrb	r3, [r7, #0]
  402256:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40225a:	783b      	ldrb	r3, [r7, #0]
  40225c:	2b00      	cmp	r3, #0
  40225e:	f040 8084 	bne.w	40236a <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402262:	2700      	movs	r7, #0
  402264:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402268:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40226a:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  40226c:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40226e:	f104 0904 	add.w	r9, r4, #4
  402272:	4648      	mov	r0, r9
  402274:	f8df b184 	ldr.w	fp, [pc, #388]	; 4023fc <xTaskGenericCreate+0x22c>
  402278:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40227a:	f104 0018 	add.w	r0, r4, #24
  40227e:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402280:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402282:	f1c5 0305 	rsb	r3, r5, #5
  402286:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402288:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  40228a:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  40228c:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  402290:	4642      	mov	r2, r8
  402292:	9901      	ldr	r1, [sp, #4]
  402294:	4630      	mov	r0, r6
  402296:	4b46      	ldr	r3, [pc, #280]	; (4023b0 <xTaskGenericCreate+0x1e0>)
  402298:	4798      	blx	r3
  40229a:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  40229c:	f1ba 0f00 	cmp.w	sl, #0
  4022a0:	d001      	beq.n	4022a6 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4022a2:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  4022a6:	4b43      	ldr	r3, [pc, #268]	; (4023b4 <xTaskGenericCreate+0x1e4>)
  4022a8:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4022aa:	4a43      	ldr	r2, [pc, #268]	; (4023b8 <xTaskGenericCreate+0x1e8>)
  4022ac:	6813      	ldr	r3, [r2, #0]
  4022ae:	3301      	adds	r3, #1
  4022b0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4022b2:	4b42      	ldr	r3, [pc, #264]	; (4023bc <xTaskGenericCreate+0x1ec>)
  4022b4:	681b      	ldr	r3, [r3, #0]
  4022b6:	2b00      	cmp	r3, #0
  4022b8:	d166      	bne.n	402388 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  4022ba:	4b40      	ldr	r3, [pc, #256]	; (4023bc <xTaskGenericCreate+0x1ec>)
  4022bc:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4022be:	6813      	ldr	r3, [r2, #0]
  4022c0:	2b01      	cmp	r3, #1
  4022c2:	d121      	bne.n	402308 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4022c4:	4f3e      	ldr	r7, [pc, #248]	; (4023c0 <xTaskGenericCreate+0x1f0>)
  4022c6:	4638      	mov	r0, r7
  4022c8:	4e3e      	ldr	r6, [pc, #248]	; (4023c4 <xTaskGenericCreate+0x1f4>)
  4022ca:	47b0      	blx	r6
  4022cc:	f107 0014 	add.w	r0, r7, #20
  4022d0:	47b0      	blx	r6
  4022d2:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4022d6:	47b0      	blx	r6
  4022d8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4022dc:	47b0      	blx	r6
  4022de:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4022e2:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  4022e4:	f8df 8118 	ldr.w	r8, [pc, #280]	; 402400 <xTaskGenericCreate+0x230>
  4022e8:	4640      	mov	r0, r8
  4022ea:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  4022ec:	4f36      	ldr	r7, [pc, #216]	; (4023c8 <xTaskGenericCreate+0x1f8>)
  4022ee:	4638      	mov	r0, r7
  4022f0:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  4022f2:	4836      	ldr	r0, [pc, #216]	; (4023cc <xTaskGenericCreate+0x1fc>)
  4022f4:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  4022f6:	4836      	ldr	r0, [pc, #216]	; (4023d0 <xTaskGenericCreate+0x200>)
  4022f8:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  4022fa:	4836      	ldr	r0, [pc, #216]	; (4023d4 <xTaskGenericCreate+0x204>)
  4022fc:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  4022fe:	4b36      	ldr	r3, [pc, #216]	; (4023d8 <xTaskGenericCreate+0x208>)
  402300:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402304:	4b35      	ldr	r3, [pc, #212]	; (4023dc <xTaskGenericCreate+0x20c>)
  402306:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402308:	4a35      	ldr	r2, [pc, #212]	; (4023e0 <xTaskGenericCreate+0x210>)
  40230a:	6813      	ldr	r3, [r2, #0]
  40230c:	3301      	adds	r3, #1
  40230e:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402310:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402312:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402314:	4a33      	ldr	r2, [pc, #204]	; (4023e4 <xTaskGenericCreate+0x214>)
  402316:	6811      	ldr	r1, [r2, #0]
  402318:	2301      	movs	r3, #1
  40231a:	4083      	lsls	r3, r0
  40231c:	430b      	orrs	r3, r1
  40231e:	6013      	str	r3, [r2, #0]
  402320:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402324:	4649      	mov	r1, r9
  402326:	4b26      	ldr	r3, [pc, #152]	; (4023c0 <xTaskGenericCreate+0x1f0>)
  402328:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40232c:	4b2e      	ldr	r3, [pc, #184]	; (4023e8 <xTaskGenericCreate+0x218>)
  40232e:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402330:	4b2e      	ldr	r3, [pc, #184]	; (4023ec <xTaskGenericCreate+0x21c>)
  402332:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402334:	4b2e      	ldr	r3, [pc, #184]	; (4023f0 <xTaskGenericCreate+0x220>)
  402336:	681b      	ldr	r3, [r3, #0]
  402338:	2b00      	cmp	r3, #0
  40233a:	d031      	beq.n	4023a0 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  40233c:	4b1f      	ldr	r3, [pc, #124]	; (4023bc <xTaskGenericCreate+0x1ec>)
  40233e:	681b      	ldr	r3, [r3, #0]
  402340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402342:	429d      	cmp	r5, r3
  402344:	d92e      	bls.n	4023a4 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40234a:	4b2a      	ldr	r3, [pc, #168]	; (4023f4 <xTaskGenericCreate+0x224>)
  40234c:	601a      	str	r2, [r3, #0]
  40234e:	f3bf 8f4f 	dsb	sy
  402352:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402356:	2001      	movs	r0, #1
}
  402358:	b003      	add	sp, #12
  40235a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  40235e:	4630      	mov	r0, r6
  402360:	4b25      	ldr	r3, [pc, #148]	; (4023f8 <xTaskGenericCreate+0x228>)
  402362:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402364:	f04f 30ff 	mov.w	r0, #4294967295
  402368:	e7f6      	b.n	402358 <xTaskGenericCreate+0x188>
  40236a:	463b      	mov	r3, r7
  40236c:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402370:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402372:	7859      	ldrb	r1, [r3, #1]
  402374:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  402378:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  40237c:	2900      	cmp	r1, #0
  40237e:	f43f af70 	beq.w	402262 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402382:	42bb      	cmp	r3, r7
  402384:	d1f5      	bne.n	402372 <xTaskGenericCreate+0x1a2>
  402386:	e76c      	b.n	402262 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  402388:	4b19      	ldr	r3, [pc, #100]	; (4023f0 <xTaskGenericCreate+0x220>)
  40238a:	681b      	ldr	r3, [r3, #0]
  40238c:	2b00      	cmp	r3, #0
  40238e:	d1bb      	bne.n	402308 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  402390:	4b0a      	ldr	r3, [pc, #40]	; (4023bc <xTaskGenericCreate+0x1ec>)
  402392:	681b      	ldr	r3, [r3, #0]
  402394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402396:	429d      	cmp	r5, r3
  402398:	d3b6      	bcc.n	402308 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  40239a:	4b08      	ldr	r3, [pc, #32]	; (4023bc <xTaskGenericCreate+0x1ec>)
  40239c:	601c      	str	r4, [r3, #0]
  40239e:	e7b3      	b.n	402308 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  4023a0:	2001      	movs	r0, #1
  4023a2:	e7d9      	b.n	402358 <xTaskGenericCreate+0x188>
  4023a4:	2001      	movs	r0, #1
	return xReturn;
  4023a6:	e7d7      	b.n	402358 <xTaskGenericCreate+0x188>
  4023a8:	004017ed 	.word	0x004017ed
  4023ac:	00404669 	.word	0x00404669
  4023b0:	00401545 	.word	0x00401545
  4023b4:	00401591 	.word	0x00401591
  4023b8:	20400cd8 	.word	0x20400cd8
  4023bc:	20400c68 	.word	0x20400c68
  4023c0:	20400c74 	.word	0x20400c74
  4023c4:	00401445 	.word	0x00401445
  4023c8:	20400d04 	.word	0x20400d04
  4023cc:	20400d20 	.word	0x20400d20
  4023d0:	20400d4c 	.word	0x20400d4c
  4023d4:	20400d38 	.word	0x20400d38
  4023d8:	20400c6c 	.word	0x20400c6c
  4023dc:	20400c70 	.word	0x20400c70
  4023e0:	20400ce4 	.word	0x20400ce4
  4023e4:	20400cec 	.word	0x20400cec
  4023e8:	00401461 	.word	0x00401461
  4023ec:	004015dd 	.word	0x004015dd
  4023f0:	20400d34 	.word	0x20400d34
  4023f4:	e000ed04 	.word	0xe000ed04
  4023f8:	0040181d 	.word	0x0040181d
  4023fc:	0040145b 	.word	0x0040145b
  402400:	20400cf0 	.word	0x20400cf0

00402404 <vTaskStartScheduler>:
{
  402404:	b510      	push	{r4, lr}
  402406:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402408:	2300      	movs	r3, #0
  40240a:	9303      	str	r3, [sp, #12]
  40240c:	9302      	str	r3, [sp, #8]
  40240e:	9301      	str	r3, [sp, #4]
  402410:	9300      	str	r3, [sp, #0]
  402412:	2282      	movs	r2, #130	; 0x82
  402414:	4916      	ldr	r1, [pc, #88]	; (402470 <vTaskStartScheduler+0x6c>)
  402416:	4817      	ldr	r0, [pc, #92]	; (402474 <vTaskStartScheduler+0x70>)
  402418:	4c17      	ldr	r4, [pc, #92]	; (402478 <vTaskStartScheduler+0x74>)
  40241a:	47a0      	blx	r4
		if( xReturn == pdPASS )
  40241c:	2801      	cmp	r0, #1
  40241e:	d00b      	beq.n	402438 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  402420:	bb20      	cbnz	r0, 40246c <vTaskStartScheduler+0x68>
  402422:	f04f 0380 	mov.w	r3, #128	; 0x80
  402426:	b672      	cpsid	i
  402428:	f383 8811 	msr	BASEPRI, r3
  40242c:	f3bf 8f6f 	isb	sy
  402430:	f3bf 8f4f 	dsb	sy
  402434:	b662      	cpsie	i
  402436:	e7fe      	b.n	402436 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  402438:	4b10      	ldr	r3, [pc, #64]	; (40247c <vTaskStartScheduler+0x78>)
  40243a:	4798      	blx	r3
	if( xReturn == pdPASS )
  40243c:	2801      	cmp	r0, #1
  40243e:	d1ef      	bne.n	402420 <vTaskStartScheduler+0x1c>
  402440:	f04f 0380 	mov.w	r3, #128	; 0x80
  402444:	b672      	cpsid	i
  402446:	f383 8811 	msr	BASEPRI, r3
  40244a:	f3bf 8f6f 	isb	sy
  40244e:	f3bf 8f4f 	dsb	sy
  402452:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402454:	f04f 32ff 	mov.w	r2, #4294967295
  402458:	4b09      	ldr	r3, [pc, #36]	; (402480 <vTaskStartScheduler+0x7c>)
  40245a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40245c:	2201      	movs	r2, #1
  40245e:	4b09      	ldr	r3, [pc, #36]	; (402484 <vTaskStartScheduler+0x80>)
  402460:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402462:	2200      	movs	r2, #0
  402464:	4b08      	ldr	r3, [pc, #32]	; (402488 <vTaskStartScheduler+0x84>)
  402466:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402468:	4b08      	ldr	r3, [pc, #32]	; (40248c <vTaskStartScheduler+0x88>)
  40246a:	4798      	blx	r3
}
  40246c:	b004      	add	sp, #16
  40246e:	bd10      	pop	{r4, pc}
  402470:	00409180 	.word	0x00409180
  402474:	004027a9 	.word	0x004027a9
  402478:	004021d1 	.word	0x004021d1
  40247c:	00402de9 	.word	0x00402de9
  402480:	20400d18 	.word	0x20400d18
  402484:	20400d34 	.word	0x20400d34
  402488:	20400d60 	.word	0x20400d60
  40248c:	004016c5 	.word	0x004016c5

00402490 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402490:	4a02      	ldr	r2, [pc, #8]	; (40249c <vTaskSuspendAll+0xc>)
  402492:	6813      	ldr	r3, [r2, #0]
  402494:	3301      	adds	r3, #1
  402496:	6013      	str	r3, [r2, #0]
  402498:	4770      	bx	lr
  40249a:	bf00      	nop
  40249c:	20400ce0 	.word	0x20400ce0

004024a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4024a0:	4b01      	ldr	r3, [pc, #4]	; (4024a8 <xTaskGetTickCount+0x8>)
  4024a2:	6818      	ldr	r0, [r3, #0]
}
  4024a4:	4770      	bx	lr
  4024a6:	bf00      	nop
  4024a8:	20400d60 	.word	0x20400d60

004024ac <xTaskIncrementTick>:
{
  4024ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4024b0:	4b42      	ldr	r3, [pc, #264]	; (4025bc <xTaskIncrementTick+0x110>)
  4024b2:	681b      	ldr	r3, [r3, #0]
  4024b4:	2b00      	cmp	r3, #0
  4024b6:	d178      	bne.n	4025aa <xTaskIncrementTick+0xfe>
		++xTickCount;
  4024b8:	4b41      	ldr	r3, [pc, #260]	; (4025c0 <xTaskIncrementTick+0x114>)
  4024ba:	681a      	ldr	r2, [r3, #0]
  4024bc:	3201      	adds	r2, #1
  4024be:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4024c0:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  4024c2:	b9d6      	cbnz	r6, 4024fa <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  4024c4:	4b3f      	ldr	r3, [pc, #252]	; (4025c4 <xTaskIncrementTick+0x118>)
  4024c6:	681b      	ldr	r3, [r3, #0]
  4024c8:	681b      	ldr	r3, [r3, #0]
  4024ca:	b153      	cbz	r3, 4024e2 <xTaskIncrementTick+0x36>
  4024cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024d0:	b672      	cpsid	i
  4024d2:	f383 8811 	msr	BASEPRI, r3
  4024d6:	f3bf 8f6f 	isb	sy
  4024da:	f3bf 8f4f 	dsb	sy
  4024de:	b662      	cpsie	i
  4024e0:	e7fe      	b.n	4024e0 <xTaskIncrementTick+0x34>
  4024e2:	4a38      	ldr	r2, [pc, #224]	; (4025c4 <xTaskIncrementTick+0x118>)
  4024e4:	6811      	ldr	r1, [r2, #0]
  4024e6:	4b38      	ldr	r3, [pc, #224]	; (4025c8 <xTaskIncrementTick+0x11c>)
  4024e8:	6818      	ldr	r0, [r3, #0]
  4024ea:	6010      	str	r0, [r2, #0]
  4024ec:	6019      	str	r1, [r3, #0]
  4024ee:	4a37      	ldr	r2, [pc, #220]	; (4025cc <xTaskIncrementTick+0x120>)
  4024f0:	6813      	ldr	r3, [r2, #0]
  4024f2:	3301      	adds	r3, #1
  4024f4:	6013      	str	r3, [r2, #0]
  4024f6:	4b36      	ldr	r3, [pc, #216]	; (4025d0 <xTaskIncrementTick+0x124>)
  4024f8:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4024fa:	4b36      	ldr	r3, [pc, #216]	; (4025d4 <xTaskIncrementTick+0x128>)
  4024fc:	681b      	ldr	r3, [r3, #0]
  4024fe:	429e      	cmp	r6, r3
  402500:	d218      	bcs.n	402534 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402502:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402504:	4b34      	ldr	r3, [pc, #208]	; (4025d8 <xTaskIncrementTick+0x12c>)
  402506:	681b      	ldr	r3, [r3, #0]
  402508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40250a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40250e:	4a33      	ldr	r2, [pc, #204]	; (4025dc <xTaskIncrementTick+0x130>)
  402510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402514:	2b02      	cmp	r3, #2
  402516:	bf28      	it	cs
  402518:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  40251a:	4b31      	ldr	r3, [pc, #196]	; (4025e0 <xTaskIncrementTick+0x134>)
  40251c:	681b      	ldr	r3, [r3, #0]
  40251e:	b90b      	cbnz	r3, 402524 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402520:	4b30      	ldr	r3, [pc, #192]	; (4025e4 <xTaskIncrementTick+0x138>)
  402522:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402524:	4b30      	ldr	r3, [pc, #192]	; (4025e8 <xTaskIncrementTick+0x13c>)
  402526:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402528:	2b00      	cmp	r3, #0
}
  40252a:	bf0c      	ite	eq
  40252c:	4620      	moveq	r0, r4
  40252e:	2001      	movne	r0, #1
  402530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402534:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402536:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4025c4 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40253a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4025f4 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  40253e:	4f2b      	ldr	r7, [pc, #172]	; (4025ec <xTaskIncrementTick+0x140>)
  402540:	e01f      	b.n	402582 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402542:	f04f 32ff 	mov.w	r2, #4294967295
  402546:	4b23      	ldr	r3, [pc, #140]	; (4025d4 <xTaskIncrementTick+0x128>)
  402548:	601a      	str	r2, [r3, #0]
						break;
  40254a:	e7db      	b.n	402504 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  40254c:	4a21      	ldr	r2, [pc, #132]	; (4025d4 <xTaskIncrementTick+0x128>)
  40254e:	6013      	str	r3, [r2, #0]
							break;
  402550:	e7d8      	b.n	402504 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402552:	f105 0018 	add.w	r0, r5, #24
  402556:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402558:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40255a:	683a      	ldr	r2, [r7, #0]
  40255c:	2301      	movs	r3, #1
  40255e:	4083      	lsls	r3, r0
  402560:	4313      	orrs	r3, r2
  402562:	603b      	str	r3, [r7, #0]
  402564:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402568:	4651      	mov	r1, sl
  40256a:	4b1c      	ldr	r3, [pc, #112]	; (4025dc <xTaskIncrementTick+0x130>)
  40256c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402570:	4b1f      	ldr	r3, [pc, #124]	; (4025f0 <xTaskIncrementTick+0x144>)
  402572:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402574:	4b18      	ldr	r3, [pc, #96]	; (4025d8 <xTaskIncrementTick+0x12c>)
  402576:	681b      	ldr	r3, [r3, #0]
  402578:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  40257c:	429a      	cmp	r2, r3
  40257e:	bf28      	it	cs
  402580:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402582:	f8d9 3000 	ldr.w	r3, [r9]
  402586:	681b      	ldr	r3, [r3, #0]
  402588:	2b00      	cmp	r3, #0
  40258a:	d0da      	beq.n	402542 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40258c:	f8d9 3000 	ldr.w	r3, [r9]
  402590:	68db      	ldr	r3, [r3, #12]
  402592:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402594:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  402596:	429e      	cmp	r6, r3
  402598:	d3d8      	bcc.n	40254c <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40259a:	f105 0a04 	add.w	sl, r5, #4
  40259e:	4650      	mov	r0, sl
  4025a0:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4025a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4025a4:	2b00      	cmp	r3, #0
  4025a6:	d1d4      	bne.n	402552 <xTaskIncrementTick+0xa6>
  4025a8:	e7d6      	b.n	402558 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  4025aa:	4a0d      	ldr	r2, [pc, #52]	; (4025e0 <xTaskIncrementTick+0x134>)
  4025ac:	6813      	ldr	r3, [r2, #0]
  4025ae:	3301      	adds	r3, #1
  4025b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4025b2:	4b0c      	ldr	r3, [pc, #48]	; (4025e4 <xTaskIncrementTick+0x138>)
  4025b4:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4025b6:	2400      	movs	r4, #0
  4025b8:	e7b4      	b.n	402524 <xTaskIncrementTick+0x78>
  4025ba:	bf00      	nop
  4025bc:	20400ce0 	.word	0x20400ce0
  4025c0:	20400d60 	.word	0x20400d60
  4025c4:	20400c6c 	.word	0x20400c6c
  4025c8:	20400c70 	.word	0x20400c70
  4025cc:	20400d1c 	.word	0x20400d1c
  4025d0:	0040214d 	.word	0x0040214d
  4025d4:	20400d18 	.word	0x20400d18
  4025d8:	20400c68 	.word	0x20400c68
  4025dc:	20400c74 	.word	0x20400c74
  4025e0:	20400cdc 	.word	0x20400cdc
  4025e4:	004033a9 	.word	0x004033a9
  4025e8:	20400d64 	.word	0x20400d64
  4025ec:	20400cec 	.word	0x20400cec
  4025f0:	00401461 	.word	0x00401461
  4025f4:	004014ad 	.word	0x004014ad

004025f8 <xTaskResumeAll>:
{
  4025f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4025fc:	4b38      	ldr	r3, [pc, #224]	; (4026e0 <xTaskResumeAll+0xe8>)
  4025fe:	681b      	ldr	r3, [r3, #0]
  402600:	b953      	cbnz	r3, 402618 <xTaskResumeAll+0x20>
  402602:	f04f 0380 	mov.w	r3, #128	; 0x80
  402606:	b672      	cpsid	i
  402608:	f383 8811 	msr	BASEPRI, r3
  40260c:	f3bf 8f6f 	isb	sy
  402610:	f3bf 8f4f 	dsb	sy
  402614:	b662      	cpsie	i
  402616:	e7fe      	b.n	402616 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402618:	4b32      	ldr	r3, [pc, #200]	; (4026e4 <xTaskResumeAll+0xec>)
  40261a:	4798      	blx	r3
		--uxSchedulerSuspended;
  40261c:	4b30      	ldr	r3, [pc, #192]	; (4026e0 <xTaskResumeAll+0xe8>)
  40261e:	681a      	ldr	r2, [r3, #0]
  402620:	3a01      	subs	r2, #1
  402622:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402624:	681b      	ldr	r3, [r3, #0]
  402626:	2b00      	cmp	r3, #0
  402628:	d155      	bne.n	4026d6 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40262a:	4b2f      	ldr	r3, [pc, #188]	; (4026e8 <xTaskResumeAll+0xf0>)
  40262c:	681b      	ldr	r3, [r3, #0]
  40262e:	2b00      	cmp	r3, #0
  402630:	d132      	bne.n	402698 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  402632:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402634:	4b2d      	ldr	r3, [pc, #180]	; (4026ec <xTaskResumeAll+0xf4>)
  402636:	4798      	blx	r3
}
  402638:	4620      	mov	r0, r4
  40263a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40263e:	68fb      	ldr	r3, [r7, #12]
  402640:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402642:	f104 0018 	add.w	r0, r4, #24
  402646:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402648:	f104 0804 	add.w	r8, r4, #4
  40264c:	4640      	mov	r0, r8
  40264e:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402650:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402652:	682a      	ldr	r2, [r5, #0]
  402654:	2301      	movs	r3, #1
  402656:	4083      	lsls	r3, r0
  402658:	4313      	orrs	r3, r2
  40265a:	602b      	str	r3, [r5, #0]
  40265c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402660:	4641      	mov	r1, r8
  402662:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402666:	4b22      	ldr	r3, [pc, #136]	; (4026f0 <xTaskResumeAll+0xf8>)
  402668:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40266a:	4b22      	ldr	r3, [pc, #136]	; (4026f4 <xTaskResumeAll+0xfc>)
  40266c:	681b      	ldr	r3, [r3, #0]
  40266e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402672:	429a      	cmp	r2, r3
  402674:	d20c      	bcs.n	402690 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402676:	683b      	ldr	r3, [r7, #0]
  402678:	2b00      	cmp	r3, #0
  40267a:	d1e0      	bne.n	40263e <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  40267c:	4b1e      	ldr	r3, [pc, #120]	; (4026f8 <xTaskResumeAll+0x100>)
  40267e:	681b      	ldr	r3, [r3, #0]
  402680:	b1db      	cbz	r3, 4026ba <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402682:	4b1d      	ldr	r3, [pc, #116]	; (4026f8 <xTaskResumeAll+0x100>)
  402684:	681b      	ldr	r3, [r3, #0]
  402686:	b1c3      	cbz	r3, 4026ba <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402688:	4e1c      	ldr	r6, [pc, #112]	; (4026fc <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  40268a:	4d1d      	ldr	r5, [pc, #116]	; (402700 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  40268c:	4c1a      	ldr	r4, [pc, #104]	; (4026f8 <xTaskResumeAll+0x100>)
  40268e:	e00e      	b.n	4026ae <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402690:	2201      	movs	r2, #1
  402692:	4b1b      	ldr	r3, [pc, #108]	; (402700 <xTaskResumeAll+0x108>)
  402694:	601a      	str	r2, [r3, #0]
  402696:	e7ee      	b.n	402676 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402698:	4f1a      	ldr	r7, [pc, #104]	; (402704 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40269a:	4e1b      	ldr	r6, [pc, #108]	; (402708 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  40269c:	4d1b      	ldr	r5, [pc, #108]	; (40270c <xTaskResumeAll+0x114>)
  40269e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402714 <xTaskResumeAll+0x11c>
  4026a2:	e7e8      	b.n	402676 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  4026a4:	6823      	ldr	r3, [r4, #0]
  4026a6:	3b01      	subs	r3, #1
  4026a8:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4026aa:	6823      	ldr	r3, [r4, #0]
  4026ac:	b12b      	cbz	r3, 4026ba <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  4026ae:	47b0      	blx	r6
  4026b0:	2800      	cmp	r0, #0
  4026b2:	d0f7      	beq.n	4026a4 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  4026b4:	2301      	movs	r3, #1
  4026b6:	602b      	str	r3, [r5, #0]
  4026b8:	e7f4      	b.n	4026a4 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  4026ba:	4b11      	ldr	r3, [pc, #68]	; (402700 <xTaskResumeAll+0x108>)
  4026bc:	681b      	ldr	r3, [r3, #0]
  4026be:	2b01      	cmp	r3, #1
  4026c0:	d10b      	bne.n	4026da <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  4026c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4026c6:	4b12      	ldr	r3, [pc, #72]	; (402710 <xTaskResumeAll+0x118>)
  4026c8:	601a      	str	r2, [r3, #0]
  4026ca:	f3bf 8f4f 	dsb	sy
  4026ce:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4026d2:	2401      	movs	r4, #1
  4026d4:	e7ae      	b.n	402634 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4026d6:	2400      	movs	r4, #0
  4026d8:	e7ac      	b.n	402634 <xTaskResumeAll+0x3c>
  4026da:	2400      	movs	r4, #0
  4026dc:	e7aa      	b.n	402634 <xTaskResumeAll+0x3c>
  4026de:	bf00      	nop
  4026e0:	20400ce0 	.word	0x20400ce0
  4026e4:	00401591 	.word	0x00401591
  4026e8:	20400cd8 	.word	0x20400cd8
  4026ec:	004015dd 	.word	0x004015dd
  4026f0:	00401461 	.word	0x00401461
  4026f4:	20400c68 	.word	0x20400c68
  4026f8:	20400cdc 	.word	0x20400cdc
  4026fc:	004024ad 	.word	0x004024ad
  402700:	20400d64 	.word	0x20400d64
  402704:	20400d20 	.word	0x20400d20
  402708:	004014ad 	.word	0x004014ad
  40270c:	20400cec 	.word	0x20400cec
  402710:	e000ed04 	.word	0xe000ed04
  402714:	20400c74 	.word	0x20400c74

00402718 <vTaskDelay>:
	{
  402718:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40271a:	2800      	cmp	r0, #0
  40271c:	d029      	beq.n	402772 <vTaskDelay+0x5a>
  40271e:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402720:	4b18      	ldr	r3, [pc, #96]	; (402784 <vTaskDelay+0x6c>)
  402722:	681b      	ldr	r3, [r3, #0]
  402724:	b153      	cbz	r3, 40273c <vTaskDelay+0x24>
  402726:	f04f 0380 	mov.w	r3, #128	; 0x80
  40272a:	b672      	cpsid	i
  40272c:	f383 8811 	msr	BASEPRI, r3
  402730:	f3bf 8f6f 	isb	sy
  402734:	f3bf 8f4f 	dsb	sy
  402738:	b662      	cpsie	i
  40273a:	e7fe      	b.n	40273a <vTaskDelay+0x22>
			vTaskSuspendAll();
  40273c:	4b12      	ldr	r3, [pc, #72]	; (402788 <vTaskDelay+0x70>)
  40273e:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  402740:	4b12      	ldr	r3, [pc, #72]	; (40278c <vTaskDelay+0x74>)
  402742:	681b      	ldr	r3, [r3, #0]
  402744:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402746:	4b12      	ldr	r3, [pc, #72]	; (402790 <vTaskDelay+0x78>)
  402748:	6818      	ldr	r0, [r3, #0]
  40274a:	3004      	adds	r0, #4
  40274c:	4b11      	ldr	r3, [pc, #68]	; (402794 <vTaskDelay+0x7c>)
  40274e:	4798      	blx	r3
  402750:	b948      	cbnz	r0, 402766 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402752:	4b0f      	ldr	r3, [pc, #60]	; (402790 <vTaskDelay+0x78>)
  402754:	681a      	ldr	r2, [r3, #0]
  402756:	4910      	ldr	r1, [pc, #64]	; (402798 <vTaskDelay+0x80>)
  402758:	680b      	ldr	r3, [r1, #0]
  40275a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40275c:	2201      	movs	r2, #1
  40275e:	4082      	lsls	r2, r0
  402760:	ea23 0302 	bic.w	r3, r3, r2
  402764:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402766:	4620      	mov	r0, r4
  402768:	4b0c      	ldr	r3, [pc, #48]	; (40279c <vTaskDelay+0x84>)
  40276a:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40276c:	4b0c      	ldr	r3, [pc, #48]	; (4027a0 <vTaskDelay+0x88>)
  40276e:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402770:	b938      	cbnz	r0, 402782 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  402772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402776:	4b0b      	ldr	r3, [pc, #44]	; (4027a4 <vTaskDelay+0x8c>)
  402778:	601a      	str	r2, [r3, #0]
  40277a:	f3bf 8f4f 	dsb	sy
  40277e:	f3bf 8f6f 	isb	sy
  402782:	bd10      	pop	{r4, pc}
  402784:	20400ce0 	.word	0x20400ce0
  402788:	00402491 	.word	0x00402491
  40278c:	20400d60 	.word	0x20400d60
  402790:	20400c68 	.word	0x20400c68
  402794:	004014ad 	.word	0x004014ad
  402798:	20400cec 	.word	0x20400cec
  40279c:	00402179 	.word	0x00402179
  4027a0:	004025f9 	.word	0x004025f9
  4027a4:	e000ed04 	.word	0xe000ed04

004027a8 <prvIdleTask>:
{
  4027a8:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  4027aa:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402834 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4027ae:	4e19      	ldr	r6, [pc, #100]	; (402814 <prvIdleTask+0x6c>)
				taskYIELD();
  4027b0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402838 <prvIdleTask+0x90>
  4027b4:	e02a      	b.n	40280c <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4027b6:	4b18      	ldr	r3, [pc, #96]	; (402818 <prvIdleTask+0x70>)
  4027b8:	681b      	ldr	r3, [r3, #0]
  4027ba:	2b01      	cmp	r3, #1
  4027bc:	d81e      	bhi.n	4027fc <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4027be:	682b      	ldr	r3, [r5, #0]
  4027c0:	2b00      	cmp	r3, #0
  4027c2:	d0f8      	beq.n	4027b6 <prvIdleTask+0xe>
			vTaskSuspendAll();
  4027c4:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4027c6:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  4027c8:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  4027ca:	2c00      	cmp	r4, #0
  4027cc:	d0f7      	beq.n	4027be <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  4027ce:	4b13      	ldr	r3, [pc, #76]	; (40281c <prvIdleTask+0x74>)
  4027d0:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4027d2:	68f3      	ldr	r3, [r6, #12]
  4027d4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4027d6:	1d20      	adds	r0, r4, #4
  4027d8:	4b11      	ldr	r3, [pc, #68]	; (402820 <prvIdleTask+0x78>)
  4027da:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4027dc:	4a11      	ldr	r2, [pc, #68]	; (402824 <prvIdleTask+0x7c>)
  4027de:	6813      	ldr	r3, [r2, #0]
  4027e0:	3b01      	subs	r3, #1
  4027e2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4027e4:	682b      	ldr	r3, [r5, #0]
  4027e6:	3b01      	subs	r3, #1
  4027e8:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4027ea:	4b0f      	ldr	r3, [pc, #60]	; (402828 <prvIdleTask+0x80>)
  4027ec:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4027ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4027f0:	f8df a048 	ldr.w	sl, [pc, #72]	; 40283c <prvIdleTask+0x94>
  4027f4:	47d0      	blx	sl
		vPortFree( pxTCB );
  4027f6:	4620      	mov	r0, r4
  4027f8:	47d0      	blx	sl
  4027fa:	e7e0      	b.n	4027be <prvIdleTask+0x16>
				taskYIELD();
  4027fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402800:	f8c9 3000 	str.w	r3, [r9]
  402804:	f3bf 8f4f 	dsb	sy
  402808:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40280c:	4d07      	ldr	r5, [pc, #28]	; (40282c <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  40280e:	4f08      	ldr	r7, [pc, #32]	; (402830 <prvIdleTask+0x88>)
  402810:	e7d5      	b.n	4027be <prvIdleTask+0x16>
  402812:	bf00      	nop
  402814:	20400d4c 	.word	0x20400d4c
  402818:	20400c74 	.word	0x20400c74
  40281c:	00401591 	.word	0x00401591
  402820:	004014ad 	.word	0x004014ad
  402824:	20400cd8 	.word	0x20400cd8
  402828:	004015dd 	.word	0x004015dd
  40282c:	20400ce8 	.word	0x20400ce8
  402830:	004025f9 	.word	0x004025f9
  402834:	00402491 	.word	0x00402491
  402838:	e000ed04 	.word	0xe000ed04
  40283c:	0040181d 	.word	0x0040181d

00402840 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402840:	4b2d      	ldr	r3, [pc, #180]	; (4028f8 <vTaskSwitchContext+0xb8>)
  402842:	681b      	ldr	r3, [r3, #0]
  402844:	2b00      	cmp	r3, #0
  402846:	d12c      	bne.n	4028a2 <vTaskSwitchContext+0x62>
{
  402848:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40284a:	2200      	movs	r2, #0
  40284c:	4b2b      	ldr	r3, [pc, #172]	; (4028fc <vTaskSwitchContext+0xbc>)
  40284e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402850:	4b2b      	ldr	r3, [pc, #172]	; (402900 <vTaskSwitchContext+0xc0>)
  402852:	681b      	ldr	r3, [r3, #0]
  402854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402856:	681a      	ldr	r2, [r3, #0]
  402858:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40285c:	d103      	bne.n	402866 <vTaskSwitchContext+0x26>
  40285e:	685a      	ldr	r2, [r3, #4]
  402860:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402864:	d021      	beq.n	4028aa <vTaskSwitchContext+0x6a>
  402866:	4b26      	ldr	r3, [pc, #152]	; (402900 <vTaskSwitchContext+0xc0>)
  402868:	6818      	ldr	r0, [r3, #0]
  40286a:	6819      	ldr	r1, [r3, #0]
  40286c:	3134      	adds	r1, #52	; 0x34
  40286e:	4b25      	ldr	r3, [pc, #148]	; (402904 <vTaskSwitchContext+0xc4>)
  402870:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402872:	4b25      	ldr	r3, [pc, #148]	; (402908 <vTaskSwitchContext+0xc8>)
  402874:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402876:	fab3 f383 	clz	r3, r3
  40287a:	b2db      	uxtb	r3, r3
  40287c:	f1c3 031f 	rsb	r3, r3, #31
  402880:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402884:	4a21      	ldr	r2, [pc, #132]	; (40290c <vTaskSwitchContext+0xcc>)
  402886:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40288a:	b9ba      	cbnz	r2, 4028bc <vTaskSwitchContext+0x7c>
	__asm volatile
  40288c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402890:	b672      	cpsid	i
  402892:	f383 8811 	msr	BASEPRI, r3
  402896:	f3bf 8f6f 	isb	sy
  40289a:	f3bf 8f4f 	dsb	sy
  40289e:	b662      	cpsie	i
  4028a0:	e7fe      	b.n	4028a0 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4028a2:	2201      	movs	r2, #1
  4028a4:	4b15      	ldr	r3, [pc, #84]	; (4028fc <vTaskSwitchContext+0xbc>)
  4028a6:	601a      	str	r2, [r3, #0]
  4028a8:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4028aa:	689a      	ldr	r2, [r3, #8]
  4028ac:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4028b0:	d1d9      	bne.n	402866 <vTaskSwitchContext+0x26>
  4028b2:	68db      	ldr	r3, [r3, #12]
  4028b4:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4028b8:	d1d5      	bne.n	402866 <vTaskSwitchContext+0x26>
  4028ba:	e7da      	b.n	402872 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4028bc:	4a13      	ldr	r2, [pc, #76]	; (40290c <vTaskSwitchContext+0xcc>)
  4028be:	0099      	lsls	r1, r3, #2
  4028c0:	18c8      	adds	r0, r1, r3
  4028c2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4028c6:	6844      	ldr	r4, [r0, #4]
  4028c8:	6864      	ldr	r4, [r4, #4]
  4028ca:	6044      	str	r4, [r0, #4]
  4028cc:	4419      	add	r1, r3
  4028ce:	4602      	mov	r2, r0
  4028d0:	3208      	adds	r2, #8
  4028d2:	4294      	cmp	r4, r2
  4028d4:	d009      	beq.n	4028ea <vTaskSwitchContext+0xaa>
  4028d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4028da:	4a0c      	ldr	r2, [pc, #48]	; (40290c <vTaskSwitchContext+0xcc>)
  4028dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4028e0:	685b      	ldr	r3, [r3, #4]
  4028e2:	68da      	ldr	r2, [r3, #12]
  4028e4:	4b06      	ldr	r3, [pc, #24]	; (402900 <vTaskSwitchContext+0xc0>)
  4028e6:	601a      	str	r2, [r3, #0]
  4028e8:	bd10      	pop	{r4, pc}
  4028ea:	6860      	ldr	r0, [r4, #4]
  4028ec:	4a07      	ldr	r2, [pc, #28]	; (40290c <vTaskSwitchContext+0xcc>)
  4028ee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4028f2:	6050      	str	r0, [r2, #4]
  4028f4:	e7ef      	b.n	4028d6 <vTaskSwitchContext+0x96>
  4028f6:	bf00      	nop
  4028f8:	20400ce0 	.word	0x20400ce0
  4028fc:	20400d64 	.word	0x20400d64
  402900:	20400c68 	.word	0x20400c68
  402904:	00403391 	.word	0x00403391
  402908:	20400cec 	.word	0x20400cec
  40290c:	20400c74 	.word	0x20400c74

00402910 <vTaskPlaceOnEventList>:
{
  402910:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  402912:	b1e0      	cbz	r0, 40294e <vTaskPlaceOnEventList+0x3e>
  402914:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402916:	4d17      	ldr	r5, [pc, #92]	; (402974 <vTaskPlaceOnEventList+0x64>)
  402918:	6829      	ldr	r1, [r5, #0]
  40291a:	3118      	adds	r1, #24
  40291c:	4b16      	ldr	r3, [pc, #88]	; (402978 <vTaskPlaceOnEventList+0x68>)
  40291e:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402920:	6828      	ldr	r0, [r5, #0]
  402922:	3004      	adds	r0, #4
  402924:	4b15      	ldr	r3, [pc, #84]	; (40297c <vTaskPlaceOnEventList+0x6c>)
  402926:	4798      	blx	r3
  402928:	b940      	cbnz	r0, 40293c <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40292a:	682a      	ldr	r2, [r5, #0]
  40292c:	4914      	ldr	r1, [pc, #80]	; (402980 <vTaskPlaceOnEventList+0x70>)
  40292e:	680b      	ldr	r3, [r1, #0]
  402930:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402932:	2201      	movs	r2, #1
  402934:	4082      	lsls	r2, r0
  402936:	ea23 0302 	bic.w	r3, r3, r2
  40293a:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  40293c:	f1b4 3fff 	cmp.w	r4, #4294967295
  402940:	d010      	beq.n	402964 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  402942:	4b10      	ldr	r3, [pc, #64]	; (402984 <vTaskPlaceOnEventList+0x74>)
  402944:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402946:	4420      	add	r0, r4
  402948:	4b0f      	ldr	r3, [pc, #60]	; (402988 <vTaskPlaceOnEventList+0x78>)
  40294a:	4798      	blx	r3
  40294c:	bd38      	pop	{r3, r4, r5, pc}
  40294e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402952:	b672      	cpsid	i
  402954:	f383 8811 	msr	BASEPRI, r3
  402958:	f3bf 8f6f 	isb	sy
  40295c:	f3bf 8f4f 	dsb	sy
  402960:	b662      	cpsie	i
  402962:	e7fe      	b.n	402962 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402964:	4b03      	ldr	r3, [pc, #12]	; (402974 <vTaskPlaceOnEventList+0x64>)
  402966:	6819      	ldr	r1, [r3, #0]
  402968:	3104      	adds	r1, #4
  40296a:	4808      	ldr	r0, [pc, #32]	; (40298c <vTaskPlaceOnEventList+0x7c>)
  40296c:	4b08      	ldr	r3, [pc, #32]	; (402990 <vTaskPlaceOnEventList+0x80>)
  40296e:	4798      	blx	r3
  402970:	bd38      	pop	{r3, r4, r5, pc}
  402972:	bf00      	nop
  402974:	20400c68 	.word	0x20400c68
  402978:	00401479 	.word	0x00401479
  40297c:	004014ad 	.word	0x004014ad
  402980:	20400cec 	.word	0x20400cec
  402984:	20400d60 	.word	0x20400d60
  402988:	00402179 	.word	0x00402179
  40298c:	20400d38 	.word	0x20400d38
  402990:	00401461 	.word	0x00401461

00402994 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402994:	b1e8      	cbz	r0, 4029d2 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  402996:	b570      	push	{r4, r5, r6, lr}
  402998:	4615      	mov	r5, r2
  40299a:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40299c:	4e16      	ldr	r6, [pc, #88]	; (4029f8 <vTaskPlaceOnEventListRestricted+0x64>)
  40299e:	6831      	ldr	r1, [r6, #0]
  4029a0:	3118      	adds	r1, #24
  4029a2:	4b16      	ldr	r3, [pc, #88]	; (4029fc <vTaskPlaceOnEventListRestricted+0x68>)
  4029a4:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4029a6:	6830      	ldr	r0, [r6, #0]
  4029a8:	3004      	adds	r0, #4
  4029aa:	4b15      	ldr	r3, [pc, #84]	; (402a00 <vTaskPlaceOnEventListRestricted+0x6c>)
  4029ac:	4798      	blx	r3
  4029ae:	b940      	cbnz	r0, 4029c2 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4029b0:	6832      	ldr	r2, [r6, #0]
  4029b2:	4914      	ldr	r1, [pc, #80]	; (402a04 <vTaskPlaceOnEventListRestricted+0x70>)
  4029b4:	680b      	ldr	r3, [r1, #0]
  4029b6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4029b8:	2201      	movs	r2, #1
  4029ba:	4082      	lsls	r2, r0
  4029bc:	ea23 0302 	bic.w	r3, r3, r2
  4029c0:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  4029c2:	2d01      	cmp	r5, #1
  4029c4:	d010      	beq.n	4029e8 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  4029c6:	4b10      	ldr	r3, [pc, #64]	; (402a08 <vTaskPlaceOnEventListRestricted+0x74>)
  4029c8:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4029ca:	4420      	add	r0, r4
  4029cc:	4b0f      	ldr	r3, [pc, #60]	; (402a0c <vTaskPlaceOnEventListRestricted+0x78>)
  4029ce:	4798      	blx	r3
  4029d0:	bd70      	pop	{r4, r5, r6, pc}
  4029d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029d6:	b672      	cpsid	i
  4029d8:	f383 8811 	msr	BASEPRI, r3
  4029dc:	f3bf 8f6f 	isb	sy
  4029e0:	f3bf 8f4f 	dsb	sy
  4029e4:	b662      	cpsie	i
  4029e6:	e7fe      	b.n	4029e6 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4029e8:	4b03      	ldr	r3, [pc, #12]	; (4029f8 <vTaskPlaceOnEventListRestricted+0x64>)
  4029ea:	6819      	ldr	r1, [r3, #0]
  4029ec:	3104      	adds	r1, #4
  4029ee:	4808      	ldr	r0, [pc, #32]	; (402a10 <vTaskPlaceOnEventListRestricted+0x7c>)
  4029f0:	4b02      	ldr	r3, [pc, #8]	; (4029fc <vTaskPlaceOnEventListRestricted+0x68>)
  4029f2:	4798      	blx	r3
  4029f4:	bd70      	pop	{r4, r5, r6, pc}
  4029f6:	bf00      	nop
  4029f8:	20400c68 	.word	0x20400c68
  4029fc:	00401461 	.word	0x00401461
  402a00:	004014ad 	.word	0x004014ad
  402a04:	20400cec 	.word	0x20400cec
  402a08:	20400d60 	.word	0x20400d60
  402a0c:	00402179 	.word	0x00402179
  402a10:	20400d38 	.word	0x20400d38

00402a14 <xTaskRemoveFromEventList>:
{
  402a14:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402a16:	68c3      	ldr	r3, [r0, #12]
  402a18:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402a1a:	b324      	cbz	r4, 402a66 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402a1c:	f104 0518 	add.w	r5, r4, #24
  402a20:	4628      	mov	r0, r5
  402a22:	4b1a      	ldr	r3, [pc, #104]	; (402a8c <xTaskRemoveFromEventList+0x78>)
  402a24:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402a26:	4b1a      	ldr	r3, [pc, #104]	; (402a90 <xTaskRemoveFromEventList+0x7c>)
  402a28:	681b      	ldr	r3, [r3, #0]
  402a2a:	bb3b      	cbnz	r3, 402a7c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402a2c:	1d25      	adds	r5, r4, #4
  402a2e:	4628      	mov	r0, r5
  402a30:	4b16      	ldr	r3, [pc, #88]	; (402a8c <xTaskRemoveFromEventList+0x78>)
  402a32:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402a34:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402a36:	4a17      	ldr	r2, [pc, #92]	; (402a94 <xTaskRemoveFromEventList+0x80>)
  402a38:	6811      	ldr	r1, [r2, #0]
  402a3a:	2301      	movs	r3, #1
  402a3c:	4083      	lsls	r3, r0
  402a3e:	430b      	orrs	r3, r1
  402a40:	6013      	str	r3, [r2, #0]
  402a42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402a46:	4629      	mov	r1, r5
  402a48:	4b13      	ldr	r3, [pc, #76]	; (402a98 <xTaskRemoveFromEventList+0x84>)
  402a4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402a4e:	4b13      	ldr	r3, [pc, #76]	; (402a9c <xTaskRemoveFromEventList+0x88>)
  402a50:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402a52:	4b13      	ldr	r3, [pc, #76]	; (402aa0 <xTaskRemoveFromEventList+0x8c>)
  402a54:	681b      	ldr	r3, [r3, #0]
  402a56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a5a:	429a      	cmp	r2, r3
  402a5c:	d913      	bls.n	402a86 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402a5e:	2001      	movs	r0, #1
  402a60:	4b10      	ldr	r3, [pc, #64]	; (402aa4 <xTaskRemoveFromEventList+0x90>)
  402a62:	6018      	str	r0, [r3, #0]
  402a64:	bd38      	pop	{r3, r4, r5, pc}
  402a66:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a6a:	b672      	cpsid	i
  402a6c:	f383 8811 	msr	BASEPRI, r3
  402a70:	f3bf 8f6f 	isb	sy
  402a74:	f3bf 8f4f 	dsb	sy
  402a78:	b662      	cpsie	i
  402a7a:	e7fe      	b.n	402a7a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402a7c:	4629      	mov	r1, r5
  402a7e:	480a      	ldr	r0, [pc, #40]	; (402aa8 <xTaskRemoveFromEventList+0x94>)
  402a80:	4b06      	ldr	r3, [pc, #24]	; (402a9c <xTaskRemoveFromEventList+0x88>)
  402a82:	4798      	blx	r3
  402a84:	e7e5      	b.n	402a52 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402a86:	2000      	movs	r0, #0
}
  402a88:	bd38      	pop	{r3, r4, r5, pc}
  402a8a:	bf00      	nop
  402a8c:	004014ad 	.word	0x004014ad
  402a90:	20400ce0 	.word	0x20400ce0
  402a94:	20400cec 	.word	0x20400cec
  402a98:	20400c74 	.word	0x20400c74
  402a9c:	00401461 	.word	0x00401461
  402aa0:	20400c68 	.word	0x20400c68
  402aa4:	20400d64 	.word	0x20400d64
  402aa8:	20400d20 	.word	0x20400d20

00402aac <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402aac:	b130      	cbz	r0, 402abc <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402aae:	4a09      	ldr	r2, [pc, #36]	; (402ad4 <vTaskSetTimeOutState+0x28>)
  402ab0:	6812      	ldr	r2, [r2, #0]
  402ab2:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402ab4:	4a08      	ldr	r2, [pc, #32]	; (402ad8 <vTaskSetTimeOutState+0x2c>)
  402ab6:	6812      	ldr	r2, [r2, #0]
  402ab8:	6042      	str	r2, [r0, #4]
  402aba:	4770      	bx	lr
  402abc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ac0:	b672      	cpsid	i
  402ac2:	f383 8811 	msr	BASEPRI, r3
  402ac6:	f3bf 8f6f 	isb	sy
  402aca:	f3bf 8f4f 	dsb	sy
  402ace:	b662      	cpsie	i
  402ad0:	e7fe      	b.n	402ad0 <vTaskSetTimeOutState+0x24>
  402ad2:	bf00      	nop
  402ad4:	20400d1c 	.word	0x20400d1c
  402ad8:	20400d60 	.word	0x20400d60

00402adc <xTaskCheckForTimeOut>:
{
  402adc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402ade:	b1c0      	cbz	r0, 402b12 <xTaskCheckForTimeOut+0x36>
  402ae0:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402ae2:	b309      	cbz	r1, 402b28 <xTaskCheckForTimeOut+0x4c>
  402ae4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402ae6:	4b1d      	ldr	r3, [pc, #116]	; (402b5c <xTaskCheckForTimeOut+0x80>)
  402ae8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402aea:	4b1d      	ldr	r3, [pc, #116]	; (402b60 <xTaskCheckForTimeOut+0x84>)
  402aec:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402aee:	682b      	ldr	r3, [r5, #0]
  402af0:	f1b3 3fff 	cmp.w	r3, #4294967295
  402af4:	d02e      	beq.n	402b54 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402af6:	491b      	ldr	r1, [pc, #108]	; (402b64 <xTaskCheckForTimeOut+0x88>)
  402af8:	6809      	ldr	r1, [r1, #0]
  402afa:	6820      	ldr	r0, [r4, #0]
  402afc:	4288      	cmp	r0, r1
  402afe:	d002      	beq.n	402b06 <xTaskCheckForTimeOut+0x2a>
  402b00:	6861      	ldr	r1, [r4, #4]
  402b02:	428a      	cmp	r2, r1
  402b04:	d228      	bcs.n	402b58 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402b06:	6861      	ldr	r1, [r4, #4]
  402b08:	1a50      	subs	r0, r2, r1
  402b0a:	4283      	cmp	r3, r0
  402b0c:	d817      	bhi.n	402b3e <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402b0e:	2401      	movs	r4, #1
  402b10:	e01c      	b.n	402b4c <xTaskCheckForTimeOut+0x70>
  402b12:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b16:	b672      	cpsid	i
  402b18:	f383 8811 	msr	BASEPRI, r3
  402b1c:	f3bf 8f6f 	isb	sy
  402b20:	f3bf 8f4f 	dsb	sy
  402b24:	b662      	cpsie	i
  402b26:	e7fe      	b.n	402b26 <xTaskCheckForTimeOut+0x4a>
  402b28:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b2c:	b672      	cpsid	i
  402b2e:	f383 8811 	msr	BASEPRI, r3
  402b32:	f3bf 8f6f 	isb	sy
  402b36:	f3bf 8f4f 	dsb	sy
  402b3a:	b662      	cpsie	i
  402b3c:	e7fe      	b.n	402b3c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402b3e:	1a9b      	subs	r3, r3, r2
  402b40:	440b      	add	r3, r1
  402b42:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402b44:	4620      	mov	r0, r4
  402b46:	4b08      	ldr	r3, [pc, #32]	; (402b68 <xTaskCheckForTimeOut+0x8c>)
  402b48:	4798      	blx	r3
			xReturn = pdFALSE;
  402b4a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402b4c:	4b07      	ldr	r3, [pc, #28]	; (402b6c <xTaskCheckForTimeOut+0x90>)
  402b4e:	4798      	blx	r3
}
  402b50:	4620      	mov	r0, r4
  402b52:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402b54:	2400      	movs	r4, #0
  402b56:	e7f9      	b.n	402b4c <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402b58:	2401      	movs	r4, #1
  402b5a:	e7f7      	b.n	402b4c <xTaskCheckForTimeOut+0x70>
  402b5c:	00401591 	.word	0x00401591
  402b60:	20400d60 	.word	0x20400d60
  402b64:	20400d1c 	.word	0x20400d1c
  402b68:	00402aad 	.word	0x00402aad
  402b6c:	004015dd 	.word	0x004015dd

00402b70 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402b70:	2201      	movs	r2, #1
  402b72:	4b01      	ldr	r3, [pc, #4]	; (402b78 <vTaskMissedYield+0x8>)
  402b74:	601a      	str	r2, [r3, #0]
  402b76:	4770      	bx	lr
  402b78:	20400d64 	.word	0x20400d64

00402b7c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402b7c:	4b05      	ldr	r3, [pc, #20]	; (402b94 <xTaskGetSchedulerState+0x18>)
  402b7e:	681b      	ldr	r3, [r3, #0]
  402b80:	b133      	cbz	r3, 402b90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402b82:	4b05      	ldr	r3, [pc, #20]	; (402b98 <xTaskGetSchedulerState+0x1c>)
  402b84:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402b86:	2b00      	cmp	r3, #0
  402b88:	bf0c      	ite	eq
  402b8a:	2002      	moveq	r0, #2
  402b8c:	2000      	movne	r0, #0
  402b8e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402b90:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  402b92:	4770      	bx	lr
  402b94:	20400d34 	.word	0x20400d34
  402b98:	20400ce0 	.word	0x20400ce0

00402b9c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402b9c:	2800      	cmp	r0, #0
  402b9e:	d044      	beq.n	402c2a <vTaskPriorityInherit+0x8e>
	{
  402ba0:	b538      	push	{r3, r4, r5, lr}
  402ba2:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402ba4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402ba6:	4921      	ldr	r1, [pc, #132]	; (402c2c <vTaskPriorityInherit+0x90>)
  402ba8:	6809      	ldr	r1, [r1, #0]
  402baa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402bac:	428a      	cmp	r2, r1
  402bae:	d214      	bcs.n	402bda <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402bb0:	6981      	ldr	r1, [r0, #24]
  402bb2:	2900      	cmp	r1, #0
  402bb4:	db05      	blt.n	402bc2 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402bb6:	491d      	ldr	r1, [pc, #116]	; (402c2c <vTaskPriorityInherit+0x90>)
  402bb8:	6809      	ldr	r1, [r1, #0]
  402bba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402bbc:	f1c1 0105 	rsb	r1, r1, #5
  402bc0:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402bc2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402bc6:	491a      	ldr	r1, [pc, #104]	; (402c30 <vTaskPriorityInherit+0x94>)
  402bc8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402bcc:	6961      	ldr	r1, [r4, #20]
  402bce:	4291      	cmp	r1, r2
  402bd0:	d004      	beq.n	402bdc <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402bd2:	4a16      	ldr	r2, [pc, #88]	; (402c2c <vTaskPriorityInherit+0x90>)
  402bd4:	6812      	ldr	r2, [r2, #0]
  402bd6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402bd8:	62e2      	str	r2, [r4, #44]	; 0x2c
  402bda:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402bdc:	1d25      	adds	r5, r4, #4
  402bde:	4628      	mov	r0, r5
  402be0:	4b14      	ldr	r3, [pc, #80]	; (402c34 <vTaskPriorityInherit+0x98>)
  402be2:	4798      	blx	r3
  402be4:	b970      	cbnz	r0, 402c04 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402be6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402be8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402bec:	4a10      	ldr	r2, [pc, #64]	; (402c30 <vTaskPriorityInherit+0x94>)
  402bee:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402bf2:	b93a      	cbnz	r2, 402c04 <vTaskPriorityInherit+0x68>
  402bf4:	4810      	ldr	r0, [pc, #64]	; (402c38 <vTaskPriorityInherit+0x9c>)
  402bf6:	6802      	ldr	r2, [r0, #0]
  402bf8:	2101      	movs	r1, #1
  402bfa:	fa01 f303 	lsl.w	r3, r1, r3
  402bfe:	ea22 0303 	bic.w	r3, r2, r3
  402c02:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402c04:	4b09      	ldr	r3, [pc, #36]	; (402c2c <vTaskPriorityInherit+0x90>)
  402c06:	681b      	ldr	r3, [r3, #0]
  402c08:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402c0a:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402c0c:	4a0a      	ldr	r2, [pc, #40]	; (402c38 <vTaskPriorityInherit+0x9c>)
  402c0e:	6811      	ldr	r1, [r2, #0]
  402c10:	2301      	movs	r3, #1
  402c12:	4083      	lsls	r3, r0
  402c14:	430b      	orrs	r3, r1
  402c16:	6013      	str	r3, [r2, #0]
  402c18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402c1c:	4629      	mov	r1, r5
  402c1e:	4b04      	ldr	r3, [pc, #16]	; (402c30 <vTaskPriorityInherit+0x94>)
  402c20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402c24:	4b05      	ldr	r3, [pc, #20]	; (402c3c <vTaskPriorityInherit+0xa0>)
  402c26:	4798      	blx	r3
  402c28:	bd38      	pop	{r3, r4, r5, pc}
  402c2a:	4770      	bx	lr
  402c2c:	20400c68 	.word	0x20400c68
  402c30:	20400c74 	.word	0x20400c74
  402c34:	004014ad 	.word	0x004014ad
  402c38:	20400cec 	.word	0x20400cec
  402c3c:	00401461 	.word	0x00401461

00402c40 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402c40:	2800      	cmp	r0, #0
  402c42:	d04d      	beq.n	402ce0 <xTaskPriorityDisinherit+0xa0>
	{
  402c44:	b538      	push	{r3, r4, r5, lr}
  402c46:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402c48:	4a27      	ldr	r2, [pc, #156]	; (402ce8 <xTaskPriorityDisinherit+0xa8>)
  402c4a:	6812      	ldr	r2, [r2, #0]
  402c4c:	4290      	cmp	r0, r2
  402c4e:	d00a      	beq.n	402c66 <xTaskPriorityDisinherit+0x26>
  402c50:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c54:	b672      	cpsid	i
  402c56:	f383 8811 	msr	BASEPRI, r3
  402c5a:	f3bf 8f6f 	isb	sy
  402c5e:	f3bf 8f4f 	dsb	sy
  402c62:	b662      	cpsie	i
  402c64:	e7fe      	b.n	402c64 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402c66:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402c68:	b952      	cbnz	r2, 402c80 <xTaskPriorityDisinherit+0x40>
  402c6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c6e:	b672      	cpsid	i
  402c70:	f383 8811 	msr	BASEPRI, r3
  402c74:	f3bf 8f6f 	isb	sy
  402c78:	f3bf 8f4f 	dsb	sy
  402c7c:	b662      	cpsie	i
  402c7e:	e7fe      	b.n	402c7e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402c80:	3a01      	subs	r2, #1
  402c82:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402c84:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402c86:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402c88:	4288      	cmp	r0, r1
  402c8a:	d02b      	beq.n	402ce4 <xTaskPriorityDisinherit+0xa4>
  402c8c:	bb52      	cbnz	r2, 402ce4 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402c8e:	1d25      	adds	r5, r4, #4
  402c90:	4628      	mov	r0, r5
  402c92:	4b16      	ldr	r3, [pc, #88]	; (402cec <xTaskPriorityDisinherit+0xac>)
  402c94:	4798      	blx	r3
  402c96:	b968      	cbnz	r0, 402cb4 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402c98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402c9a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402c9e:	4b14      	ldr	r3, [pc, #80]	; (402cf0 <xTaskPriorityDisinherit+0xb0>)
  402ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402ca4:	b933      	cbnz	r3, 402cb4 <xTaskPriorityDisinherit+0x74>
  402ca6:	4813      	ldr	r0, [pc, #76]	; (402cf4 <xTaskPriorityDisinherit+0xb4>)
  402ca8:	6803      	ldr	r3, [r0, #0]
  402caa:	2201      	movs	r2, #1
  402cac:	408a      	lsls	r2, r1
  402cae:	ea23 0302 	bic.w	r3, r3, r2
  402cb2:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402cb4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402cb6:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402cb8:	f1c0 0305 	rsb	r3, r0, #5
  402cbc:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402cbe:	4a0d      	ldr	r2, [pc, #52]	; (402cf4 <xTaskPriorityDisinherit+0xb4>)
  402cc0:	6811      	ldr	r1, [r2, #0]
  402cc2:	2401      	movs	r4, #1
  402cc4:	fa04 f300 	lsl.w	r3, r4, r0
  402cc8:	430b      	orrs	r3, r1
  402cca:	6013      	str	r3, [r2, #0]
  402ccc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402cd0:	4629      	mov	r1, r5
  402cd2:	4b07      	ldr	r3, [pc, #28]	; (402cf0 <xTaskPriorityDisinherit+0xb0>)
  402cd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402cd8:	4b07      	ldr	r3, [pc, #28]	; (402cf8 <xTaskPriorityDisinherit+0xb8>)
  402cda:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402cdc:	4620      	mov	r0, r4
  402cde:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402ce0:	2000      	movs	r0, #0
  402ce2:	4770      	bx	lr
  402ce4:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402ce6:	bd38      	pop	{r3, r4, r5, pc}
  402ce8:	20400c68 	.word	0x20400c68
  402cec:	004014ad 	.word	0x004014ad
  402cf0:	20400c74 	.word	0x20400c74
  402cf4:	20400cec 	.word	0x20400cec
  402cf8:	00401461 	.word	0x00401461

00402cfc <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402cfc:	4b05      	ldr	r3, [pc, #20]	; (402d14 <pvTaskIncrementMutexHeldCount+0x18>)
  402cfe:	681b      	ldr	r3, [r3, #0]
  402d00:	b123      	cbz	r3, 402d0c <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402d02:	4b04      	ldr	r3, [pc, #16]	; (402d14 <pvTaskIncrementMutexHeldCount+0x18>)
  402d04:	681a      	ldr	r2, [r3, #0]
  402d06:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402d08:	3301      	adds	r3, #1
  402d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402d0c:	4b01      	ldr	r3, [pc, #4]	; (402d14 <pvTaskIncrementMutexHeldCount+0x18>)
  402d0e:	6818      	ldr	r0, [r3, #0]
	}
  402d10:	4770      	bx	lr
  402d12:	bf00      	nop
  402d14:	20400c68 	.word	0x20400c68

00402d18 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402d18:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402d1a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402d1c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402d1e:	4291      	cmp	r1, r2
  402d20:	d80c      	bhi.n	402d3c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402d22:	1ad2      	subs	r2, r2, r3
  402d24:	6983      	ldr	r3, [r0, #24]
  402d26:	429a      	cmp	r2, r3
  402d28:	d301      	bcc.n	402d2e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402d2a:	2001      	movs	r0, #1
  402d2c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402d2e:	1d01      	adds	r1, r0, #4
  402d30:	4b09      	ldr	r3, [pc, #36]	; (402d58 <prvInsertTimerInActiveList+0x40>)
  402d32:	6818      	ldr	r0, [r3, #0]
  402d34:	4b09      	ldr	r3, [pc, #36]	; (402d5c <prvInsertTimerInActiveList+0x44>)
  402d36:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402d38:	2000      	movs	r0, #0
  402d3a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402d3c:	429a      	cmp	r2, r3
  402d3e:	d203      	bcs.n	402d48 <prvInsertTimerInActiveList+0x30>
  402d40:	4299      	cmp	r1, r3
  402d42:	d301      	bcc.n	402d48 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402d44:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402d46:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402d48:	1d01      	adds	r1, r0, #4
  402d4a:	4b05      	ldr	r3, [pc, #20]	; (402d60 <prvInsertTimerInActiveList+0x48>)
  402d4c:	6818      	ldr	r0, [r3, #0]
  402d4e:	4b03      	ldr	r3, [pc, #12]	; (402d5c <prvInsertTimerInActiveList+0x44>)
  402d50:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402d52:	2000      	movs	r0, #0
  402d54:	bd08      	pop	{r3, pc}
  402d56:	bf00      	nop
  402d58:	20400d6c 	.word	0x20400d6c
  402d5c:	00401479 	.word	0x00401479
  402d60:	20400d68 	.word	0x20400d68

00402d64 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402d64:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402d66:	4b15      	ldr	r3, [pc, #84]	; (402dbc <prvCheckForValidListAndQueue+0x58>)
  402d68:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402d6a:	4b15      	ldr	r3, [pc, #84]	; (402dc0 <prvCheckForValidListAndQueue+0x5c>)
  402d6c:	681b      	ldr	r3, [r3, #0]
  402d6e:	b113      	cbz	r3, 402d76 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402d70:	4b14      	ldr	r3, [pc, #80]	; (402dc4 <prvCheckForValidListAndQueue+0x60>)
  402d72:	4798      	blx	r3
  402d74:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402d76:	4d14      	ldr	r5, [pc, #80]	; (402dc8 <prvCheckForValidListAndQueue+0x64>)
  402d78:	4628      	mov	r0, r5
  402d7a:	4e14      	ldr	r6, [pc, #80]	; (402dcc <prvCheckForValidListAndQueue+0x68>)
  402d7c:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402d7e:	4c14      	ldr	r4, [pc, #80]	; (402dd0 <prvCheckForValidListAndQueue+0x6c>)
  402d80:	4620      	mov	r0, r4
  402d82:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402d84:	4b13      	ldr	r3, [pc, #76]	; (402dd4 <prvCheckForValidListAndQueue+0x70>)
  402d86:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402d88:	4b13      	ldr	r3, [pc, #76]	; (402dd8 <prvCheckForValidListAndQueue+0x74>)
  402d8a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402d8c:	2200      	movs	r2, #0
  402d8e:	2110      	movs	r1, #16
  402d90:	2005      	movs	r0, #5
  402d92:	4b12      	ldr	r3, [pc, #72]	; (402ddc <prvCheckForValidListAndQueue+0x78>)
  402d94:	4798      	blx	r3
  402d96:	4b0a      	ldr	r3, [pc, #40]	; (402dc0 <prvCheckForValidListAndQueue+0x5c>)
  402d98:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402d9a:	b118      	cbz	r0, 402da4 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402d9c:	4910      	ldr	r1, [pc, #64]	; (402de0 <prvCheckForValidListAndQueue+0x7c>)
  402d9e:	4b11      	ldr	r3, [pc, #68]	; (402de4 <prvCheckForValidListAndQueue+0x80>)
  402da0:	4798      	blx	r3
  402da2:	e7e5      	b.n	402d70 <prvCheckForValidListAndQueue+0xc>
  402da4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402da8:	b672      	cpsid	i
  402daa:	f383 8811 	msr	BASEPRI, r3
  402dae:	f3bf 8f6f 	isb	sy
  402db2:	f3bf 8f4f 	dsb	sy
  402db6:	b662      	cpsie	i
  402db8:	e7fe      	b.n	402db8 <prvCheckForValidListAndQueue+0x54>
  402dba:	bf00      	nop
  402dbc:	00401591 	.word	0x00401591
  402dc0:	20400d9c 	.word	0x20400d9c
  402dc4:	004015dd 	.word	0x004015dd
  402dc8:	20400d70 	.word	0x20400d70
  402dcc:	00401445 	.word	0x00401445
  402dd0:	20400d84 	.word	0x20400d84
  402dd4:	20400d68 	.word	0x20400d68
  402dd8:	20400d6c 	.word	0x20400d6c
  402ddc:	00401ab1 	.word	0x00401ab1
  402de0:	00409188 	.word	0x00409188
  402de4:	004020c1 	.word	0x004020c1

00402de8 <xTimerCreateTimerTask>:
{
  402de8:	b510      	push	{r4, lr}
  402dea:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402dec:	4b0f      	ldr	r3, [pc, #60]	; (402e2c <xTimerCreateTimerTask+0x44>)
  402dee:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402df0:	4b0f      	ldr	r3, [pc, #60]	; (402e30 <xTimerCreateTimerTask+0x48>)
  402df2:	681b      	ldr	r3, [r3, #0]
  402df4:	b173      	cbz	r3, 402e14 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402df6:	2300      	movs	r3, #0
  402df8:	9303      	str	r3, [sp, #12]
  402dfa:	9302      	str	r3, [sp, #8]
  402dfc:	9301      	str	r3, [sp, #4]
  402dfe:	2204      	movs	r2, #4
  402e00:	9200      	str	r2, [sp, #0]
  402e02:	f44f 7282 	mov.w	r2, #260	; 0x104
  402e06:	490b      	ldr	r1, [pc, #44]	; (402e34 <xTimerCreateTimerTask+0x4c>)
  402e08:	480b      	ldr	r0, [pc, #44]	; (402e38 <xTimerCreateTimerTask+0x50>)
  402e0a:	4c0c      	ldr	r4, [pc, #48]	; (402e3c <xTimerCreateTimerTask+0x54>)
  402e0c:	47a0      	blx	r4
	configASSERT( xReturn );
  402e0e:	b108      	cbz	r0, 402e14 <xTimerCreateTimerTask+0x2c>
}
  402e10:	b004      	add	sp, #16
  402e12:	bd10      	pop	{r4, pc}
  402e14:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e18:	b672      	cpsid	i
  402e1a:	f383 8811 	msr	BASEPRI, r3
  402e1e:	f3bf 8f6f 	isb	sy
  402e22:	f3bf 8f4f 	dsb	sy
  402e26:	b662      	cpsie	i
  402e28:	e7fe      	b.n	402e28 <xTimerCreateTimerTask+0x40>
  402e2a:	bf00      	nop
  402e2c:	00402d65 	.word	0x00402d65
  402e30:	20400d9c 	.word	0x20400d9c
  402e34:	00409190 	.word	0x00409190
  402e38:	00402f69 	.word	0x00402f69
  402e3c:	004021d1 	.word	0x004021d1

00402e40 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402e40:	b1d8      	cbz	r0, 402e7a <xTimerGenericCommand+0x3a>
{
  402e42:	b530      	push	{r4, r5, lr}
  402e44:	b085      	sub	sp, #20
  402e46:	4615      	mov	r5, r2
  402e48:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402e4a:	4a15      	ldr	r2, [pc, #84]	; (402ea0 <xTimerGenericCommand+0x60>)
  402e4c:	6810      	ldr	r0, [r2, #0]
  402e4e:	b320      	cbz	r0, 402e9a <xTimerGenericCommand+0x5a>
  402e50:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402e52:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402e54:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402e56:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402e58:	2905      	cmp	r1, #5
  402e5a:	dc19      	bgt.n	402e90 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402e5c:	4b11      	ldr	r3, [pc, #68]	; (402ea4 <xTimerGenericCommand+0x64>)
  402e5e:	4798      	blx	r3
  402e60:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402e62:	f04f 0300 	mov.w	r3, #0
  402e66:	bf0c      	ite	eq
  402e68:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402e6a:	461a      	movne	r2, r3
  402e6c:	4669      	mov	r1, sp
  402e6e:	480c      	ldr	r0, [pc, #48]	; (402ea0 <xTimerGenericCommand+0x60>)
  402e70:	6800      	ldr	r0, [r0, #0]
  402e72:	4c0d      	ldr	r4, [pc, #52]	; (402ea8 <xTimerGenericCommand+0x68>)
  402e74:	47a0      	blx	r4
}
  402e76:	b005      	add	sp, #20
  402e78:	bd30      	pop	{r4, r5, pc}
  402e7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e7e:	b672      	cpsid	i
  402e80:	f383 8811 	msr	BASEPRI, r3
  402e84:	f3bf 8f6f 	isb	sy
  402e88:	f3bf 8f4f 	dsb	sy
  402e8c:	b662      	cpsie	i
  402e8e:	e7fe      	b.n	402e8e <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402e90:	2300      	movs	r3, #0
  402e92:	4669      	mov	r1, sp
  402e94:	4c05      	ldr	r4, [pc, #20]	; (402eac <xTimerGenericCommand+0x6c>)
  402e96:	47a0      	blx	r4
  402e98:	e7ed      	b.n	402e76 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402e9a:	2000      	movs	r0, #0
	return xReturn;
  402e9c:	e7eb      	b.n	402e76 <xTimerGenericCommand+0x36>
  402e9e:	bf00      	nop
  402ea0:	20400d9c 	.word	0x20400d9c
  402ea4:	00402b7d 	.word	0x00402b7d
  402ea8:	00401b2d 	.word	0x00401b2d
  402eac:	00401d11 	.word	0x00401d11

00402eb0 <prvSampleTimeNow>:
{
  402eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402eb4:	b082      	sub	sp, #8
  402eb6:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402eb8:	4b24      	ldr	r3, [pc, #144]	; (402f4c <prvSampleTimeNow+0x9c>)
  402eba:	4798      	blx	r3
  402ebc:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402ebe:	4b24      	ldr	r3, [pc, #144]	; (402f50 <prvSampleTimeNow+0xa0>)
  402ec0:	681b      	ldr	r3, [r3, #0]
  402ec2:	4298      	cmp	r0, r3
  402ec4:	d31b      	bcc.n	402efe <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402ec6:	2300      	movs	r3, #0
  402ec8:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402ecc:	4b20      	ldr	r3, [pc, #128]	; (402f50 <prvSampleTimeNow+0xa0>)
  402ece:	601f      	str	r7, [r3, #0]
}
  402ed0:	4638      	mov	r0, r7
  402ed2:	b002      	add	sp, #8
  402ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402ed8:	2100      	movs	r1, #0
  402eda:	9100      	str	r1, [sp, #0]
  402edc:	460b      	mov	r3, r1
  402ede:	4652      	mov	r2, sl
  402ee0:	4620      	mov	r0, r4
  402ee2:	4c1c      	ldr	r4, [pc, #112]	; (402f54 <prvSampleTimeNow+0xa4>)
  402ee4:	47a0      	blx	r4
				configASSERT( xResult );
  402ee6:	b960      	cbnz	r0, 402f02 <prvSampleTimeNow+0x52>
  402ee8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402eec:	b672      	cpsid	i
  402eee:	f383 8811 	msr	BASEPRI, r3
  402ef2:	f3bf 8f6f 	isb	sy
  402ef6:	f3bf 8f4f 	dsb	sy
  402efa:	b662      	cpsie	i
  402efc:	e7fe      	b.n	402efc <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402efe:	4d16      	ldr	r5, [pc, #88]	; (402f58 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402f00:	4e16      	ldr	r6, [pc, #88]	; (402f5c <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402f02:	682b      	ldr	r3, [r5, #0]
  402f04:	681a      	ldr	r2, [r3, #0]
  402f06:	b1c2      	cbz	r2, 402f3a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402f08:	68db      	ldr	r3, [r3, #12]
  402f0a:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402f0e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402f10:	f104 0904 	add.w	r9, r4, #4
  402f14:	4648      	mov	r0, r9
  402f16:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402f1a:	4620      	mov	r0, r4
  402f1c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402f1e:	69e3      	ldr	r3, [r4, #28]
  402f20:	2b01      	cmp	r3, #1
  402f22:	d1ee      	bne.n	402f02 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402f24:	69a3      	ldr	r3, [r4, #24]
  402f26:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402f28:	459a      	cmp	sl, r3
  402f2a:	d2d5      	bcs.n	402ed8 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402f2c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402f2e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402f30:	4649      	mov	r1, r9
  402f32:	6828      	ldr	r0, [r5, #0]
  402f34:	4b0a      	ldr	r3, [pc, #40]	; (402f60 <prvSampleTimeNow+0xb0>)
  402f36:	4798      	blx	r3
  402f38:	e7e3      	b.n	402f02 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402f3a:	4a0a      	ldr	r2, [pc, #40]	; (402f64 <prvSampleTimeNow+0xb4>)
  402f3c:	6810      	ldr	r0, [r2, #0]
  402f3e:	4906      	ldr	r1, [pc, #24]	; (402f58 <prvSampleTimeNow+0xa8>)
  402f40:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402f42:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402f44:	2301      	movs	r3, #1
  402f46:	f8c8 3000 	str.w	r3, [r8]
  402f4a:	e7bf      	b.n	402ecc <prvSampleTimeNow+0x1c>
  402f4c:	004024a1 	.word	0x004024a1
  402f50:	20400d98 	.word	0x20400d98
  402f54:	00402e41 	.word	0x00402e41
  402f58:	20400d68 	.word	0x20400d68
  402f5c:	004014ad 	.word	0x004014ad
  402f60:	00401479 	.word	0x00401479
  402f64:	20400d6c 	.word	0x20400d6c

00402f68 <prvTimerTask>:
{
  402f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402f6c:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402f6e:	4e75      	ldr	r6, [pc, #468]	; (403144 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402f70:	4f75      	ldr	r7, [pc, #468]	; (403148 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402f72:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403170 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402f76:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403174 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402f7a:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402f7c:	681a      	ldr	r2, [r3, #0]
  402f7e:	2a00      	cmp	r2, #0
  402f80:	f000 80ce 	beq.w	403120 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402f84:	68db      	ldr	r3, [r3, #12]
  402f86:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402f88:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402f8a:	a804      	add	r0, sp, #16
  402f8c:	4b6f      	ldr	r3, [pc, #444]	; (40314c <prvTimerTask+0x1e4>)
  402f8e:	4798      	blx	r3
  402f90:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402f92:	9b04      	ldr	r3, [sp, #16]
  402f94:	2b00      	cmp	r3, #0
  402f96:	d144      	bne.n	403022 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402f98:	42a0      	cmp	r0, r4
  402f9a:	d212      	bcs.n	402fc2 <prvTimerTask+0x5a>
  402f9c:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402f9e:	1b61      	subs	r1, r4, r5
  402fa0:	4b6b      	ldr	r3, [pc, #428]	; (403150 <prvTimerTask+0x1e8>)
  402fa2:	6818      	ldr	r0, [r3, #0]
  402fa4:	4b6b      	ldr	r3, [pc, #428]	; (403154 <prvTimerTask+0x1ec>)
  402fa6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402fa8:	4b6b      	ldr	r3, [pc, #428]	; (403158 <prvTimerTask+0x1f0>)
  402faa:	4798      	blx	r3
  402fac:	2800      	cmp	r0, #0
  402fae:	d13a      	bne.n	403026 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402fb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402fb4:	f8c9 3000 	str.w	r3, [r9]
  402fb8:	f3bf 8f4f 	dsb	sy
  402fbc:	f3bf 8f6f 	isb	sy
  402fc0:	e031      	b.n	403026 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402fc2:	4b65      	ldr	r3, [pc, #404]	; (403158 <prvTimerTask+0x1f0>)
  402fc4:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402fc6:	6833      	ldr	r3, [r6, #0]
  402fc8:	68db      	ldr	r3, [r3, #12]
  402fca:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402fce:	f10a 0004 	add.w	r0, sl, #4
  402fd2:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402fd4:	f8da 301c 	ldr.w	r3, [sl, #28]
  402fd8:	2b01      	cmp	r3, #1
  402fda:	d004      	beq.n	402fe6 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402fdc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402fe0:	4650      	mov	r0, sl
  402fe2:	4798      	blx	r3
  402fe4:	e01f      	b.n	403026 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402fe6:	f8da 1018 	ldr.w	r1, [sl, #24]
  402fea:	4623      	mov	r3, r4
  402fec:	462a      	mov	r2, r5
  402fee:	4421      	add	r1, r4
  402ff0:	4650      	mov	r0, sl
  402ff2:	4d5a      	ldr	r5, [pc, #360]	; (40315c <prvTimerTask+0x1f4>)
  402ff4:	47a8      	blx	r5
  402ff6:	2801      	cmp	r0, #1
  402ff8:	d1f0      	bne.n	402fdc <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402ffa:	2100      	movs	r1, #0
  402ffc:	9100      	str	r1, [sp, #0]
  402ffe:	460b      	mov	r3, r1
  403000:	4622      	mov	r2, r4
  403002:	4650      	mov	r0, sl
  403004:	4c56      	ldr	r4, [pc, #344]	; (403160 <prvTimerTask+0x1f8>)
  403006:	47a0      	blx	r4
			configASSERT( xResult );
  403008:	2800      	cmp	r0, #0
  40300a:	d1e7      	bne.n	402fdc <prvTimerTask+0x74>
  40300c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403010:	b672      	cpsid	i
  403012:	f383 8811 	msr	BASEPRI, r3
  403016:	f3bf 8f6f 	isb	sy
  40301a:	f3bf 8f4f 	dsb	sy
  40301e:	b662      	cpsie	i
  403020:	e7fe      	b.n	403020 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  403022:	4b4d      	ldr	r3, [pc, #308]	; (403158 <prvTimerTask+0x1f0>)
  403024:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403026:	4d4a      	ldr	r5, [pc, #296]	; (403150 <prvTimerTask+0x1e8>)
  403028:	4c4e      	ldr	r4, [pc, #312]	; (403164 <prvTimerTask+0x1fc>)
  40302a:	e006      	b.n	40303a <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  40302c:	9907      	ldr	r1, [sp, #28]
  40302e:	9806      	ldr	r0, [sp, #24]
  403030:	9b05      	ldr	r3, [sp, #20]
  403032:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403034:	9b04      	ldr	r3, [sp, #16]
  403036:	2b00      	cmp	r3, #0
  403038:	da09      	bge.n	40304e <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40303a:	2300      	movs	r3, #0
  40303c:	461a      	mov	r2, r3
  40303e:	a904      	add	r1, sp, #16
  403040:	6828      	ldr	r0, [r5, #0]
  403042:	47a0      	blx	r4
  403044:	2800      	cmp	r0, #0
  403046:	d098      	beq.n	402f7a <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403048:	9b04      	ldr	r3, [sp, #16]
  40304a:	2b00      	cmp	r3, #0
  40304c:	dbee      	blt.n	40302c <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40304e:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403052:	f8da 3014 	ldr.w	r3, [sl, #20]
  403056:	b113      	cbz	r3, 40305e <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403058:	f10a 0004 	add.w	r0, sl, #4
  40305c:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40305e:	a803      	add	r0, sp, #12
  403060:	4b3a      	ldr	r3, [pc, #232]	; (40314c <prvTimerTask+0x1e4>)
  403062:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403064:	9b04      	ldr	r3, [sp, #16]
  403066:	2b09      	cmp	r3, #9
  403068:	d8e7      	bhi.n	40303a <prvTimerTask+0xd2>
  40306a:	a201      	add	r2, pc, #4	; (adr r2, 403070 <prvTimerTask+0x108>)
  40306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403070:	00403099 	.word	0x00403099
  403074:	00403099 	.word	0x00403099
  403078:	00403099 	.word	0x00403099
  40307c:	0040303b 	.word	0x0040303b
  403080:	004030ed 	.word	0x004030ed
  403084:	00403119 	.word	0x00403119
  403088:	00403099 	.word	0x00403099
  40308c:	00403099 	.word	0x00403099
  403090:	0040303b 	.word	0x0040303b
  403094:	004030ed 	.word	0x004030ed
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403098:	9c05      	ldr	r4, [sp, #20]
  40309a:	f8da 1018 	ldr.w	r1, [sl, #24]
  40309e:	4623      	mov	r3, r4
  4030a0:	4602      	mov	r2, r0
  4030a2:	4421      	add	r1, r4
  4030a4:	4650      	mov	r0, sl
  4030a6:	4c2d      	ldr	r4, [pc, #180]	; (40315c <prvTimerTask+0x1f4>)
  4030a8:	47a0      	blx	r4
  4030aa:	2801      	cmp	r0, #1
  4030ac:	d1bc      	bne.n	403028 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4030ae:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4030b2:	4650      	mov	r0, sl
  4030b4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4030b6:	f8da 301c 	ldr.w	r3, [sl, #28]
  4030ba:	2b01      	cmp	r3, #1
  4030bc:	d1b4      	bne.n	403028 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4030be:	f8da 2018 	ldr.w	r2, [sl, #24]
  4030c2:	2100      	movs	r1, #0
  4030c4:	9100      	str	r1, [sp, #0]
  4030c6:	460b      	mov	r3, r1
  4030c8:	9805      	ldr	r0, [sp, #20]
  4030ca:	4402      	add	r2, r0
  4030cc:	4650      	mov	r0, sl
  4030ce:	4c24      	ldr	r4, [pc, #144]	; (403160 <prvTimerTask+0x1f8>)
  4030d0:	47a0      	blx	r4
							configASSERT( xResult );
  4030d2:	2800      	cmp	r0, #0
  4030d4:	d1a8      	bne.n	403028 <prvTimerTask+0xc0>
  4030d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030da:	b672      	cpsid	i
  4030dc:	f383 8811 	msr	BASEPRI, r3
  4030e0:	f3bf 8f6f 	isb	sy
  4030e4:	f3bf 8f4f 	dsb	sy
  4030e8:	b662      	cpsie	i
  4030ea:	e7fe      	b.n	4030ea <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4030ec:	9905      	ldr	r1, [sp, #20]
  4030ee:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4030f2:	b131      	cbz	r1, 403102 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4030f4:	4603      	mov	r3, r0
  4030f6:	4602      	mov	r2, r0
  4030f8:	4401      	add	r1, r0
  4030fa:	4650      	mov	r0, sl
  4030fc:	4c17      	ldr	r4, [pc, #92]	; (40315c <prvTimerTask+0x1f4>)
  4030fe:	47a0      	blx	r4
  403100:	e792      	b.n	403028 <prvTimerTask+0xc0>
  403102:	f04f 0380 	mov.w	r3, #128	; 0x80
  403106:	b672      	cpsid	i
  403108:	f383 8811 	msr	BASEPRI, r3
  40310c:	f3bf 8f6f 	isb	sy
  403110:	f3bf 8f4f 	dsb	sy
  403114:	b662      	cpsie	i
  403116:	e7fe      	b.n	403116 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  403118:	4650      	mov	r0, sl
  40311a:	4b13      	ldr	r3, [pc, #76]	; (403168 <prvTimerTask+0x200>)
  40311c:	4798      	blx	r3
  40311e:	e783      	b.n	403028 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  403120:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403122:	a804      	add	r0, sp, #16
  403124:	4b09      	ldr	r3, [pc, #36]	; (40314c <prvTimerTask+0x1e4>)
  403126:	4798      	blx	r3
  403128:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40312a:	9b04      	ldr	r3, [sp, #16]
  40312c:	2b00      	cmp	r3, #0
  40312e:	f47f af78 	bne.w	403022 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403132:	4b0e      	ldr	r3, [pc, #56]	; (40316c <prvTimerTask+0x204>)
  403134:	681b      	ldr	r3, [r3, #0]
  403136:	681a      	ldr	r2, [r3, #0]
  403138:	fab2 f282 	clz	r2, r2
  40313c:	0952      	lsrs	r2, r2, #5
  40313e:	2400      	movs	r4, #0
  403140:	e72d      	b.n	402f9e <prvTimerTask+0x36>
  403142:	bf00      	nop
  403144:	20400d68 	.word	0x20400d68
  403148:	00402491 	.word	0x00402491
  40314c:	00402eb1 	.word	0x00402eb1
  403150:	20400d9c 	.word	0x20400d9c
  403154:	004020f5 	.word	0x004020f5
  403158:	004025f9 	.word	0x004025f9
  40315c:	00402d19 	.word	0x00402d19
  403160:	00402e41 	.word	0x00402e41
  403164:	00401ef1 	.word	0x00401ef1
  403168:	0040181d 	.word	0x0040181d
  40316c:	20400d6c 	.word	0x20400d6c
  403170:	e000ed04 	.word	0xe000ed04
  403174:	004014ad 	.word	0x004014ad

00403178 <but_callback>:

/************************************************************************/
/* handlers / callbacks                                                 */
/************************************************************************/

void but_callback(void) {
  403178:	b500      	push	{lr}
  40317a:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  40317c:	a902      	add	r1, sp, #8
  40317e:	2300      	movs	r3, #0
  403180:	f841 3d04 	str.w	r3, [r1, #-4]!
	xSemaphoreGiveFromISR(xBtnSemaphore, &xHigherPriorityTaskWoken);
  403184:	4b03      	ldr	r3, [pc, #12]	; (403194 <but_callback+0x1c>)
  403186:	6818      	ldr	r0, [r3, #0]
  403188:	4b03      	ldr	r3, [pc, #12]	; (403198 <but_callback+0x20>)
  40318a:	4798      	blx	r3

}
  40318c:	b003      	add	sp, #12
  40318e:	f85d fb04 	ldr.w	pc, [sp], #4
  403192:	bf00      	nop
  403194:	20400e24 	.word	0x20400e24
  403198:	00401e11 	.word	0x00401e11

0040319c <task_debug>:
	
}



static void task_debug(void *pvParameters) {
  40319c:	b580      	push	{r7, lr}
  40319e:	b082      	sub	sp, #8
	gfx_mono_ssd1306_init();
  4031a0:	4b0c      	ldr	r3, [pc, #48]	; (4031d4 <task_debug+0x38>)
  4031a2:	4798      	blx	r3

	for (;;) {
		gfx_mono_draw_filled_circle(10,10,4,1,GFX_WHOLE);
  4031a4:	f04f 0804 	mov.w	r8, #4
  4031a8:	270a      	movs	r7, #10
  4031aa:	4e0b      	ldr	r6, [pc, #44]	; (4031d8 <task_debug+0x3c>)
  4031ac:	25ff      	movs	r5, #255	; 0xff
  4031ae:	9500      	str	r5, [sp, #0]
  4031b0:	2301      	movs	r3, #1
  4031b2:	4642      	mov	r2, r8
  4031b4:	4639      	mov	r1, r7
  4031b6:	4638      	mov	r0, r7
  4031b8:	47b0      	blx	r6
		vTaskDelay(150);
  4031ba:	2096      	movs	r0, #150	; 0x96
  4031bc:	4c07      	ldr	r4, [pc, #28]	; (4031dc <task_debug+0x40>)
  4031be:	47a0      	blx	r4
		gfx_mono_draw_filled_circle(10,10,4,0,GFX_WHOLE);
  4031c0:	9500      	str	r5, [sp, #0]
  4031c2:	2300      	movs	r3, #0
  4031c4:	4642      	mov	r2, r8
  4031c6:	4639      	mov	r1, r7
  4031c8:	4638      	mov	r0, r7
  4031ca:	47b0      	blx	r6
		vTaskDelay(150);
  4031cc:	2096      	movs	r0, #150	; 0x96
  4031ce:	47a0      	blx	r4
  4031d0:	e7ec      	b.n	4031ac <task_debug+0x10>
  4031d2:	bf00      	nop
  4031d4:	004005f5 	.word	0x004005f5
  4031d8:	00400489 	.word	0x00400489
  4031dc:	00402719 	.word	0x00402719

004031e0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4031e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4031e2:	b083      	sub	sp, #12
  4031e4:	4605      	mov	r5, r0
  4031e6:	460c      	mov	r4, r1
	uint32_t val = 0;
  4031e8:	2300      	movs	r3, #0
  4031ea:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4031ec:	4b2a      	ldr	r3, [pc, #168]	; (403298 <usart_serial_getchar+0xb8>)
  4031ee:	4298      	cmp	r0, r3
  4031f0:	d013      	beq.n	40321a <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4031f2:	4b2a      	ldr	r3, [pc, #168]	; (40329c <usart_serial_getchar+0xbc>)
  4031f4:	4298      	cmp	r0, r3
  4031f6:	d018      	beq.n	40322a <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4031f8:	4b29      	ldr	r3, [pc, #164]	; (4032a0 <usart_serial_getchar+0xc0>)
  4031fa:	4298      	cmp	r0, r3
  4031fc:	d01d      	beq.n	40323a <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4031fe:	4b29      	ldr	r3, [pc, #164]	; (4032a4 <usart_serial_getchar+0xc4>)
  403200:	429d      	cmp	r5, r3
  403202:	d022      	beq.n	40324a <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403204:	4b28      	ldr	r3, [pc, #160]	; (4032a8 <usart_serial_getchar+0xc8>)
  403206:	429d      	cmp	r5, r3
  403208:	d027      	beq.n	40325a <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40320a:	4b28      	ldr	r3, [pc, #160]	; (4032ac <usart_serial_getchar+0xcc>)
  40320c:	429d      	cmp	r5, r3
  40320e:	d02e      	beq.n	40326e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403210:	4b27      	ldr	r3, [pc, #156]	; (4032b0 <usart_serial_getchar+0xd0>)
  403212:	429d      	cmp	r5, r3
  403214:	d035      	beq.n	403282 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403216:	b003      	add	sp, #12
  403218:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40321a:	461f      	mov	r7, r3
  40321c:	4e25      	ldr	r6, [pc, #148]	; (4032b4 <usart_serial_getchar+0xd4>)
  40321e:	4621      	mov	r1, r4
  403220:	4638      	mov	r0, r7
  403222:	47b0      	blx	r6
  403224:	2800      	cmp	r0, #0
  403226:	d1fa      	bne.n	40321e <usart_serial_getchar+0x3e>
  403228:	e7e9      	b.n	4031fe <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40322a:	461f      	mov	r7, r3
  40322c:	4e21      	ldr	r6, [pc, #132]	; (4032b4 <usart_serial_getchar+0xd4>)
  40322e:	4621      	mov	r1, r4
  403230:	4638      	mov	r0, r7
  403232:	47b0      	blx	r6
  403234:	2800      	cmp	r0, #0
  403236:	d1fa      	bne.n	40322e <usart_serial_getchar+0x4e>
  403238:	e7e4      	b.n	403204 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40323a:	461f      	mov	r7, r3
  40323c:	4e1d      	ldr	r6, [pc, #116]	; (4032b4 <usart_serial_getchar+0xd4>)
  40323e:	4621      	mov	r1, r4
  403240:	4638      	mov	r0, r7
  403242:	47b0      	blx	r6
  403244:	2800      	cmp	r0, #0
  403246:	d1fa      	bne.n	40323e <usart_serial_getchar+0x5e>
  403248:	e7df      	b.n	40320a <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40324a:	461f      	mov	r7, r3
  40324c:	4e19      	ldr	r6, [pc, #100]	; (4032b4 <usart_serial_getchar+0xd4>)
  40324e:	4621      	mov	r1, r4
  403250:	4638      	mov	r0, r7
  403252:	47b0      	blx	r6
  403254:	2800      	cmp	r0, #0
  403256:	d1fa      	bne.n	40324e <usart_serial_getchar+0x6e>
  403258:	e7da      	b.n	403210 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40325a:	461e      	mov	r6, r3
  40325c:	4d16      	ldr	r5, [pc, #88]	; (4032b8 <usart_serial_getchar+0xd8>)
  40325e:	a901      	add	r1, sp, #4
  403260:	4630      	mov	r0, r6
  403262:	47a8      	blx	r5
  403264:	2800      	cmp	r0, #0
  403266:	d1fa      	bne.n	40325e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403268:	9b01      	ldr	r3, [sp, #4]
  40326a:	7023      	strb	r3, [r4, #0]
  40326c:	e7d3      	b.n	403216 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40326e:	461e      	mov	r6, r3
  403270:	4d11      	ldr	r5, [pc, #68]	; (4032b8 <usart_serial_getchar+0xd8>)
  403272:	a901      	add	r1, sp, #4
  403274:	4630      	mov	r0, r6
  403276:	47a8      	blx	r5
  403278:	2800      	cmp	r0, #0
  40327a:	d1fa      	bne.n	403272 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  40327c:	9b01      	ldr	r3, [sp, #4]
  40327e:	7023      	strb	r3, [r4, #0]
  403280:	e7c9      	b.n	403216 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403282:	461e      	mov	r6, r3
  403284:	4d0c      	ldr	r5, [pc, #48]	; (4032b8 <usart_serial_getchar+0xd8>)
  403286:	a901      	add	r1, sp, #4
  403288:	4630      	mov	r0, r6
  40328a:	47a8      	blx	r5
  40328c:	2800      	cmp	r0, #0
  40328e:	d1fa      	bne.n	403286 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403290:	9b01      	ldr	r3, [sp, #4]
  403292:	7023      	strb	r3, [r4, #0]
}
  403294:	e7bf      	b.n	403216 <usart_serial_getchar+0x36>
  403296:	bf00      	nop
  403298:	400e0800 	.word	0x400e0800
  40329c:	400e0a00 	.word	0x400e0a00
  4032a0:	400e1a00 	.word	0x400e1a00
  4032a4:	400e1c00 	.word	0x400e1c00
  4032a8:	40024000 	.word	0x40024000
  4032ac:	40028000 	.word	0x40028000
  4032b0:	4002c000 	.word	0x4002c000
  4032b4:	0040106f 	.word	0x0040106f
  4032b8:	0040117b 	.word	0x0040117b

004032bc <usart_serial_putchar>:
{
  4032bc:	b570      	push	{r4, r5, r6, lr}
  4032be:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4032c0:	4b2a      	ldr	r3, [pc, #168]	; (40336c <usart_serial_putchar+0xb0>)
  4032c2:	4298      	cmp	r0, r3
  4032c4:	d013      	beq.n	4032ee <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4032c6:	4b2a      	ldr	r3, [pc, #168]	; (403370 <usart_serial_putchar+0xb4>)
  4032c8:	4298      	cmp	r0, r3
  4032ca:	d019      	beq.n	403300 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4032cc:	4b29      	ldr	r3, [pc, #164]	; (403374 <usart_serial_putchar+0xb8>)
  4032ce:	4298      	cmp	r0, r3
  4032d0:	d01f      	beq.n	403312 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4032d2:	4b29      	ldr	r3, [pc, #164]	; (403378 <usart_serial_putchar+0xbc>)
  4032d4:	4298      	cmp	r0, r3
  4032d6:	d025      	beq.n	403324 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4032d8:	4b28      	ldr	r3, [pc, #160]	; (40337c <usart_serial_putchar+0xc0>)
  4032da:	4298      	cmp	r0, r3
  4032dc:	d02b      	beq.n	403336 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4032de:	4b28      	ldr	r3, [pc, #160]	; (403380 <usart_serial_putchar+0xc4>)
  4032e0:	4298      	cmp	r0, r3
  4032e2:	d031      	beq.n	403348 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4032e4:	4b27      	ldr	r3, [pc, #156]	; (403384 <usart_serial_putchar+0xc8>)
  4032e6:	4298      	cmp	r0, r3
  4032e8:	d037      	beq.n	40335a <usart_serial_putchar+0x9e>
	return 0;
  4032ea:	2000      	movs	r0, #0
}
  4032ec:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4032ee:	461e      	mov	r6, r3
  4032f0:	4d25      	ldr	r5, [pc, #148]	; (403388 <usart_serial_putchar+0xcc>)
  4032f2:	4621      	mov	r1, r4
  4032f4:	4630      	mov	r0, r6
  4032f6:	47a8      	blx	r5
  4032f8:	2800      	cmp	r0, #0
  4032fa:	d1fa      	bne.n	4032f2 <usart_serial_putchar+0x36>
		return 1;
  4032fc:	2001      	movs	r0, #1
  4032fe:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403300:	461e      	mov	r6, r3
  403302:	4d21      	ldr	r5, [pc, #132]	; (403388 <usart_serial_putchar+0xcc>)
  403304:	4621      	mov	r1, r4
  403306:	4630      	mov	r0, r6
  403308:	47a8      	blx	r5
  40330a:	2800      	cmp	r0, #0
  40330c:	d1fa      	bne.n	403304 <usart_serial_putchar+0x48>
		return 1;
  40330e:	2001      	movs	r0, #1
  403310:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403312:	461e      	mov	r6, r3
  403314:	4d1c      	ldr	r5, [pc, #112]	; (403388 <usart_serial_putchar+0xcc>)
  403316:	4621      	mov	r1, r4
  403318:	4630      	mov	r0, r6
  40331a:	47a8      	blx	r5
  40331c:	2800      	cmp	r0, #0
  40331e:	d1fa      	bne.n	403316 <usart_serial_putchar+0x5a>
		return 1;
  403320:	2001      	movs	r0, #1
  403322:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403324:	461e      	mov	r6, r3
  403326:	4d18      	ldr	r5, [pc, #96]	; (403388 <usart_serial_putchar+0xcc>)
  403328:	4621      	mov	r1, r4
  40332a:	4630      	mov	r0, r6
  40332c:	47a8      	blx	r5
  40332e:	2800      	cmp	r0, #0
  403330:	d1fa      	bne.n	403328 <usart_serial_putchar+0x6c>
		return 1;
  403332:	2001      	movs	r0, #1
  403334:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403336:	461e      	mov	r6, r3
  403338:	4d14      	ldr	r5, [pc, #80]	; (40338c <usart_serial_putchar+0xd0>)
  40333a:	4621      	mov	r1, r4
  40333c:	4630      	mov	r0, r6
  40333e:	47a8      	blx	r5
  403340:	2800      	cmp	r0, #0
  403342:	d1fa      	bne.n	40333a <usart_serial_putchar+0x7e>
		return 1;
  403344:	2001      	movs	r0, #1
  403346:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403348:	461e      	mov	r6, r3
  40334a:	4d10      	ldr	r5, [pc, #64]	; (40338c <usart_serial_putchar+0xd0>)
  40334c:	4621      	mov	r1, r4
  40334e:	4630      	mov	r0, r6
  403350:	47a8      	blx	r5
  403352:	2800      	cmp	r0, #0
  403354:	d1fa      	bne.n	40334c <usart_serial_putchar+0x90>
		return 1;
  403356:	2001      	movs	r0, #1
  403358:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40335a:	461e      	mov	r6, r3
  40335c:	4d0b      	ldr	r5, [pc, #44]	; (40338c <usart_serial_putchar+0xd0>)
  40335e:	4621      	mov	r1, r4
  403360:	4630      	mov	r0, r6
  403362:	47a8      	blx	r5
  403364:	2800      	cmp	r0, #0
  403366:	d1fa      	bne.n	40335e <usart_serial_putchar+0xa2>
		return 1;
  403368:	2001      	movs	r0, #1
  40336a:	bd70      	pop	{r4, r5, r6, pc}
  40336c:	400e0800 	.word	0x400e0800
  403370:	400e0a00 	.word	0x400e0a00
  403374:	400e1a00 	.word	0x400e1a00
  403378:	400e1c00 	.word	0x400e1c00
  40337c:	40024000 	.word	0x40024000
  403380:	40028000 	.word	0x40028000
  403384:	4002c000 	.word	0x4002c000
  403388:	0040105d 	.word	0x0040105d
  40338c:	00401165 	.word	0x00401165

00403390 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  403390:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403392:	460a      	mov	r2, r1
  403394:	4601      	mov	r1, r0
  403396:	4802      	ldr	r0, [pc, #8]	; (4033a0 <vApplicationStackOverflowHook+0x10>)
  403398:	4b02      	ldr	r3, [pc, #8]	; (4033a4 <vApplicationStackOverflowHook+0x14>)
  40339a:	4798      	blx	r3
  40339c:	e7fe      	b.n	40339c <vApplicationStackOverflowHook+0xc>
  40339e:	bf00      	nop
  4033a0:	0040923c 	.word	0x0040923c
  4033a4:	0040471d 	.word	0x0040471d

004033a8 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  4033a8:	4770      	bx	lr

004033aa <vApplicationMallocFailedHook>:
  4033aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033ae:	b672      	cpsid	i
  4033b0:	f383 8811 	msr	BASEPRI, r3
  4033b4:	f3bf 8f6f 	isb	sy
  4033b8:	f3bf 8f4f 	dsb	sy
  4033bc:	b662      	cpsie	i
  4033be:	e7fe      	b.n	4033be <vApplicationMallocFailedHook+0x14>

004033c0 <btn_init>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

void btn_init(void) {
  4033c0:	b530      	push	{r4, r5, lr}
  4033c2:	b083      	sub	sp, #12
	// Inicializa clock do periférico PIO responsavel pelo botao
	pmc_enable_periph_clk(BTN_PIO_ID);
  4033c4:	200a      	movs	r0, #10
  4033c6:	4c1d      	ldr	r4, [pc, #116]	; (40343c <btn_init+0x7c>)
  4033c8:	47a0      	blx	r4
	pmc_enable_periph_clk(BUZZER_PIO_ID);
  4033ca:	200a      	movs	r0, #10
  4033cc:	47a0      	blx	r4
	
	// Configura PIO para lidar com o pino do botão como entrada
	// com pull-up
	pio_configure(BTN_PIO, PIO_INPUT, BTN_PIO_PIN_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4033ce:	4c1c      	ldr	r4, [pc, #112]	; (403440 <btn_init+0x80>)
  4033d0:	2309      	movs	r3, #9
  4033d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4033d6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4033da:	4620      	mov	r0, r4
  4033dc:	4d19      	ldr	r5, [pc, #100]	; (403444 <btn_init+0x84>)
  4033de:	47a8      	blx	r5
	pio_configure(BUZZER_PIO, PIO_OUTPUT_0, BUZZER_PIO_IDX_MASK, PIO_DEFAULT);
  4033e0:	2300      	movs	r3, #0
  4033e2:	2220      	movs	r2, #32
  4033e4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4033e8:	4620      	mov	r0, r4
  4033ea:	47a8      	blx	r5
	pio_set_debounce_filter(BTN_PIO, BTN_PIO_PIN_MASK, 60);
  4033ec:	223c      	movs	r2, #60	; 0x3c
  4033ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4033f2:	4620      	mov	r0, r4
  4033f4:	4b14      	ldr	r3, [pc, #80]	; (403448 <btn_init+0x88>)
  4033f6:	4798      	blx	r3
	
	pio_set_output(BUZZER_PIO, BUZZER_PIO_IDX_MASK, 0, 0, 0);
  4033f8:	2200      	movs	r2, #0
  4033fa:	9200      	str	r2, [sp, #0]
  4033fc:	4613      	mov	r3, r2
  4033fe:	2120      	movs	r1, #32
  403400:	4620      	mov	r0, r4
  403402:	4d12      	ldr	r5, [pc, #72]	; (40344c <btn_init+0x8c>)
  403404:	47a8      	blx	r5
	// Configura interrupção no pino referente ao botao e associa
	// função de callback caso uma interrupção for gerada
	// a função de callback é a: but_callback()
	pio_handler_set(BTN_PIO,
  403406:	4b12      	ldr	r3, [pc, #72]	; (403450 <btn_init+0x90>)
  403408:	9300      	str	r3, [sp, #0]
  40340a:	2350      	movs	r3, #80	; 0x50
  40340c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403410:	210a      	movs	r1, #10
  403412:	4620      	mov	r0, r4
  403414:	4d0f      	ldr	r5, [pc, #60]	; (403454 <btn_init+0x94>)
  403416:	47a8      	blx	r5
	BTN_PIO_PIN_MASK,
	PIO_IT_FALL_EDGE,
	but_callback);

	// Ativa interrupção e limpa primeira IRQ gerada na ativacao
	pio_enable_interrupt(BTN_PIO, BTN_PIO_PIN_MASK);
  403418:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40341c:	4620      	mov	r0, r4
  40341e:	4b0e      	ldr	r3, [pc, #56]	; (403458 <btn_init+0x98>)
  403420:	4798      	blx	r3
	pio_get_interrupt_status(BTN_PIO);
  403422:	4620      	mov	r0, r4
  403424:	4b0d      	ldr	r3, [pc, #52]	; (40345c <btn_init+0x9c>)
  403426:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403428:	4b0d      	ldr	r3, [pc, #52]	; (403460 <btn_init+0xa0>)
  40342a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40342e:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403430:	2280      	movs	r2, #128	; 0x80
  403432:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a

	// Configura NVIC para receber interrupcoes do PIO do botao
	// com prioridade 4 (quanto mais próximo de 0 maior)
	NVIC_EnableIRQ(BTN_PIO_ID);
	NVIC_SetPriority(BTN_PIO_ID, 4); // Prioridade 4
}
  403436:	b003      	add	sp, #12
  403438:	bd30      	pop	{r4, r5, pc}
  40343a:	bf00      	nop
  40343c:	00401009 	.word	0x00401009
  403440:	400e0e00 	.word	0x400e0e00
  403444:	00400cf5 	.word	0x00400cf5
  403448:	00400be1 	.word	0x00400be1
  40344c:	00400ccb 	.word	0x00400ccb
  403450:	00403179 	.word	0x00403179
  403454:	00400e15 	.word	0x00400e15
  403458:	00400db7 	.word	0x00400db7
  40345c:	00400dbb 	.word	0x00400dbb
  403460:	e000e100 	.word	0xe000e100

00403464 <RTT_init>:


void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  403464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403468:	ed2d 8b02 	vpush	{d8}
  40346c:	b082      	sub	sp, #8
  40346e:	ee08 0a10 	vmov	s16, r0
  403472:	4688      	mov	r8, r1
  403474:	4617      	mov	r7, r2

	uint16_t pllPreScale = (int)(((float)32768) / freqPrescale);

	rtt_sel_source(RTT, false);
  403476:	4c20      	ldr	r4, [pc, #128]	; (4034f8 <RTT_init+0x94>)
  403478:	2100      	movs	r1, #0
  40347a:	4620      	mov	r0, r4
  40347c:	4b1f      	ldr	r3, [pc, #124]	; (4034fc <RTT_init+0x98>)
  40347e:	4798      	blx	r3
	uint16_t pllPreScale = (int)(((float)32768) / freqPrescale);
  403480:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 403500 <RTT_init+0x9c>
  403484:	eec7 7a08 	vdiv.f32	s15, s14, s16
  403488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  40348c:	edcd 7a01 	vstr	s15, [sp, #4]
	rtt_init(RTT, pllPreScale);
  403490:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  403494:	4620      	mov	r0, r4
  403496:	4b1b      	ldr	r3, [pc, #108]	; (403504 <RTT_init+0xa0>)
  403498:	4798      	blx	r3

	if (rttIRQSource & RTT_MR_ALMIEN) {
  40349a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  40349e:	d116      	bne.n	4034ce <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4034a0:	4b19      	ldr	r3, [pc, #100]	; (403508 <RTT_init+0xa4>)
  4034a2:	2208      	movs	r2, #8
  4034a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4034a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4034ac:	2180      	movs	r1, #128	; 0x80
  4034ae:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4034b2:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 4);
	NVIC_EnableIRQ(RTT_IRQn);

	/* Enable RTT interrupt */
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  4034b4:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  4034b8:	d119      	bne.n	4034ee <RTT_init+0x8a>
	rtt_enable_interrupt(RTT, rttIRQSource);
	else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  4034ba:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  4034be:	480e      	ldr	r0, [pc, #56]	; (4034f8 <RTT_init+0x94>)
  4034c0:	4b12      	ldr	r3, [pc, #72]	; (40350c <RTT_init+0xa8>)
  4034c2:	4798      	blx	r3
}
  4034c4:	b002      	add	sp, #8
  4034c6:	ecbd 8b02 	vpop	{d8}
  4034ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_previous_time = rtt_read_timer_value(RTT);
  4034ce:	4620      	mov	r0, r4
  4034d0:	4b0f      	ldr	r3, [pc, #60]	; (403510 <RTT_init+0xac>)
  4034d2:	4798      	blx	r3
  4034d4:	4604      	mov	r4, r0
		while (ul_previous_time == rtt_read_timer_value(RTT))
  4034d6:	4e08      	ldr	r6, [pc, #32]	; (4034f8 <RTT_init+0x94>)
  4034d8:	4d0d      	ldr	r5, [pc, #52]	; (403510 <RTT_init+0xac>)
  4034da:	4630      	mov	r0, r6
  4034dc:	47a8      	blx	r5
  4034de:	4284      	cmp	r4, r0
  4034e0:	d0fb      	beq.n	4034da <RTT_init+0x76>
		rtt_write_alarm_time(RTT, IrqNPulses + ul_previous_time);
  4034e2:	eb04 0108 	add.w	r1, r4, r8
  4034e6:	4804      	ldr	r0, [pc, #16]	; (4034f8 <RTT_init+0x94>)
  4034e8:	4b0a      	ldr	r3, [pc, #40]	; (403514 <RTT_init+0xb0>)
  4034ea:	4798      	blx	r3
  4034ec:	e7d8      	b.n	4034a0 <RTT_init+0x3c>
	rtt_enable_interrupt(RTT, rttIRQSource);
  4034ee:	4639      	mov	r1, r7
  4034f0:	4801      	ldr	r0, [pc, #4]	; (4034f8 <RTT_init+0x94>)
  4034f2:	4b09      	ldr	r3, [pc, #36]	; (403518 <RTT_init+0xb4>)
  4034f4:	4798      	blx	r3
  4034f6:	e7e5      	b.n	4034c4 <RTT_init+0x60>
  4034f8:	400e1830 	.word	0x400e1830
  4034fc:	004001c1 	.word	0x004001c1
  403500:	47000000 	.word	0x47000000
  403504:	004001ad 	.word	0x004001ad
  403508:	e000e100 	.word	0xe000e100
  40350c:	00400201 	.word	0x00400201
  403510:	00400215 	.word	0x00400215
  403514:	0040022d 	.word	0x0040022d
  403518:	004001ed 	.word	0x004001ed

0040351c <task_coins>:
static void task_coins (void *pvParameters){
  40351c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403520:	b083      	sub	sp, #12
	RTT_init(1000, 5, RTT_MR_ALMIEN);
  403522:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  403526:	2105      	movs	r1, #5
  403528:	481d      	ldr	r0, [pc, #116]	; (4035a0 <task_coins+0x84>)
  40352a:	4b1e      	ldr	r3, [pc, #120]	; (4035a4 <task_coins+0x88>)
  40352c:	4798      	blx	r3
	int flag = 0;
  40352e:	f04f 0900 	mov.w	r9, #0
		if( xSemaphoreTake(xBtnSemaphore, 200) == pdTRUE ){
  403532:	4e1d      	ldr	r6, [pc, #116]	; (4035a8 <task_coins+0x8c>)
				tempo = rtt_read_timer_value(RTT);
  403534:	f8df 809c 	ldr.w	r8, [pc, #156]	; 4035d4 <task_coins+0xb8>
			coins = (rand() % 3) + 1;
  403538:	4f1c      	ldr	r7, [pc, #112]	; (4035ac <task_coins+0x90>)
  40353a:	e015      	b.n	403568 <task_coins+0x4c>
  40353c:	4b1c      	ldr	r3, [pc, #112]	; (4035b0 <task_coins+0x94>)
  40353e:	4798      	blx	r3
  403540:	fb87 2300 	smull	r2, r3, r7, r0
  403544:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
  403548:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40354c:	1ac0      	subs	r0, r0, r3
  40354e:	3001      	adds	r0, #1
  403550:	a902      	add	r1, sp, #8
  403552:	f841 0d04 	str.w	r0, [r1, #-4]!
			xQueueSend(xQueueCoins, &coins, 1000);
  403556:	2300      	movs	r3, #0
  403558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40355c:	4815      	ldr	r0, [pc, #84]	; (4035b4 <task_coins+0x98>)
  40355e:	6800      	ldr	r0, [r0, #0]
  403560:	4c15      	ldr	r4, [pc, #84]	; (4035b8 <task_coins+0x9c>)
  403562:	47a0      	blx	r4
  403564:	f04f 0901 	mov.w	r9, #1
		if( xSemaphoreTake(xBtnSemaphore, 200) == pdTRUE ){
  403568:	2500      	movs	r5, #0
  40356a:	4c14      	ldr	r4, [pc, #80]	; (4035bc <task_coins+0xa0>)
  40356c:	462b      	mov	r3, r5
  40356e:	22c8      	movs	r2, #200	; 0xc8
  403570:	4629      	mov	r1, r5
  403572:	6830      	ldr	r0, [r6, #0]
  403574:	47a0      	blx	r4
  403576:	2801      	cmp	r0, #1
  403578:	d1f8      	bne.n	40356c <task_coins+0x50>
			if (flag == 0){
  40357a:	f1b9 0f00 	cmp.w	r9, #0
  40357e:	d1dd      	bne.n	40353c <task_coins+0x20>
				tempo = rtt_read_timer_value(RTT);
  403580:	4640      	mov	r0, r8
  403582:	4b0f      	ldr	r3, [pc, #60]	; (4035c0 <task_coins+0xa4>)
  403584:	4798      	blx	r3
  403586:	4604      	mov	r4, r0
				srand(tempo);
  403588:	4b0e      	ldr	r3, [pc, #56]	; (4035c4 <task_coins+0xa8>)
  40358a:	4798      	blx	r3
				tempo = rtt_read_timer_value(RTT);
  40358c:	4620      	mov	r0, r4
  40358e:	4b0e      	ldr	r3, [pc, #56]	; (4035c8 <task_coins+0xac>)
  403590:	4798      	blx	r3
				printf("Seed: %lf \n",tempo);
  403592:	4602      	mov	r2, r0
  403594:	460b      	mov	r3, r1
  403596:	480d      	ldr	r0, [pc, #52]	; (4035cc <task_coins+0xb0>)
  403598:	490d      	ldr	r1, [pc, #52]	; (4035d0 <task_coins+0xb4>)
  40359a:	4788      	blx	r1
  40359c:	e7ce      	b.n	40353c <task_coins+0x20>
  40359e:	bf00      	nop
  4035a0:	447a0000 	.word	0x447a0000
  4035a4:	00403465 	.word	0x00403465
  4035a8:	20400e24 	.word	0x20400e24
  4035ac:	55555556 	.word	0x55555556
  4035b0:	00404805 	.word	0x00404805
  4035b4:	20400e20 	.word	0x20400e20
  4035b8:	00401b2d 	.word	0x00401b2d
  4035bc:	00401ef1 	.word	0x00401ef1
  4035c0:	00400215 	.word	0x00400215
  4035c4:	004047f1 	.word	0x004047f1
  4035c8:	00403b69 	.word	0x00403b69
  4035cc:	00409224 	.word	0x00409224
  4035d0:	0040471d 	.word	0x0040471d
  4035d4:	400e1830 	.word	0x400e1830

004035d8 <RTT_Handler>:

void RTT_Handler(void) {
  4035d8:	b508      	push	{r3, lr}
	uint32_t ul_status;
	ul_status = rtt_get_status(RTT);
  4035da:	4802      	ldr	r0, [pc, #8]	; (4035e4 <RTT_Handler+0xc>)
  4035dc:	4b02      	ldr	r3, [pc, #8]	; (4035e8 <RTT_Handler+0x10>)
  4035de:	4798      	blx	r3
  4035e0:	bd08      	pop	{r3, pc}
  4035e2:	bf00      	nop
  4035e4:	400e1830 	.word	0x400e1830
  4035e8:	00400229 	.word	0x00400229

004035ec <tone>:

	/* Specify that stdout should not be buffered. */
	setbuf(stdout, NULL);
}

void tone (int freq, int duration){
  4035ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int t = (1000000/(2*freq));
  4035f0:	0040      	lsls	r0, r0, #1
  4035f2:	4b1f      	ldr	r3, [pc, #124]	; (403670 <tone+0x84>)
  4035f4:	fb93 f8f0 	sdiv	r8, r3, r0
	int ciclo = duration*1000/(2*t);
  4035f8:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  4035fc:	fb07 f701 	mul.w	r7, r7, r1
  403600:	ea4f 0148 	mov.w	r1, r8, lsl #1
  403604:	fb97 f7f1 	sdiv	r7, r7, r1
	double ciclo_led = 0.75*ciclo;

	for (int i = 0; i<ciclo; i++){
  403608:	2f00      	cmp	r7, #0
  40360a:	dd2f      	ble.n	40366c <tone+0x80>

		pio_clear(BUZZER_PIO,BUZZER_PIO_IDX_MASK);
		delay_us(t);
  40360c:	4c19      	ldr	r4, [pc, #100]	; (403674 <tone+0x88>)
  40360e:	fba8 0104 	umull	r0, r1, r8, r4
  403612:	4642      	mov	r2, r8
  403614:	17d3      	asrs	r3, r2, #31
  403616:	fb04 1103 	mla	r1, r4, r3, r1
  40361a:	4a17      	ldr	r2, [pc, #92]	; (403678 <tone+0x8c>)
  40361c:	2300      	movs	r3, #0
  40361e:	4c17      	ldr	r4, [pc, #92]	; (40367c <tone+0x90>)
  403620:	2500      	movs	r5, #0
  403622:	1900      	adds	r0, r0, r4
  403624:	4169      	adcs	r1, r5
  403626:	4c16      	ldr	r4, [pc, #88]	; (403680 <tone+0x94>)
  403628:	47a0      	blx	r4
  40362a:	4682      	mov	sl, r0
  40362c:	2400      	movs	r4, #0
		pio_clear(BUZZER_PIO,BUZZER_PIO_IDX_MASK);
  40362e:	4e15      	ldr	r6, [pc, #84]	; (403684 <tone+0x98>)
  403630:	f8df 905c 	ldr.w	r9, [pc, #92]	; 403690 <tone+0xa4>
		delay_us(t);
  403634:	4d14      	ldr	r5, [pc, #80]	; (403688 <tone+0x9c>)
  403636:	e00a      	b.n	40364e <tone+0x62>
  403638:	2033      	movs	r0, #51	; 0x33
  40363a:	47a8      	blx	r5
		pio_set(BUZZER_PIO,BUZZER_PIO_IDX_MASK);
  40363c:	2120      	movs	r1, #32
  40363e:	4630      	mov	r0, r6
  403640:	4b12      	ldr	r3, [pc, #72]	; (40368c <tone+0xa0>)
  403642:	4798      	blx	r3
		delay_us(t);
  403644:	2033      	movs	r0, #51	; 0x33
  403646:	47a8      	blx	r5
	for (int i = 0; i<ciclo; i++){
  403648:	3401      	adds	r4, #1
  40364a:	42a7      	cmp	r7, r4
  40364c:	d00e      	beq.n	40366c <tone+0x80>
		pio_clear(BUZZER_PIO,BUZZER_PIO_IDX_MASK);
  40364e:	2120      	movs	r1, #32
  403650:	4630      	mov	r0, r6
  403652:	47c8      	blx	r9
		delay_us(t);
  403654:	f1b8 0f00 	cmp.w	r8, #0
  403658:	d0ee      	beq.n	403638 <tone+0x4c>
  40365a:	4650      	mov	r0, sl
  40365c:	47a8      	blx	r5
		pio_set(BUZZER_PIO,BUZZER_PIO_IDX_MASK);
  40365e:	2120      	movs	r1, #32
  403660:	4630      	mov	r0, r6
  403662:	4b0a      	ldr	r3, [pc, #40]	; (40368c <tone+0xa0>)
  403664:	4798      	blx	r3
		delay_us(t);
  403666:	4650      	mov	r0, sl
  403668:	47a8      	blx	r5
  40366a:	e7ed      	b.n	403648 <tone+0x5c>
  40366c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403670:	000f4240 	.word	0x000f4240
  403674:	11e1a300 	.word	0x11e1a300
  403678:	005a83e0 	.word	0x005a83e0
  40367c:	005a83df 	.word	0x005a83df
  403680:	00403c55 	.word	0x00403c55
  403684:	400e0e00 	.word	0x400e0e00
  403688:	20400001 	.word	0x20400001
  40368c:	00400bfb 	.word	0x00400bfb
  403690:	00400bff 	.word	0x00400bff

00403694 <task_play>:
static void task_play (void *pvParameters){
  403694:	b580      	push	{r7, lr}
  403696:	b082      	sub	sp, #8
		if( xQueueReceive( xQueueCoins, &coins, ( TickType_t ) 500 )){
  403698:	4d2a      	ldr	r5, [pc, #168]	; (403744 <task_play+0xb0>)
  40369a:	4c2b      	ldr	r4, [pc, #172]	; (403748 <task_play+0xb4>)
			printf("Coins: %d \n",coins);
  40369c:	4e2b      	ldr	r6, [pc, #172]	; (40374c <task_play+0xb8>)
  40369e:	e00d      	b.n	4036bc <task_play+0x28>
				tone(NOTE_B5, 80);
  4036a0:	2150      	movs	r1, #80	; 0x50
  4036a2:	f44f 7077 	mov.w	r0, #988	; 0x3dc
  4036a6:	4f2a      	ldr	r7, [pc, #168]	; (403750 <task_play+0xbc>)
  4036a8:	47b8      	blx	r7
				tone(NOTE_E6, 640);
  4036aa:	f44f 7120 	mov.w	r1, #640	; 0x280
  4036ae:	f240 5027 	movw	r0, #1319	; 0x527
  4036b2:	47b8      	blx	r7
  4036b4:	e011      	b.n	4036da <task_play+0x46>
			if(coins == 3){
  4036b6:	9b01      	ldr	r3, [sp, #4]
  4036b8:	2b03      	cmp	r3, #3
  4036ba:	d025      	beq.n	403708 <task_play+0x74>
		if( xQueueReceive( xQueueCoins, &coins, ( TickType_t ) 500 )){
  4036bc:	2300      	movs	r3, #0
  4036be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4036c2:	a901      	add	r1, sp, #4
  4036c4:	6828      	ldr	r0, [r5, #0]
  4036c6:	47a0      	blx	r4
  4036c8:	2800      	cmp	r0, #0
  4036ca:	d0f7      	beq.n	4036bc <task_play+0x28>
			printf("Coins: %d \n",coins);
  4036cc:	9901      	ldr	r1, [sp, #4]
  4036ce:	4630      	mov	r0, r6
  4036d0:	4b20      	ldr	r3, [pc, #128]	; (403754 <task_play+0xc0>)
  4036d2:	4798      	blx	r3
			if(coins == 1){
  4036d4:	9b01      	ldr	r3, [sp, #4]
  4036d6:	2b01      	cmp	r3, #1
  4036d8:	d0e2      	beq.n	4036a0 <task_play+0xc>
			if(coins == 2){
  4036da:	9b01      	ldr	r3, [sp, #4]
  4036dc:	2b02      	cmp	r3, #2
  4036de:	d1ea      	bne.n	4036b6 <task_play+0x22>
				tone(NOTE_B5, 80);
  4036e0:	2150      	movs	r1, #80	; 0x50
  4036e2:	f44f 7077 	mov.w	r0, #988	; 0x3dc
  4036e6:	4f1a      	ldr	r7, [pc, #104]	; (403750 <task_play+0xbc>)
  4036e8:	47b8      	blx	r7
				tone(NOTE_E6, 640);
  4036ea:	f44f 7120 	mov.w	r1, #640	; 0x280
  4036ee:	f240 5027 	movw	r0, #1319	; 0x527
  4036f2:	47b8      	blx	r7
				tone(NOTE_B5, 80);
  4036f4:	2150      	movs	r1, #80	; 0x50
  4036f6:	f44f 7077 	mov.w	r0, #988	; 0x3dc
  4036fa:	47b8      	blx	r7
				tone(NOTE_E6, 640);
  4036fc:	f44f 7120 	mov.w	r1, #640	; 0x280
  403700:	f240 5027 	movw	r0, #1319	; 0x527
  403704:	47b8      	blx	r7
  403706:	e7d6      	b.n	4036b6 <task_play+0x22>
				tone(NOTE_B5, 80);
  403708:	2150      	movs	r1, #80	; 0x50
  40370a:	f44f 7077 	mov.w	r0, #988	; 0x3dc
  40370e:	4f10      	ldr	r7, [pc, #64]	; (403750 <task_play+0xbc>)
  403710:	47b8      	blx	r7
				tone(NOTE_E6, 640);
  403712:	f44f 7120 	mov.w	r1, #640	; 0x280
  403716:	f240 5027 	movw	r0, #1319	; 0x527
  40371a:	47b8      	blx	r7
				tone(NOTE_B5, 80);
  40371c:	2150      	movs	r1, #80	; 0x50
  40371e:	f44f 7077 	mov.w	r0, #988	; 0x3dc
  403722:	47b8      	blx	r7
				tone(NOTE_E6, 640);
  403724:	f44f 7120 	mov.w	r1, #640	; 0x280
  403728:	f240 5027 	movw	r0, #1319	; 0x527
  40372c:	47b8      	blx	r7
				tone(NOTE_B5, 80);
  40372e:	2150      	movs	r1, #80	; 0x50
  403730:	f44f 7077 	mov.w	r0, #988	; 0x3dc
  403734:	47b8      	blx	r7
				tone(NOTE_E6, 640);
  403736:	f44f 7120 	mov.w	r1, #640	; 0x280
  40373a:	f240 5027 	movw	r0, #1319	; 0x527
  40373e:	47b8      	blx	r7
  403740:	e7bc      	b.n	4036bc <task_play+0x28>
  403742:	bf00      	nop
  403744:	20400e20 	.word	0x20400e20
  403748:	00401ef1 	.word	0x00401ef1
  40374c:	00409230 	.word	0x00409230
  403750:	004035ed 	.word	0x004035ed
  403754:	0040471d 	.word	0x0040471d

00403758 <main>:
	
}
/************************************************************************/
/* main                                                                 */
/************************************************************************/
int main(void) {
  403758:	b500      	push	{lr}
  40375a:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  40375c:	4b41      	ldr	r3, [pc, #260]	; (403864 <main+0x10c>)
  40375e:	4798      	blx	r3
	board_init();
  403760:	4b41      	ldr	r3, [pc, #260]	; (403868 <main+0x110>)
  403762:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403764:	4d41      	ldr	r5, [pc, #260]	; (40386c <main+0x114>)
  403766:	4b42      	ldr	r3, [pc, #264]	; (403870 <main+0x118>)
  403768:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40376a:	4a42      	ldr	r2, [pc, #264]	; (403874 <main+0x11c>)
  40376c:	4b42      	ldr	r3, [pc, #264]	; (403878 <main+0x120>)
  40376e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403770:	4a42      	ldr	r2, [pc, #264]	; (40387c <main+0x124>)
  403772:	4b43      	ldr	r3, [pc, #268]	; (403880 <main+0x128>)
  403774:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403776:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40377a:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  40377c:	23c0      	movs	r3, #192	; 0xc0
  40377e:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  403780:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403784:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  403786:	2400      	movs	r4, #0
  403788:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40378a:	9408      	str	r4, [sp, #32]
  40378c:	200e      	movs	r0, #14
  40378e:	4b3d      	ldr	r3, [pc, #244]	; (403884 <main+0x12c>)
  403790:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403792:	4a3d      	ldr	r2, [pc, #244]	; (403888 <main+0x130>)
  403794:	a904      	add	r1, sp, #16
  403796:	4628      	mov	r0, r5
  403798:	4b3c      	ldr	r3, [pc, #240]	; (40388c <main+0x134>)
  40379a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40379c:	4628      	mov	r0, r5
  40379e:	4b3c      	ldr	r3, [pc, #240]	; (403890 <main+0x138>)
  4037a0:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4037a2:	4628      	mov	r0, r5
  4037a4:	4b3b      	ldr	r3, [pc, #236]	; (403894 <main+0x13c>)
  4037a6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4037a8:	4e3b      	ldr	r6, [pc, #236]	; (403898 <main+0x140>)
  4037aa:	6833      	ldr	r3, [r6, #0]
  4037ac:	4621      	mov	r1, r4
  4037ae:	6898      	ldr	r0, [r3, #8]
  4037b0:	4d3a      	ldr	r5, [pc, #232]	; (40389c <main+0x144>)
  4037b2:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4037b4:	6833      	ldr	r3, [r6, #0]
  4037b6:	4621      	mov	r1, r4
  4037b8:	6858      	ldr	r0, [r3, #4]
  4037ba:	47a8      	blx	r5
	setbuf(stdout, NULL);
  4037bc:	6833      	ldr	r3, [r6, #0]
  4037be:	4621      	mov	r1, r4
  4037c0:	6898      	ldr	r0, [r3, #8]
  4037c2:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();
	
	/* Inicializar botão */
	btn_init();
  4037c4:	4b36      	ldr	r3, [pc, #216]	; (4038a0 <main+0x148>)
  4037c6:	4798      	blx	r3
	
	
	
	// cria semáforo binário
	xBtnSemaphore = xSemaphoreCreateBinary();
  4037c8:	2203      	movs	r2, #3
  4037ca:	4621      	mov	r1, r4
  4037cc:	2001      	movs	r0, #1
  4037ce:	4b35      	ldr	r3, [pc, #212]	; (4038a4 <main+0x14c>)
  4037d0:	4798      	blx	r3
  4037d2:	4b35      	ldr	r3, [pc, #212]	; (4038a8 <main+0x150>)
  4037d4:	6018      	str	r0, [r3, #0]

	// verifica se semáforo foi criado corretamente
	if (xBtnSemaphore == NULL){
  4037d6:	2800      	cmp	r0, #0
  4037d8:	d03c      	beq.n	403854 <main+0xfc>
		printf("falha em criar o semaforo \n");
	}
	
	// cria fila de 32 slots de char
	xQueueCoins = xQueueCreate(32, sizeof(int));
  4037da:	2200      	movs	r2, #0
  4037dc:	2104      	movs	r1, #4
  4037de:	2020      	movs	r0, #32
  4037e0:	4b30      	ldr	r3, [pc, #192]	; (4038a4 <main+0x14c>)
  4037e2:	4798      	blx	r3
  4037e4:	4b31      	ldr	r3, [pc, #196]	; (4038ac <main+0x154>)
  4037e6:	6018      	str	r0, [r3, #0]

	// verifica se fila foi criada corretamente
	if (xQueueCoins == NULL){
  4037e8:	2800      	cmp	r0, #0
  4037ea:	d037      	beq.n	40385c <main+0x104>
		printf("falha em criar a fila \n");
	}
		
	
	if (xTaskCreate(task_debug, "debug", TASK_OLED_STACK_SIZE, NULL,
  4037ec:	2300      	movs	r3, #0
  4037ee:	9303      	str	r3, [sp, #12]
  4037f0:	9302      	str	r3, [sp, #8]
  4037f2:	9301      	str	r3, [sp, #4]
  4037f4:	9300      	str	r3, [sp, #0]
  4037f6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4037fa:	492d      	ldr	r1, [pc, #180]	; (4038b0 <main+0x158>)
  4037fc:	482d      	ldr	r0, [pc, #180]	; (4038b4 <main+0x15c>)
  4037fe:	4c2e      	ldr	r4, [pc, #184]	; (4038b8 <main+0x160>)
  403800:	47a0      	blx	r4
  403802:	2801      	cmp	r0, #1
  403804:	d002      	beq.n	40380c <main+0xb4>
	TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create debug task\r\n");
  403806:	482d      	ldr	r0, [pc, #180]	; (4038bc <main+0x164>)
  403808:	4b2d      	ldr	r3, [pc, #180]	; (4038c0 <main+0x168>)
  40380a:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_coins, "coins", TASK_COINS_STACK_SIZE, NULL, TASK_COINS_STACK_PRIORITY, NULL) != pdPASS) {
  40380c:	2300      	movs	r3, #0
  40380e:	9303      	str	r3, [sp, #12]
  403810:	9302      	str	r3, [sp, #8]
  403812:	9301      	str	r3, [sp, #4]
  403814:	9300      	str	r3, [sp, #0]
  403816:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40381a:	492a      	ldr	r1, [pc, #168]	; (4038c4 <main+0x16c>)
  40381c:	482a      	ldr	r0, [pc, #168]	; (4038c8 <main+0x170>)
  40381e:	4c26      	ldr	r4, [pc, #152]	; (4038b8 <main+0x160>)
  403820:	47a0      	blx	r4
  403822:	2801      	cmp	r0, #1
  403824:	d002      	beq.n	40382c <main+0xd4>
		printf("Failed to create coins task\r\n");
  403826:	4829      	ldr	r0, [pc, #164]	; (4038cc <main+0x174>)
  403828:	4b25      	ldr	r3, [pc, #148]	; (4038c0 <main+0x168>)
  40382a:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_play, "play", TASK_PLAY_STACK_SIZE, NULL, TASK_PLAY_STACK_PRIORITY, NULL) != pdPASS) {
  40382c:	2300      	movs	r3, #0
  40382e:	9303      	str	r3, [sp, #12]
  403830:	9302      	str	r3, [sp, #8]
  403832:	9301      	str	r3, [sp, #4]
  403834:	2201      	movs	r2, #1
  403836:	9200      	str	r2, [sp, #0]
  403838:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40383c:	4924      	ldr	r1, [pc, #144]	; (4038d0 <main+0x178>)
  40383e:	4825      	ldr	r0, [pc, #148]	; (4038d4 <main+0x17c>)
  403840:	4c1d      	ldr	r4, [pc, #116]	; (4038b8 <main+0x160>)
  403842:	47a0      	blx	r4
  403844:	2801      	cmp	r0, #1
  403846:	d002      	beq.n	40384e <main+0xf6>
		printf("Failed to create coins task\r\n");
  403848:	4820      	ldr	r0, [pc, #128]	; (4038cc <main+0x174>)
  40384a:	4b1d      	ldr	r3, [pc, #116]	; (4038c0 <main+0x168>)
  40384c:	4798      	blx	r3
	}
	
	

	/* Start the scheduler. */
	vTaskStartScheduler();
  40384e:	4b22      	ldr	r3, [pc, #136]	; (4038d8 <main+0x180>)
  403850:	4798      	blx	r3
  403852:	e7fe      	b.n	403852 <main+0xfa>
		printf("falha em criar o semaforo \n");
  403854:	4821      	ldr	r0, [pc, #132]	; (4038dc <main+0x184>)
  403856:	4b1a      	ldr	r3, [pc, #104]	; (4038c0 <main+0x168>)
  403858:	4798      	blx	r3
  40385a:	e7be      	b.n	4037da <main+0x82>
		printf("falha em criar a fila \n");
  40385c:	4820      	ldr	r0, [pc, #128]	; (4038e0 <main+0x188>)
  40385e:	4b18      	ldr	r3, [pc, #96]	; (4038c0 <main+0x168>)
  403860:	4798      	blx	r3
  403862:	e7c3      	b.n	4037ec <main+0x94>
  403864:	0040094d 	.word	0x0040094d
  403868:	00400a49 	.word	0x00400a49
  40386c:	40028000 	.word	0x40028000
  403870:	20400ddc 	.word	0x20400ddc
  403874:	004032bd 	.word	0x004032bd
  403878:	20400dd8 	.word	0x20400dd8
  40387c:	004031e1 	.word	0x004031e1
  403880:	20400dd4 	.word	0x20400dd4
  403884:	00401009 	.word	0x00401009
  403888:	08f0d180 	.word	0x08f0d180
  40388c:	00401105 	.word	0x00401105
  403890:	00401159 	.word	0x00401159
  403894:	0040115f 	.word	0x0040115f
  403898:	20400014 	.word	0x20400014
  40389c:	00404869 	.word	0x00404869
  4038a0:	004033c1 	.word	0x004033c1
  4038a4:	00401ab1 	.word	0x00401ab1
  4038a8:	20400e24 	.word	0x20400e24
  4038ac:	20400e20 	.word	0x20400e20
  4038b0:	004091cc 	.word	0x004091cc
  4038b4:	0040319d 	.word	0x0040319d
  4038b8:	004021d1 	.word	0x004021d1
  4038bc:	004091d4 	.word	0x004091d4
  4038c0:	004047e1 	.word	0x004047e1
  4038c4:	004091f4 	.word	0x004091f4
  4038c8:	0040351d 	.word	0x0040351d
  4038cc:	004091fc 	.word	0x004091fc
  4038d0:	0040921c 	.word	0x0040921c
  4038d4:	00403695 	.word	0x00403695
  4038d8:	00402405 	.word	0x00402405
  4038dc:	00409198 	.word	0x00409198
  4038e0:	004091b4 	.word	0x004091b4

004038e4 <__aeabi_drsub>:
  4038e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4038e8:	e002      	b.n	4038f0 <__adddf3>
  4038ea:	bf00      	nop

004038ec <__aeabi_dsub>:
  4038ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004038f0 <__adddf3>:
  4038f0:	b530      	push	{r4, r5, lr}
  4038f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4038f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4038fa:	ea94 0f05 	teq	r4, r5
  4038fe:	bf08      	it	eq
  403900:	ea90 0f02 	teqeq	r0, r2
  403904:	bf1f      	itttt	ne
  403906:	ea54 0c00 	orrsne.w	ip, r4, r0
  40390a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40390e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403912:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403916:	f000 80e2 	beq.w	403ade <__adddf3+0x1ee>
  40391a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40391e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403922:	bfb8      	it	lt
  403924:	426d      	neglt	r5, r5
  403926:	dd0c      	ble.n	403942 <__adddf3+0x52>
  403928:	442c      	add	r4, r5
  40392a:	ea80 0202 	eor.w	r2, r0, r2
  40392e:	ea81 0303 	eor.w	r3, r1, r3
  403932:	ea82 0000 	eor.w	r0, r2, r0
  403936:	ea83 0101 	eor.w	r1, r3, r1
  40393a:	ea80 0202 	eor.w	r2, r0, r2
  40393e:	ea81 0303 	eor.w	r3, r1, r3
  403942:	2d36      	cmp	r5, #54	; 0x36
  403944:	bf88      	it	hi
  403946:	bd30      	pophi	{r4, r5, pc}
  403948:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40394c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403950:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403954:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  403958:	d002      	beq.n	403960 <__adddf3+0x70>
  40395a:	4240      	negs	r0, r0
  40395c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403960:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  403964:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403968:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40396c:	d002      	beq.n	403974 <__adddf3+0x84>
  40396e:	4252      	negs	r2, r2
  403970:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403974:	ea94 0f05 	teq	r4, r5
  403978:	f000 80a7 	beq.w	403aca <__adddf3+0x1da>
  40397c:	f1a4 0401 	sub.w	r4, r4, #1
  403980:	f1d5 0e20 	rsbs	lr, r5, #32
  403984:	db0d      	blt.n	4039a2 <__adddf3+0xb2>
  403986:	fa02 fc0e 	lsl.w	ip, r2, lr
  40398a:	fa22 f205 	lsr.w	r2, r2, r5
  40398e:	1880      	adds	r0, r0, r2
  403990:	f141 0100 	adc.w	r1, r1, #0
  403994:	fa03 f20e 	lsl.w	r2, r3, lr
  403998:	1880      	adds	r0, r0, r2
  40399a:	fa43 f305 	asr.w	r3, r3, r5
  40399e:	4159      	adcs	r1, r3
  4039a0:	e00e      	b.n	4039c0 <__adddf3+0xd0>
  4039a2:	f1a5 0520 	sub.w	r5, r5, #32
  4039a6:	f10e 0e20 	add.w	lr, lr, #32
  4039aa:	2a01      	cmp	r2, #1
  4039ac:	fa03 fc0e 	lsl.w	ip, r3, lr
  4039b0:	bf28      	it	cs
  4039b2:	f04c 0c02 	orrcs.w	ip, ip, #2
  4039b6:	fa43 f305 	asr.w	r3, r3, r5
  4039ba:	18c0      	adds	r0, r0, r3
  4039bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4039c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4039c4:	d507      	bpl.n	4039d6 <__adddf3+0xe6>
  4039c6:	f04f 0e00 	mov.w	lr, #0
  4039ca:	f1dc 0c00 	rsbs	ip, ip, #0
  4039ce:	eb7e 0000 	sbcs.w	r0, lr, r0
  4039d2:	eb6e 0101 	sbc.w	r1, lr, r1
  4039d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4039da:	d31b      	bcc.n	403a14 <__adddf3+0x124>
  4039dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4039e0:	d30c      	bcc.n	4039fc <__adddf3+0x10c>
  4039e2:	0849      	lsrs	r1, r1, #1
  4039e4:	ea5f 0030 	movs.w	r0, r0, rrx
  4039e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4039ec:	f104 0401 	add.w	r4, r4, #1
  4039f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4039f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4039f8:	f080 809a 	bcs.w	403b30 <__adddf3+0x240>
  4039fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403a00:	bf08      	it	eq
  403a02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403a06:	f150 0000 	adcs.w	r0, r0, #0
  403a0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403a0e:	ea41 0105 	orr.w	r1, r1, r5
  403a12:	bd30      	pop	{r4, r5, pc}
  403a14:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  403a18:	4140      	adcs	r0, r0
  403a1a:	eb41 0101 	adc.w	r1, r1, r1
  403a1e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403a22:	f1a4 0401 	sub.w	r4, r4, #1
  403a26:	d1e9      	bne.n	4039fc <__adddf3+0x10c>
  403a28:	f091 0f00 	teq	r1, #0
  403a2c:	bf04      	itt	eq
  403a2e:	4601      	moveq	r1, r0
  403a30:	2000      	moveq	r0, #0
  403a32:	fab1 f381 	clz	r3, r1
  403a36:	bf08      	it	eq
  403a38:	3320      	addeq	r3, #32
  403a3a:	f1a3 030b 	sub.w	r3, r3, #11
  403a3e:	f1b3 0220 	subs.w	r2, r3, #32
  403a42:	da0c      	bge.n	403a5e <__adddf3+0x16e>
  403a44:	320c      	adds	r2, #12
  403a46:	dd08      	ble.n	403a5a <__adddf3+0x16a>
  403a48:	f102 0c14 	add.w	ip, r2, #20
  403a4c:	f1c2 020c 	rsb	r2, r2, #12
  403a50:	fa01 f00c 	lsl.w	r0, r1, ip
  403a54:	fa21 f102 	lsr.w	r1, r1, r2
  403a58:	e00c      	b.n	403a74 <__adddf3+0x184>
  403a5a:	f102 0214 	add.w	r2, r2, #20
  403a5e:	bfd8      	it	le
  403a60:	f1c2 0c20 	rsble	ip, r2, #32
  403a64:	fa01 f102 	lsl.w	r1, r1, r2
  403a68:	fa20 fc0c 	lsr.w	ip, r0, ip
  403a6c:	bfdc      	itt	le
  403a6e:	ea41 010c 	orrle.w	r1, r1, ip
  403a72:	4090      	lslle	r0, r2
  403a74:	1ae4      	subs	r4, r4, r3
  403a76:	bfa2      	ittt	ge
  403a78:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403a7c:	4329      	orrge	r1, r5
  403a7e:	bd30      	popge	{r4, r5, pc}
  403a80:	ea6f 0404 	mvn.w	r4, r4
  403a84:	3c1f      	subs	r4, #31
  403a86:	da1c      	bge.n	403ac2 <__adddf3+0x1d2>
  403a88:	340c      	adds	r4, #12
  403a8a:	dc0e      	bgt.n	403aaa <__adddf3+0x1ba>
  403a8c:	f104 0414 	add.w	r4, r4, #20
  403a90:	f1c4 0220 	rsb	r2, r4, #32
  403a94:	fa20 f004 	lsr.w	r0, r0, r4
  403a98:	fa01 f302 	lsl.w	r3, r1, r2
  403a9c:	ea40 0003 	orr.w	r0, r0, r3
  403aa0:	fa21 f304 	lsr.w	r3, r1, r4
  403aa4:	ea45 0103 	orr.w	r1, r5, r3
  403aa8:	bd30      	pop	{r4, r5, pc}
  403aaa:	f1c4 040c 	rsb	r4, r4, #12
  403aae:	f1c4 0220 	rsb	r2, r4, #32
  403ab2:	fa20 f002 	lsr.w	r0, r0, r2
  403ab6:	fa01 f304 	lsl.w	r3, r1, r4
  403aba:	ea40 0003 	orr.w	r0, r0, r3
  403abe:	4629      	mov	r1, r5
  403ac0:	bd30      	pop	{r4, r5, pc}
  403ac2:	fa21 f004 	lsr.w	r0, r1, r4
  403ac6:	4629      	mov	r1, r5
  403ac8:	bd30      	pop	{r4, r5, pc}
  403aca:	f094 0f00 	teq	r4, #0
  403ace:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403ad2:	bf06      	itte	eq
  403ad4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403ad8:	3401      	addeq	r4, #1
  403ada:	3d01      	subne	r5, #1
  403adc:	e74e      	b.n	40397c <__adddf3+0x8c>
  403ade:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403ae2:	bf18      	it	ne
  403ae4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403ae8:	d029      	beq.n	403b3e <__adddf3+0x24e>
  403aea:	ea94 0f05 	teq	r4, r5
  403aee:	bf08      	it	eq
  403af0:	ea90 0f02 	teqeq	r0, r2
  403af4:	d005      	beq.n	403b02 <__adddf3+0x212>
  403af6:	ea54 0c00 	orrs.w	ip, r4, r0
  403afa:	bf04      	itt	eq
  403afc:	4619      	moveq	r1, r3
  403afe:	4610      	moveq	r0, r2
  403b00:	bd30      	pop	{r4, r5, pc}
  403b02:	ea91 0f03 	teq	r1, r3
  403b06:	bf1e      	ittt	ne
  403b08:	2100      	movne	r1, #0
  403b0a:	2000      	movne	r0, #0
  403b0c:	bd30      	popne	{r4, r5, pc}
  403b0e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403b12:	d105      	bne.n	403b20 <__adddf3+0x230>
  403b14:	0040      	lsls	r0, r0, #1
  403b16:	4149      	adcs	r1, r1
  403b18:	bf28      	it	cs
  403b1a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403b1e:	bd30      	pop	{r4, r5, pc}
  403b20:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403b24:	bf3c      	itt	cc
  403b26:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  403b2a:	bd30      	popcc	{r4, r5, pc}
  403b2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403b30:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403b34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403b38:	f04f 0000 	mov.w	r0, #0
  403b3c:	bd30      	pop	{r4, r5, pc}
  403b3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403b42:	bf1a      	itte	ne
  403b44:	4619      	movne	r1, r3
  403b46:	4610      	movne	r0, r2
  403b48:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403b4c:	bf1c      	itt	ne
  403b4e:	460b      	movne	r3, r1
  403b50:	4602      	movne	r2, r0
  403b52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403b56:	bf06      	itte	eq
  403b58:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403b5c:	ea91 0f03 	teqeq	r1, r3
  403b60:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  403b64:	bd30      	pop	{r4, r5, pc}
  403b66:	bf00      	nop

00403b68 <__aeabi_ui2d>:
  403b68:	f090 0f00 	teq	r0, #0
  403b6c:	bf04      	itt	eq
  403b6e:	2100      	moveq	r1, #0
  403b70:	4770      	bxeq	lr
  403b72:	b530      	push	{r4, r5, lr}
  403b74:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403b78:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403b7c:	f04f 0500 	mov.w	r5, #0
  403b80:	f04f 0100 	mov.w	r1, #0
  403b84:	e750      	b.n	403a28 <__adddf3+0x138>
  403b86:	bf00      	nop

00403b88 <__aeabi_i2d>:
  403b88:	f090 0f00 	teq	r0, #0
  403b8c:	bf04      	itt	eq
  403b8e:	2100      	moveq	r1, #0
  403b90:	4770      	bxeq	lr
  403b92:	b530      	push	{r4, r5, lr}
  403b94:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403b98:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403b9c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403ba0:	bf48      	it	mi
  403ba2:	4240      	negmi	r0, r0
  403ba4:	f04f 0100 	mov.w	r1, #0
  403ba8:	e73e      	b.n	403a28 <__adddf3+0x138>
  403baa:	bf00      	nop

00403bac <__aeabi_f2d>:
  403bac:	0042      	lsls	r2, r0, #1
  403bae:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403bb2:	ea4f 0131 	mov.w	r1, r1, rrx
  403bb6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403bba:	bf1f      	itttt	ne
  403bbc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403bc0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403bc4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403bc8:	4770      	bxne	lr
  403bca:	f092 0f00 	teq	r2, #0
  403bce:	bf14      	ite	ne
  403bd0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403bd4:	4770      	bxeq	lr
  403bd6:	b530      	push	{r4, r5, lr}
  403bd8:	f44f 7460 	mov.w	r4, #896	; 0x380
  403bdc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403be0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403be4:	e720      	b.n	403a28 <__adddf3+0x138>
  403be6:	bf00      	nop

00403be8 <__aeabi_ul2d>:
  403be8:	ea50 0201 	orrs.w	r2, r0, r1
  403bec:	bf08      	it	eq
  403bee:	4770      	bxeq	lr
  403bf0:	b530      	push	{r4, r5, lr}
  403bf2:	f04f 0500 	mov.w	r5, #0
  403bf6:	e00a      	b.n	403c0e <__aeabi_l2d+0x16>

00403bf8 <__aeabi_l2d>:
  403bf8:	ea50 0201 	orrs.w	r2, r0, r1
  403bfc:	bf08      	it	eq
  403bfe:	4770      	bxeq	lr
  403c00:	b530      	push	{r4, r5, lr}
  403c02:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  403c06:	d502      	bpl.n	403c0e <__aeabi_l2d+0x16>
  403c08:	4240      	negs	r0, r0
  403c0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403c0e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403c12:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403c16:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  403c1a:	f43f aedc 	beq.w	4039d6 <__adddf3+0xe6>
  403c1e:	f04f 0203 	mov.w	r2, #3
  403c22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403c26:	bf18      	it	ne
  403c28:	3203      	addne	r2, #3
  403c2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403c2e:	bf18      	it	ne
  403c30:	3203      	addne	r2, #3
  403c32:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  403c36:	f1c2 0320 	rsb	r3, r2, #32
  403c3a:	fa00 fc03 	lsl.w	ip, r0, r3
  403c3e:	fa20 f002 	lsr.w	r0, r0, r2
  403c42:	fa01 fe03 	lsl.w	lr, r1, r3
  403c46:	ea40 000e 	orr.w	r0, r0, lr
  403c4a:	fa21 f102 	lsr.w	r1, r1, r2
  403c4e:	4414      	add	r4, r2
  403c50:	e6c1      	b.n	4039d6 <__adddf3+0xe6>
  403c52:	bf00      	nop

00403c54 <__aeabi_uldivmod>:
  403c54:	b953      	cbnz	r3, 403c6c <__aeabi_uldivmod+0x18>
  403c56:	b94a      	cbnz	r2, 403c6c <__aeabi_uldivmod+0x18>
  403c58:	2900      	cmp	r1, #0
  403c5a:	bf08      	it	eq
  403c5c:	2800      	cmpeq	r0, #0
  403c5e:	bf1c      	itt	ne
  403c60:	f04f 31ff 	movne.w	r1, #4294967295
  403c64:	f04f 30ff 	movne.w	r0, #4294967295
  403c68:	f000 b97a 	b.w	403f60 <__aeabi_idiv0>
  403c6c:	f1ad 0c08 	sub.w	ip, sp, #8
  403c70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403c74:	f000 f806 	bl	403c84 <__udivmoddi4>
  403c78:	f8dd e004 	ldr.w	lr, [sp, #4]
  403c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403c80:	b004      	add	sp, #16
  403c82:	4770      	bx	lr

00403c84 <__udivmoddi4>:
  403c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403c88:	468c      	mov	ip, r1
  403c8a:	460d      	mov	r5, r1
  403c8c:	4604      	mov	r4, r0
  403c8e:	9e08      	ldr	r6, [sp, #32]
  403c90:	2b00      	cmp	r3, #0
  403c92:	d151      	bne.n	403d38 <__udivmoddi4+0xb4>
  403c94:	428a      	cmp	r2, r1
  403c96:	4617      	mov	r7, r2
  403c98:	d96d      	bls.n	403d76 <__udivmoddi4+0xf2>
  403c9a:	fab2 fe82 	clz	lr, r2
  403c9e:	f1be 0f00 	cmp.w	lr, #0
  403ca2:	d00b      	beq.n	403cbc <__udivmoddi4+0x38>
  403ca4:	f1ce 0c20 	rsb	ip, lr, #32
  403ca8:	fa01 f50e 	lsl.w	r5, r1, lr
  403cac:	fa20 fc0c 	lsr.w	ip, r0, ip
  403cb0:	fa02 f70e 	lsl.w	r7, r2, lr
  403cb4:	ea4c 0c05 	orr.w	ip, ip, r5
  403cb8:	fa00 f40e 	lsl.w	r4, r0, lr
  403cbc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  403cc0:	0c25      	lsrs	r5, r4, #16
  403cc2:	fbbc f8fa 	udiv	r8, ip, sl
  403cc6:	fa1f f987 	uxth.w	r9, r7
  403cca:	fb0a cc18 	mls	ip, sl, r8, ip
  403cce:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  403cd2:	fb08 f309 	mul.w	r3, r8, r9
  403cd6:	42ab      	cmp	r3, r5
  403cd8:	d90a      	bls.n	403cf0 <__udivmoddi4+0x6c>
  403cda:	19ed      	adds	r5, r5, r7
  403cdc:	f108 32ff 	add.w	r2, r8, #4294967295
  403ce0:	f080 8123 	bcs.w	403f2a <__udivmoddi4+0x2a6>
  403ce4:	42ab      	cmp	r3, r5
  403ce6:	f240 8120 	bls.w	403f2a <__udivmoddi4+0x2a6>
  403cea:	f1a8 0802 	sub.w	r8, r8, #2
  403cee:	443d      	add	r5, r7
  403cf0:	1aed      	subs	r5, r5, r3
  403cf2:	b2a4      	uxth	r4, r4
  403cf4:	fbb5 f0fa 	udiv	r0, r5, sl
  403cf8:	fb0a 5510 	mls	r5, sl, r0, r5
  403cfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  403d00:	fb00 f909 	mul.w	r9, r0, r9
  403d04:	45a1      	cmp	r9, r4
  403d06:	d909      	bls.n	403d1c <__udivmoddi4+0x98>
  403d08:	19e4      	adds	r4, r4, r7
  403d0a:	f100 33ff 	add.w	r3, r0, #4294967295
  403d0e:	f080 810a 	bcs.w	403f26 <__udivmoddi4+0x2a2>
  403d12:	45a1      	cmp	r9, r4
  403d14:	f240 8107 	bls.w	403f26 <__udivmoddi4+0x2a2>
  403d18:	3802      	subs	r0, #2
  403d1a:	443c      	add	r4, r7
  403d1c:	eba4 0409 	sub.w	r4, r4, r9
  403d20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403d24:	2100      	movs	r1, #0
  403d26:	2e00      	cmp	r6, #0
  403d28:	d061      	beq.n	403dee <__udivmoddi4+0x16a>
  403d2a:	fa24 f40e 	lsr.w	r4, r4, lr
  403d2e:	2300      	movs	r3, #0
  403d30:	6034      	str	r4, [r6, #0]
  403d32:	6073      	str	r3, [r6, #4]
  403d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d38:	428b      	cmp	r3, r1
  403d3a:	d907      	bls.n	403d4c <__udivmoddi4+0xc8>
  403d3c:	2e00      	cmp	r6, #0
  403d3e:	d054      	beq.n	403dea <__udivmoddi4+0x166>
  403d40:	2100      	movs	r1, #0
  403d42:	e886 0021 	stmia.w	r6, {r0, r5}
  403d46:	4608      	mov	r0, r1
  403d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d4c:	fab3 f183 	clz	r1, r3
  403d50:	2900      	cmp	r1, #0
  403d52:	f040 808e 	bne.w	403e72 <__udivmoddi4+0x1ee>
  403d56:	42ab      	cmp	r3, r5
  403d58:	d302      	bcc.n	403d60 <__udivmoddi4+0xdc>
  403d5a:	4282      	cmp	r2, r0
  403d5c:	f200 80fa 	bhi.w	403f54 <__udivmoddi4+0x2d0>
  403d60:	1a84      	subs	r4, r0, r2
  403d62:	eb65 0503 	sbc.w	r5, r5, r3
  403d66:	2001      	movs	r0, #1
  403d68:	46ac      	mov	ip, r5
  403d6a:	2e00      	cmp	r6, #0
  403d6c:	d03f      	beq.n	403dee <__udivmoddi4+0x16a>
  403d6e:	e886 1010 	stmia.w	r6, {r4, ip}
  403d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403d76:	b912      	cbnz	r2, 403d7e <__udivmoddi4+0xfa>
  403d78:	2701      	movs	r7, #1
  403d7a:	fbb7 f7f2 	udiv	r7, r7, r2
  403d7e:	fab7 fe87 	clz	lr, r7
  403d82:	f1be 0f00 	cmp.w	lr, #0
  403d86:	d134      	bne.n	403df2 <__udivmoddi4+0x16e>
  403d88:	1beb      	subs	r3, r5, r7
  403d8a:	0c3a      	lsrs	r2, r7, #16
  403d8c:	fa1f fc87 	uxth.w	ip, r7
  403d90:	2101      	movs	r1, #1
  403d92:	fbb3 f8f2 	udiv	r8, r3, r2
  403d96:	0c25      	lsrs	r5, r4, #16
  403d98:	fb02 3318 	mls	r3, r2, r8, r3
  403d9c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403da0:	fb0c f308 	mul.w	r3, ip, r8
  403da4:	42ab      	cmp	r3, r5
  403da6:	d907      	bls.n	403db8 <__udivmoddi4+0x134>
  403da8:	19ed      	adds	r5, r5, r7
  403daa:	f108 30ff 	add.w	r0, r8, #4294967295
  403dae:	d202      	bcs.n	403db6 <__udivmoddi4+0x132>
  403db0:	42ab      	cmp	r3, r5
  403db2:	f200 80d1 	bhi.w	403f58 <__udivmoddi4+0x2d4>
  403db6:	4680      	mov	r8, r0
  403db8:	1aed      	subs	r5, r5, r3
  403dba:	b2a3      	uxth	r3, r4
  403dbc:	fbb5 f0f2 	udiv	r0, r5, r2
  403dc0:	fb02 5510 	mls	r5, r2, r0, r5
  403dc4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403dc8:	fb0c fc00 	mul.w	ip, ip, r0
  403dcc:	45a4      	cmp	ip, r4
  403dce:	d907      	bls.n	403de0 <__udivmoddi4+0x15c>
  403dd0:	19e4      	adds	r4, r4, r7
  403dd2:	f100 33ff 	add.w	r3, r0, #4294967295
  403dd6:	d202      	bcs.n	403dde <__udivmoddi4+0x15a>
  403dd8:	45a4      	cmp	ip, r4
  403dda:	f200 80b8 	bhi.w	403f4e <__udivmoddi4+0x2ca>
  403dde:	4618      	mov	r0, r3
  403de0:	eba4 040c 	sub.w	r4, r4, ip
  403de4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403de8:	e79d      	b.n	403d26 <__udivmoddi4+0xa2>
  403dea:	4631      	mov	r1, r6
  403dec:	4630      	mov	r0, r6
  403dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403df2:	f1ce 0420 	rsb	r4, lr, #32
  403df6:	fa05 f30e 	lsl.w	r3, r5, lr
  403dfa:	fa07 f70e 	lsl.w	r7, r7, lr
  403dfe:	fa20 f804 	lsr.w	r8, r0, r4
  403e02:	0c3a      	lsrs	r2, r7, #16
  403e04:	fa25 f404 	lsr.w	r4, r5, r4
  403e08:	ea48 0803 	orr.w	r8, r8, r3
  403e0c:	fbb4 f1f2 	udiv	r1, r4, r2
  403e10:	ea4f 4518 	mov.w	r5, r8, lsr #16
  403e14:	fb02 4411 	mls	r4, r2, r1, r4
  403e18:	fa1f fc87 	uxth.w	ip, r7
  403e1c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  403e20:	fb01 f30c 	mul.w	r3, r1, ip
  403e24:	42ab      	cmp	r3, r5
  403e26:	fa00 f40e 	lsl.w	r4, r0, lr
  403e2a:	d909      	bls.n	403e40 <__udivmoddi4+0x1bc>
  403e2c:	19ed      	adds	r5, r5, r7
  403e2e:	f101 30ff 	add.w	r0, r1, #4294967295
  403e32:	f080 808a 	bcs.w	403f4a <__udivmoddi4+0x2c6>
  403e36:	42ab      	cmp	r3, r5
  403e38:	f240 8087 	bls.w	403f4a <__udivmoddi4+0x2c6>
  403e3c:	3902      	subs	r1, #2
  403e3e:	443d      	add	r5, r7
  403e40:	1aeb      	subs	r3, r5, r3
  403e42:	fa1f f588 	uxth.w	r5, r8
  403e46:	fbb3 f0f2 	udiv	r0, r3, r2
  403e4a:	fb02 3310 	mls	r3, r2, r0, r3
  403e4e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  403e52:	fb00 f30c 	mul.w	r3, r0, ip
  403e56:	42ab      	cmp	r3, r5
  403e58:	d907      	bls.n	403e6a <__udivmoddi4+0x1e6>
  403e5a:	19ed      	adds	r5, r5, r7
  403e5c:	f100 38ff 	add.w	r8, r0, #4294967295
  403e60:	d26f      	bcs.n	403f42 <__udivmoddi4+0x2be>
  403e62:	42ab      	cmp	r3, r5
  403e64:	d96d      	bls.n	403f42 <__udivmoddi4+0x2be>
  403e66:	3802      	subs	r0, #2
  403e68:	443d      	add	r5, r7
  403e6a:	1aeb      	subs	r3, r5, r3
  403e6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  403e70:	e78f      	b.n	403d92 <__udivmoddi4+0x10e>
  403e72:	f1c1 0720 	rsb	r7, r1, #32
  403e76:	fa22 f807 	lsr.w	r8, r2, r7
  403e7a:	408b      	lsls	r3, r1
  403e7c:	fa05 f401 	lsl.w	r4, r5, r1
  403e80:	ea48 0303 	orr.w	r3, r8, r3
  403e84:	fa20 fe07 	lsr.w	lr, r0, r7
  403e88:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403e8c:	40fd      	lsrs	r5, r7
  403e8e:	ea4e 0e04 	orr.w	lr, lr, r4
  403e92:	fbb5 f9fc 	udiv	r9, r5, ip
  403e96:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403e9a:	fb0c 5519 	mls	r5, ip, r9, r5
  403e9e:	fa1f f883 	uxth.w	r8, r3
  403ea2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403ea6:	fb09 f408 	mul.w	r4, r9, r8
  403eaa:	42ac      	cmp	r4, r5
  403eac:	fa02 f201 	lsl.w	r2, r2, r1
  403eb0:	fa00 fa01 	lsl.w	sl, r0, r1
  403eb4:	d908      	bls.n	403ec8 <__udivmoddi4+0x244>
  403eb6:	18ed      	adds	r5, r5, r3
  403eb8:	f109 30ff 	add.w	r0, r9, #4294967295
  403ebc:	d243      	bcs.n	403f46 <__udivmoddi4+0x2c2>
  403ebe:	42ac      	cmp	r4, r5
  403ec0:	d941      	bls.n	403f46 <__udivmoddi4+0x2c2>
  403ec2:	f1a9 0902 	sub.w	r9, r9, #2
  403ec6:	441d      	add	r5, r3
  403ec8:	1b2d      	subs	r5, r5, r4
  403eca:	fa1f fe8e 	uxth.w	lr, lr
  403ece:	fbb5 f0fc 	udiv	r0, r5, ip
  403ed2:	fb0c 5510 	mls	r5, ip, r0, r5
  403ed6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403eda:	fb00 f808 	mul.w	r8, r0, r8
  403ede:	45a0      	cmp	r8, r4
  403ee0:	d907      	bls.n	403ef2 <__udivmoddi4+0x26e>
  403ee2:	18e4      	adds	r4, r4, r3
  403ee4:	f100 35ff 	add.w	r5, r0, #4294967295
  403ee8:	d229      	bcs.n	403f3e <__udivmoddi4+0x2ba>
  403eea:	45a0      	cmp	r8, r4
  403eec:	d927      	bls.n	403f3e <__udivmoddi4+0x2ba>
  403eee:	3802      	subs	r0, #2
  403ef0:	441c      	add	r4, r3
  403ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  403ef6:	eba4 0408 	sub.w	r4, r4, r8
  403efa:	fba0 8902 	umull	r8, r9, r0, r2
  403efe:	454c      	cmp	r4, r9
  403f00:	46c6      	mov	lr, r8
  403f02:	464d      	mov	r5, r9
  403f04:	d315      	bcc.n	403f32 <__udivmoddi4+0x2ae>
  403f06:	d012      	beq.n	403f2e <__udivmoddi4+0x2aa>
  403f08:	b156      	cbz	r6, 403f20 <__udivmoddi4+0x29c>
  403f0a:	ebba 030e 	subs.w	r3, sl, lr
  403f0e:	eb64 0405 	sbc.w	r4, r4, r5
  403f12:	fa04 f707 	lsl.w	r7, r4, r7
  403f16:	40cb      	lsrs	r3, r1
  403f18:	431f      	orrs	r7, r3
  403f1a:	40cc      	lsrs	r4, r1
  403f1c:	6037      	str	r7, [r6, #0]
  403f1e:	6074      	str	r4, [r6, #4]
  403f20:	2100      	movs	r1, #0
  403f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f26:	4618      	mov	r0, r3
  403f28:	e6f8      	b.n	403d1c <__udivmoddi4+0x98>
  403f2a:	4690      	mov	r8, r2
  403f2c:	e6e0      	b.n	403cf0 <__udivmoddi4+0x6c>
  403f2e:	45c2      	cmp	sl, r8
  403f30:	d2ea      	bcs.n	403f08 <__udivmoddi4+0x284>
  403f32:	ebb8 0e02 	subs.w	lr, r8, r2
  403f36:	eb69 0503 	sbc.w	r5, r9, r3
  403f3a:	3801      	subs	r0, #1
  403f3c:	e7e4      	b.n	403f08 <__udivmoddi4+0x284>
  403f3e:	4628      	mov	r0, r5
  403f40:	e7d7      	b.n	403ef2 <__udivmoddi4+0x26e>
  403f42:	4640      	mov	r0, r8
  403f44:	e791      	b.n	403e6a <__udivmoddi4+0x1e6>
  403f46:	4681      	mov	r9, r0
  403f48:	e7be      	b.n	403ec8 <__udivmoddi4+0x244>
  403f4a:	4601      	mov	r1, r0
  403f4c:	e778      	b.n	403e40 <__udivmoddi4+0x1bc>
  403f4e:	3802      	subs	r0, #2
  403f50:	443c      	add	r4, r7
  403f52:	e745      	b.n	403de0 <__udivmoddi4+0x15c>
  403f54:	4608      	mov	r0, r1
  403f56:	e708      	b.n	403d6a <__udivmoddi4+0xe6>
  403f58:	f1a8 0802 	sub.w	r8, r8, #2
  403f5c:	443d      	add	r5, r7
  403f5e:	e72b      	b.n	403db8 <__udivmoddi4+0x134>

00403f60 <__aeabi_idiv0>:
  403f60:	4770      	bx	lr
  403f62:	bf00      	nop

00403f64 <__libc_init_array>:
  403f64:	b570      	push	{r4, r5, r6, lr}
  403f66:	4e0f      	ldr	r6, [pc, #60]	; (403fa4 <__libc_init_array+0x40>)
  403f68:	4d0f      	ldr	r5, [pc, #60]	; (403fa8 <__libc_init_array+0x44>)
  403f6a:	1b76      	subs	r6, r6, r5
  403f6c:	10b6      	asrs	r6, r6, #2
  403f6e:	bf18      	it	ne
  403f70:	2400      	movne	r4, #0
  403f72:	d005      	beq.n	403f80 <__libc_init_array+0x1c>
  403f74:	3401      	adds	r4, #1
  403f76:	f855 3b04 	ldr.w	r3, [r5], #4
  403f7a:	4798      	blx	r3
  403f7c:	42a6      	cmp	r6, r4
  403f7e:	d1f9      	bne.n	403f74 <__libc_init_array+0x10>
  403f80:	4e0a      	ldr	r6, [pc, #40]	; (403fac <__libc_init_array+0x48>)
  403f82:	4d0b      	ldr	r5, [pc, #44]	; (403fb0 <__libc_init_array+0x4c>)
  403f84:	1b76      	subs	r6, r6, r5
  403f86:	f005 faab 	bl	4094e0 <_init>
  403f8a:	10b6      	asrs	r6, r6, #2
  403f8c:	bf18      	it	ne
  403f8e:	2400      	movne	r4, #0
  403f90:	d006      	beq.n	403fa0 <__libc_init_array+0x3c>
  403f92:	3401      	adds	r4, #1
  403f94:	f855 3b04 	ldr.w	r3, [r5], #4
  403f98:	4798      	blx	r3
  403f9a:	42a6      	cmp	r6, r4
  403f9c:	d1f9      	bne.n	403f92 <__libc_init_array+0x2e>
  403f9e:	bd70      	pop	{r4, r5, r6, pc}
  403fa0:	bd70      	pop	{r4, r5, r6, pc}
  403fa2:	bf00      	nop
  403fa4:	004094ec 	.word	0x004094ec
  403fa8:	004094ec 	.word	0x004094ec
  403fac:	004094f4 	.word	0x004094f4
  403fb0:	004094ec 	.word	0x004094ec

00403fb4 <malloc>:
  403fb4:	4b02      	ldr	r3, [pc, #8]	; (403fc0 <malloc+0xc>)
  403fb6:	4601      	mov	r1, r0
  403fb8:	6818      	ldr	r0, [r3, #0]
  403fba:	f000 b80b 	b.w	403fd4 <_malloc_r>
  403fbe:	bf00      	nop
  403fc0:	20400014 	.word	0x20400014

00403fc4 <free>:
  403fc4:	4b02      	ldr	r3, [pc, #8]	; (403fd0 <free+0xc>)
  403fc6:	4601      	mov	r1, r0
  403fc8:	6818      	ldr	r0, [r3, #0]
  403fca:	f003 ba61 	b.w	407490 <_free_r>
  403fce:	bf00      	nop
  403fd0:	20400014 	.word	0x20400014

00403fd4 <_malloc_r>:
  403fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403fd8:	f101 060b 	add.w	r6, r1, #11
  403fdc:	2e16      	cmp	r6, #22
  403fde:	b083      	sub	sp, #12
  403fe0:	4605      	mov	r5, r0
  403fe2:	f240 809e 	bls.w	404122 <_malloc_r+0x14e>
  403fe6:	f036 0607 	bics.w	r6, r6, #7
  403fea:	f100 80bd 	bmi.w	404168 <_malloc_r+0x194>
  403fee:	42b1      	cmp	r1, r6
  403ff0:	f200 80ba 	bhi.w	404168 <_malloc_r+0x194>
  403ff4:	f000 fb86 	bl	404704 <__malloc_lock>
  403ff8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403ffc:	f0c0 8293 	bcc.w	404526 <_malloc_r+0x552>
  404000:	0a73      	lsrs	r3, r6, #9
  404002:	f000 80b8 	beq.w	404176 <_malloc_r+0x1a2>
  404006:	2b04      	cmp	r3, #4
  404008:	f200 8179 	bhi.w	4042fe <_malloc_r+0x32a>
  40400c:	09b3      	lsrs	r3, r6, #6
  40400e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404012:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404016:	00c3      	lsls	r3, r0, #3
  404018:	4fbf      	ldr	r7, [pc, #764]	; (404318 <_malloc_r+0x344>)
  40401a:	443b      	add	r3, r7
  40401c:	f1a3 0108 	sub.w	r1, r3, #8
  404020:	685c      	ldr	r4, [r3, #4]
  404022:	42a1      	cmp	r1, r4
  404024:	d106      	bne.n	404034 <_malloc_r+0x60>
  404026:	e00c      	b.n	404042 <_malloc_r+0x6e>
  404028:	2a00      	cmp	r2, #0
  40402a:	f280 80aa 	bge.w	404182 <_malloc_r+0x1ae>
  40402e:	68e4      	ldr	r4, [r4, #12]
  404030:	42a1      	cmp	r1, r4
  404032:	d006      	beq.n	404042 <_malloc_r+0x6e>
  404034:	6863      	ldr	r3, [r4, #4]
  404036:	f023 0303 	bic.w	r3, r3, #3
  40403a:	1b9a      	subs	r2, r3, r6
  40403c:	2a0f      	cmp	r2, #15
  40403e:	ddf3      	ble.n	404028 <_malloc_r+0x54>
  404040:	4670      	mov	r0, lr
  404042:	693c      	ldr	r4, [r7, #16]
  404044:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40432c <_malloc_r+0x358>
  404048:	4574      	cmp	r4, lr
  40404a:	f000 81ab 	beq.w	4043a4 <_malloc_r+0x3d0>
  40404e:	6863      	ldr	r3, [r4, #4]
  404050:	f023 0303 	bic.w	r3, r3, #3
  404054:	1b9a      	subs	r2, r3, r6
  404056:	2a0f      	cmp	r2, #15
  404058:	f300 8190 	bgt.w	40437c <_malloc_r+0x3a8>
  40405c:	2a00      	cmp	r2, #0
  40405e:	f8c7 e014 	str.w	lr, [r7, #20]
  404062:	f8c7 e010 	str.w	lr, [r7, #16]
  404066:	f280 809d 	bge.w	4041a4 <_malloc_r+0x1d0>
  40406a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40406e:	f080 8161 	bcs.w	404334 <_malloc_r+0x360>
  404072:	08db      	lsrs	r3, r3, #3
  404074:	f103 0c01 	add.w	ip, r3, #1
  404078:	1099      	asrs	r1, r3, #2
  40407a:	687a      	ldr	r2, [r7, #4]
  40407c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404080:	f8c4 8008 	str.w	r8, [r4, #8]
  404084:	2301      	movs	r3, #1
  404086:	408b      	lsls	r3, r1
  404088:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40408c:	4313      	orrs	r3, r2
  40408e:	3908      	subs	r1, #8
  404090:	60e1      	str	r1, [r4, #12]
  404092:	607b      	str	r3, [r7, #4]
  404094:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404098:	f8c8 400c 	str.w	r4, [r8, #12]
  40409c:	1082      	asrs	r2, r0, #2
  40409e:	2401      	movs	r4, #1
  4040a0:	4094      	lsls	r4, r2
  4040a2:	429c      	cmp	r4, r3
  4040a4:	f200 808b 	bhi.w	4041be <_malloc_r+0x1ea>
  4040a8:	421c      	tst	r4, r3
  4040aa:	d106      	bne.n	4040ba <_malloc_r+0xe6>
  4040ac:	f020 0003 	bic.w	r0, r0, #3
  4040b0:	0064      	lsls	r4, r4, #1
  4040b2:	421c      	tst	r4, r3
  4040b4:	f100 0004 	add.w	r0, r0, #4
  4040b8:	d0fa      	beq.n	4040b0 <_malloc_r+0xdc>
  4040ba:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4040be:	46cc      	mov	ip, r9
  4040c0:	4680      	mov	r8, r0
  4040c2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4040c6:	459c      	cmp	ip, r3
  4040c8:	d107      	bne.n	4040da <_malloc_r+0x106>
  4040ca:	e16d      	b.n	4043a8 <_malloc_r+0x3d4>
  4040cc:	2a00      	cmp	r2, #0
  4040ce:	f280 817b 	bge.w	4043c8 <_malloc_r+0x3f4>
  4040d2:	68db      	ldr	r3, [r3, #12]
  4040d4:	459c      	cmp	ip, r3
  4040d6:	f000 8167 	beq.w	4043a8 <_malloc_r+0x3d4>
  4040da:	6859      	ldr	r1, [r3, #4]
  4040dc:	f021 0103 	bic.w	r1, r1, #3
  4040e0:	1b8a      	subs	r2, r1, r6
  4040e2:	2a0f      	cmp	r2, #15
  4040e4:	ddf2      	ble.n	4040cc <_malloc_r+0xf8>
  4040e6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4040ea:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4040ee:	9300      	str	r3, [sp, #0]
  4040f0:	199c      	adds	r4, r3, r6
  4040f2:	4628      	mov	r0, r5
  4040f4:	f046 0601 	orr.w	r6, r6, #1
  4040f8:	f042 0501 	orr.w	r5, r2, #1
  4040fc:	605e      	str	r6, [r3, #4]
  4040fe:	f8c8 c00c 	str.w	ip, [r8, #12]
  404102:	f8cc 8008 	str.w	r8, [ip, #8]
  404106:	617c      	str	r4, [r7, #20]
  404108:	613c      	str	r4, [r7, #16]
  40410a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40410e:	f8c4 e008 	str.w	lr, [r4, #8]
  404112:	6065      	str	r5, [r4, #4]
  404114:	505a      	str	r2, [r3, r1]
  404116:	f000 fafb 	bl	404710 <__malloc_unlock>
  40411a:	9b00      	ldr	r3, [sp, #0]
  40411c:	f103 0408 	add.w	r4, r3, #8
  404120:	e01e      	b.n	404160 <_malloc_r+0x18c>
  404122:	2910      	cmp	r1, #16
  404124:	d820      	bhi.n	404168 <_malloc_r+0x194>
  404126:	f000 faed 	bl	404704 <__malloc_lock>
  40412a:	2610      	movs	r6, #16
  40412c:	2318      	movs	r3, #24
  40412e:	2002      	movs	r0, #2
  404130:	4f79      	ldr	r7, [pc, #484]	; (404318 <_malloc_r+0x344>)
  404132:	443b      	add	r3, r7
  404134:	f1a3 0208 	sub.w	r2, r3, #8
  404138:	685c      	ldr	r4, [r3, #4]
  40413a:	4294      	cmp	r4, r2
  40413c:	f000 813d 	beq.w	4043ba <_malloc_r+0x3e6>
  404140:	6863      	ldr	r3, [r4, #4]
  404142:	68e1      	ldr	r1, [r4, #12]
  404144:	68a6      	ldr	r6, [r4, #8]
  404146:	f023 0303 	bic.w	r3, r3, #3
  40414a:	4423      	add	r3, r4
  40414c:	4628      	mov	r0, r5
  40414e:	685a      	ldr	r2, [r3, #4]
  404150:	60f1      	str	r1, [r6, #12]
  404152:	f042 0201 	orr.w	r2, r2, #1
  404156:	608e      	str	r6, [r1, #8]
  404158:	605a      	str	r2, [r3, #4]
  40415a:	f000 fad9 	bl	404710 <__malloc_unlock>
  40415e:	3408      	adds	r4, #8
  404160:	4620      	mov	r0, r4
  404162:	b003      	add	sp, #12
  404164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404168:	2400      	movs	r4, #0
  40416a:	230c      	movs	r3, #12
  40416c:	4620      	mov	r0, r4
  40416e:	602b      	str	r3, [r5, #0]
  404170:	b003      	add	sp, #12
  404172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404176:	2040      	movs	r0, #64	; 0x40
  404178:	f44f 7300 	mov.w	r3, #512	; 0x200
  40417c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404180:	e74a      	b.n	404018 <_malloc_r+0x44>
  404182:	4423      	add	r3, r4
  404184:	68e1      	ldr	r1, [r4, #12]
  404186:	685a      	ldr	r2, [r3, #4]
  404188:	68a6      	ldr	r6, [r4, #8]
  40418a:	f042 0201 	orr.w	r2, r2, #1
  40418e:	60f1      	str	r1, [r6, #12]
  404190:	4628      	mov	r0, r5
  404192:	608e      	str	r6, [r1, #8]
  404194:	605a      	str	r2, [r3, #4]
  404196:	f000 fabb 	bl	404710 <__malloc_unlock>
  40419a:	3408      	adds	r4, #8
  40419c:	4620      	mov	r0, r4
  40419e:	b003      	add	sp, #12
  4041a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041a4:	4423      	add	r3, r4
  4041a6:	4628      	mov	r0, r5
  4041a8:	685a      	ldr	r2, [r3, #4]
  4041aa:	f042 0201 	orr.w	r2, r2, #1
  4041ae:	605a      	str	r2, [r3, #4]
  4041b0:	f000 faae 	bl	404710 <__malloc_unlock>
  4041b4:	3408      	adds	r4, #8
  4041b6:	4620      	mov	r0, r4
  4041b8:	b003      	add	sp, #12
  4041ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041be:	68bc      	ldr	r4, [r7, #8]
  4041c0:	6863      	ldr	r3, [r4, #4]
  4041c2:	f023 0803 	bic.w	r8, r3, #3
  4041c6:	45b0      	cmp	r8, r6
  4041c8:	d304      	bcc.n	4041d4 <_malloc_r+0x200>
  4041ca:	eba8 0306 	sub.w	r3, r8, r6
  4041ce:	2b0f      	cmp	r3, #15
  4041d0:	f300 8085 	bgt.w	4042de <_malloc_r+0x30a>
  4041d4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404330 <_malloc_r+0x35c>
  4041d8:	4b50      	ldr	r3, [pc, #320]	; (40431c <_malloc_r+0x348>)
  4041da:	f8d9 2000 	ldr.w	r2, [r9]
  4041de:	681b      	ldr	r3, [r3, #0]
  4041e0:	3201      	adds	r2, #1
  4041e2:	4433      	add	r3, r6
  4041e4:	eb04 0a08 	add.w	sl, r4, r8
  4041e8:	f000 8155 	beq.w	404496 <_malloc_r+0x4c2>
  4041ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4041f0:	330f      	adds	r3, #15
  4041f2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4041f6:	f02b 0b0f 	bic.w	fp, fp, #15
  4041fa:	4659      	mov	r1, fp
  4041fc:	4628      	mov	r0, r5
  4041fe:	f000 fb21 	bl	404844 <_sbrk_r>
  404202:	1c41      	adds	r1, r0, #1
  404204:	4602      	mov	r2, r0
  404206:	f000 80fc 	beq.w	404402 <_malloc_r+0x42e>
  40420a:	4582      	cmp	sl, r0
  40420c:	f200 80f7 	bhi.w	4043fe <_malloc_r+0x42a>
  404210:	4b43      	ldr	r3, [pc, #268]	; (404320 <_malloc_r+0x34c>)
  404212:	6819      	ldr	r1, [r3, #0]
  404214:	4459      	add	r1, fp
  404216:	6019      	str	r1, [r3, #0]
  404218:	f000 814d 	beq.w	4044b6 <_malloc_r+0x4e2>
  40421c:	f8d9 0000 	ldr.w	r0, [r9]
  404220:	3001      	adds	r0, #1
  404222:	bf1b      	ittet	ne
  404224:	eba2 0a0a 	subne.w	sl, r2, sl
  404228:	4451      	addne	r1, sl
  40422a:	f8c9 2000 	streq.w	r2, [r9]
  40422e:	6019      	strne	r1, [r3, #0]
  404230:	f012 0107 	ands.w	r1, r2, #7
  404234:	f000 8115 	beq.w	404462 <_malloc_r+0x48e>
  404238:	f1c1 0008 	rsb	r0, r1, #8
  40423c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404240:	4402      	add	r2, r0
  404242:	3108      	adds	r1, #8
  404244:	eb02 090b 	add.w	r9, r2, fp
  404248:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40424c:	eba1 0909 	sub.w	r9, r1, r9
  404250:	4649      	mov	r1, r9
  404252:	4628      	mov	r0, r5
  404254:	9301      	str	r3, [sp, #4]
  404256:	9200      	str	r2, [sp, #0]
  404258:	f000 faf4 	bl	404844 <_sbrk_r>
  40425c:	1c43      	adds	r3, r0, #1
  40425e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404262:	f000 8143 	beq.w	4044ec <_malloc_r+0x518>
  404266:	1a80      	subs	r0, r0, r2
  404268:	4448      	add	r0, r9
  40426a:	f040 0001 	orr.w	r0, r0, #1
  40426e:	6819      	ldr	r1, [r3, #0]
  404270:	60ba      	str	r2, [r7, #8]
  404272:	4449      	add	r1, r9
  404274:	42bc      	cmp	r4, r7
  404276:	6050      	str	r0, [r2, #4]
  404278:	6019      	str	r1, [r3, #0]
  40427a:	d017      	beq.n	4042ac <_malloc_r+0x2d8>
  40427c:	f1b8 0f0f 	cmp.w	r8, #15
  404280:	f240 80fb 	bls.w	40447a <_malloc_r+0x4a6>
  404284:	6860      	ldr	r0, [r4, #4]
  404286:	f1a8 020c 	sub.w	r2, r8, #12
  40428a:	f022 0207 	bic.w	r2, r2, #7
  40428e:	eb04 0e02 	add.w	lr, r4, r2
  404292:	f000 0001 	and.w	r0, r0, #1
  404296:	f04f 0c05 	mov.w	ip, #5
  40429a:	4310      	orrs	r0, r2
  40429c:	2a0f      	cmp	r2, #15
  40429e:	6060      	str	r0, [r4, #4]
  4042a0:	f8ce c004 	str.w	ip, [lr, #4]
  4042a4:	f8ce c008 	str.w	ip, [lr, #8]
  4042a8:	f200 8117 	bhi.w	4044da <_malloc_r+0x506>
  4042ac:	4b1d      	ldr	r3, [pc, #116]	; (404324 <_malloc_r+0x350>)
  4042ae:	68bc      	ldr	r4, [r7, #8]
  4042b0:	681a      	ldr	r2, [r3, #0]
  4042b2:	4291      	cmp	r1, r2
  4042b4:	bf88      	it	hi
  4042b6:	6019      	strhi	r1, [r3, #0]
  4042b8:	4b1b      	ldr	r3, [pc, #108]	; (404328 <_malloc_r+0x354>)
  4042ba:	681a      	ldr	r2, [r3, #0]
  4042bc:	4291      	cmp	r1, r2
  4042be:	6862      	ldr	r2, [r4, #4]
  4042c0:	bf88      	it	hi
  4042c2:	6019      	strhi	r1, [r3, #0]
  4042c4:	f022 0203 	bic.w	r2, r2, #3
  4042c8:	4296      	cmp	r6, r2
  4042ca:	eba2 0306 	sub.w	r3, r2, r6
  4042ce:	d801      	bhi.n	4042d4 <_malloc_r+0x300>
  4042d0:	2b0f      	cmp	r3, #15
  4042d2:	dc04      	bgt.n	4042de <_malloc_r+0x30a>
  4042d4:	4628      	mov	r0, r5
  4042d6:	f000 fa1b 	bl	404710 <__malloc_unlock>
  4042da:	2400      	movs	r4, #0
  4042dc:	e740      	b.n	404160 <_malloc_r+0x18c>
  4042de:	19a2      	adds	r2, r4, r6
  4042e0:	f043 0301 	orr.w	r3, r3, #1
  4042e4:	f046 0601 	orr.w	r6, r6, #1
  4042e8:	6066      	str	r6, [r4, #4]
  4042ea:	4628      	mov	r0, r5
  4042ec:	60ba      	str	r2, [r7, #8]
  4042ee:	6053      	str	r3, [r2, #4]
  4042f0:	f000 fa0e 	bl	404710 <__malloc_unlock>
  4042f4:	3408      	adds	r4, #8
  4042f6:	4620      	mov	r0, r4
  4042f8:	b003      	add	sp, #12
  4042fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042fe:	2b14      	cmp	r3, #20
  404300:	d971      	bls.n	4043e6 <_malloc_r+0x412>
  404302:	2b54      	cmp	r3, #84	; 0x54
  404304:	f200 80a3 	bhi.w	40444e <_malloc_r+0x47a>
  404308:	0b33      	lsrs	r3, r6, #12
  40430a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40430e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404312:	00c3      	lsls	r3, r0, #3
  404314:	e680      	b.n	404018 <_malloc_r+0x44>
  404316:	bf00      	nop
  404318:	20400440 	.word	0x20400440
  40431c:	20400dd0 	.word	0x20400dd0
  404320:	20400da0 	.word	0x20400da0
  404324:	20400dc8 	.word	0x20400dc8
  404328:	20400dcc 	.word	0x20400dcc
  40432c:	20400448 	.word	0x20400448
  404330:	20400848 	.word	0x20400848
  404334:	0a5a      	lsrs	r2, r3, #9
  404336:	2a04      	cmp	r2, #4
  404338:	d95b      	bls.n	4043f2 <_malloc_r+0x41e>
  40433a:	2a14      	cmp	r2, #20
  40433c:	f200 80ae 	bhi.w	40449c <_malloc_r+0x4c8>
  404340:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404344:	00c9      	lsls	r1, r1, #3
  404346:	325b      	adds	r2, #91	; 0x5b
  404348:	eb07 0c01 	add.w	ip, r7, r1
  40434c:	5879      	ldr	r1, [r7, r1]
  40434e:	f1ac 0c08 	sub.w	ip, ip, #8
  404352:	458c      	cmp	ip, r1
  404354:	f000 8088 	beq.w	404468 <_malloc_r+0x494>
  404358:	684a      	ldr	r2, [r1, #4]
  40435a:	f022 0203 	bic.w	r2, r2, #3
  40435e:	4293      	cmp	r3, r2
  404360:	d273      	bcs.n	40444a <_malloc_r+0x476>
  404362:	6889      	ldr	r1, [r1, #8]
  404364:	458c      	cmp	ip, r1
  404366:	d1f7      	bne.n	404358 <_malloc_r+0x384>
  404368:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40436c:	687b      	ldr	r3, [r7, #4]
  40436e:	60e2      	str	r2, [r4, #12]
  404370:	f8c4 c008 	str.w	ip, [r4, #8]
  404374:	6094      	str	r4, [r2, #8]
  404376:	f8cc 400c 	str.w	r4, [ip, #12]
  40437a:	e68f      	b.n	40409c <_malloc_r+0xc8>
  40437c:	19a1      	adds	r1, r4, r6
  40437e:	f046 0c01 	orr.w	ip, r6, #1
  404382:	f042 0601 	orr.w	r6, r2, #1
  404386:	f8c4 c004 	str.w	ip, [r4, #4]
  40438a:	4628      	mov	r0, r5
  40438c:	6179      	str	r1, [r7, #20]
  40438e:	6139      	str	r1, [r7, #16]
  404390:	f8c1 e00c 	str.w	lr, [r1, #12]
  404394:	f8c1 e008 	str.w	lr, [r1, #8]
  404398:	604e      	str	r6, [r1, #4]
  40439a:	50e2      	str	r2, [r4, r3]
  40439c:	f000 f9b8 	bl	404710 <__malloc_unlock>
  4043a0:	3408      	adds	r4, #8
  4043a2:	e6dd      	b.n	404160 <_malloc_r+0x18c>
  4043a4:	687b      	ldr	r3, [r7, #4]
  4043a6:	e679      	b.n	40409c <_malloc_r+0xc8>
  4043a8:	f108 0801 	add.w	r8, r8, #1
  4043ac:	f018 0f03 	tst.w	r8, #3
  4043b0:	f10c 0c08 	add.w	ip, ip, #8
  4043b4:	f47f ae85 	bne.w	4040c2 <_malloc_r+0xee>
  4043b8:	e02d      	b.n	404416 <_malloc_r+0x442>
  4043ba:	68dc      	ldr	r4, [r3, #12]
  4043bc:	42a3      	cmp	r3, r4
  4043be:	bf08      	it	eq
  4043c0:	3002      	addeq	r0, #2
  4043c2:	f43f ae3e 	beq.w	404042 <_malloc_r+0x6e>
  4043c6:	e6bb      	b.n	404140 <_malloc_r+0x16c>
  4043c8:	4419      	add	r1, r3
  4043ca:	461c      	mov	r4, r3
  4043cc:	684a      	ldr	r2, [r1, #4]
  4043ce:	68db      	ldr	r3, [r3, #12]
  4043d0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4043d4:	f042 0201 	orr.w	r2, r2, #1
  4043d8:	604a      	str	r2, [r1, #4]
  4043da:	4628      	mov	r0, r5
  4043dc:	60f3      	str	r3, [r6, #12]
  4043de:	609e      	str	r6, [r3, #8]
  4043e0:	f000 f996 	bl	404710 <__malloc_unlock>
  4043e4:	e6bc      	b.n	404160 <_malloc_r+0x18c>
  4043e6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4043ea:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4043ee:	00c3      	lsls	r3, r0, #3
  4043f0:	e612      	b.n	404018 <_malloc_r+0x44>
  4043f2:	099a      	lsrs	r2, r3, #6
  4043f4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4043f8:	00c9      	lsls	r1, r1, #3
  4043fa:	3238      	adds	r2, #56	; 0x38
  4043fc:	e7a4      	b.n	404348 <_malloc_r+0x374>
  4043fe:	42bc      	cmp	r4, r7
  404400:	d054      	beq.n	4044ac <_malloc_r+0x4d8>
  404402:	68bc      	ldr	r4, [r7, #8]
  404404:	6862      	ldr	r2, [r4, #4]
  404406:	f022 0203 	bic.w	r2, r2, #3
  40440a:	e75d      	b.n	4042c8 <_malloc_r+0x2f4>
  40440c:	f859 3908 	ldr.w	r3, [r9], #-8
  404410:	4599      	cmp	r9, r3
  404412:	f040 8086 	bne.w	404522 <_malloc_r+0x54e>
  404416:	f010 0f03 	tst.w	r0, #3
  40441a:	f100 30ff 	add.w	r0, r0, #4294967295
  40441e:	d1f5      	bne.n	40440c <_malloc_r+0x438>
  404420:	687b      	ldr	r3, [r7, #4]
  404422:	ea23 0304 	bic.w	r3, r3, r4
  404426:	607b      	str	r3, [r7, #4]
  404428:	0064      	lsls	r4, r4, #1
  40442a:	429c      	cmp	r4, r3
  40442c:	f63f aec7 	bhi.w	4041be <_malloc_r+0x1ea>
  404430:	2c00      	cmp	r4, #0
  404432:	f43f aec4 	beq.w	4041be <_malloc_r+0x1ea>
  404436:	421c      	tst	r4, r3
  404438:	4640      	mov	r0, r8
  40443a:	f47f ae3e 	bne.w	4040ba <_malloc_r+0xe6>
  40443e:	0064      	lsls	r4, r4, #1
  404440:	421c      	tst	r4, r3
  404442:	f100 0004 	add.w	r0, r0, #4
  404446:	d0fa      	beq.n	40443e <_malloc_r+0x46a>
  404448:	e637      	b.n	4040ba <_malloc_r+0xe6>
  40444a:	468c      	mov	ip, r1
  40444c:	e78c      	b.n	404368 <_malloc_r+0x394>
  40444e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404452:	d815      	bhi.n	404480 <_malloc_r+0x4ac>
  404454:	0bf3      	lsrs	r3, r6, #15
  404456:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40445a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40445e:	00c3      	lsls	r3, r0, #3
  404460:	e5da      	b.n	404018 <_malloc_r+0x44>
  404462:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404466:	e6ed      	b.n	404244 <_malloc_r+0x270>
  404468:	687b      	ldr	r3, [r7, #4]
  40446a:	1092      	asrs	r2, r2, #2
  40446c:	2101      	movs	r1, #1
  40446e:	fa01 f202 	lsl.w	r2, r1, r2
  404472:	4313      	orrs	r3, r2
  404474:	607b      	str	r3, [r7, #4]
  404476:	4662      	mov	r2, ip
  404478:	e779      	b.n	40436e <_malloc_r+0x39a>
  40447a:	2301      	movs	r3, #1
  40447c:	6053      	str	r3, [r2, #4]
  40447e:	e729      	b.n	4042d4 <_malloc_r+0x300>
  404480:	f240 5254 	movw	r2, #1364	; 0x554
  404484:	4293      	cmp	r3, r2
  404486:	d822      	bhi.n	4044ce <_malloc_r+0x4fa>
  404488:	0cb3      	lsrs	r3, r6, #18
  40448a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40448e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404492:	00c3      	lsls	r3, r0, #3
  404494:	e5c0      	b.n	404018 <_malloc_r+0x44>
  404496:	f103 0b10 	add.w	fp, r3, #16
  40449a:	e6ae      	b.n	4041fa <_malloc_r+0x226>
  40449c:	2a54      	cmp	r2, #84	; 0x54
  40449e:	d829      	bhi.n	4044f4 <_malloc_r+0x520>
  4044a0:	0b1a      	lsrs	r2, r3, #12
  4044a2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4044a6:	00c9      	lsls	r1, r1, #3
  4044a8:	326e      	adds	r2, #110	; 0x6e
  4044aa:	e74d      	b.n	404348 <_malloc_r+0x374>
  4044ac:	4b20      	ldr	r3, [pc, #128]	; (404530 <_malloc_r+0x55c>)
  4044ae:	6819      	ldr	r1, [r3, #0]
  4044b0:	4459      	add	r1, fp
  4044b2:	6019      	str	r1, [r3, #0]
  4044b4:	e6b2      	b.n	40421c <_malloc_r+0x248>
  4044b6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4044ba:	2800      	cmp	r0, #0
  4044bc:	f47f aeae 	bne.w	40421c <_malloc_r+0x248>
  4044c0:	eb08 030b 	add.w	r3, r8, fp
  4044c4:	68ba      	ldr	r2, [r7, #8]
  4044c6:	f043 0301 	orr.w	r3, r3, #1
  4044ca:	6053      	str	r3, [r2, #4]
  4044cc:	e6ee      	b.n	4042ac <_malloc_r+0x2d8>
  4044ce:	207f      	movs	r0, #127	; 0x7f
  4044d0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4044d4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4044d8:	e59e      	b.n	404018 <_malloc_r+0x44>
  4044da:	f104 0108 	add.w	r1, r4, #8
  4044de:	4628      	mov	r0, r5
  4044e0:	9300      	str	r3, [sp, #0]
  4044e2:	f002 ffd5 	bl	407490 <_free_r>
  4044e6:	9b00      	ldr	r3, [sp, #0]
  4044e8:	6819      	ldr	r1, [r3, #0]
  4044ea:	e6df      	b.n	4042ac <_malloc_r+0x2d8>
  4044ec:	2001      	movs	r0, #1
  4044ee:	f04f 0900 	mov.w	r9, #0
  4044f2:	e6bc      	b.n	40426e <_malloc_r+0x29a>
  4044f4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4044f8:	d805      	bhi.n	404506 <_malloc_r+0x532>
  4044fa:	0bda      	lsrs	r2, r3, #15
  4044fc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404500:	00c9      	lsls	r1, r1, #3
  404502:	3277      	adds	r2, #119	; 0x77
  404504:	e720      	b.n	404348 <_malloc_r+0x374>
  404506:	f240 5154 	movw	r1, #1364	; 0x554
  40450a:	428a      	cmp	r2, r1
  40450c:	d805      	bhi.n	40451a <_malloc_r+0x546>
  40450e:	0c9a      	lsrs	r2, r3, #18
  404510:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404514:	00c9      	lsls	r1, r1, #3
  404516:	327c      	adds	r2, #124	; 0x7c
  404518:	e716      	b.n	404348 <_malloc_r+0x374>
  40451a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40451e:	227e      	movs	r2, #126	; 0x7e
  404520:	e712      	b.n	404348 <_malloc_r+0x374>
  404522:	687b      	ldr	r3, [r7, #4]
  404524:	e780      	b.n	404428 <_malloc_r+0x454>
  404526:	08f0      	lsrs	r0, r6, #3
  404528:	f106 0308 	add.w	r3, r6, #8
  40452c:	e600      	b.n	404130 <_malloc_r+0x15c>
  40452e:	bf00      	nop
  404530:	20400da0 	.word	0x20400da0

00404534 <memcpy>:
  404534:	4684      	mov	ip, r0
  404536:	ea41 0300 	orr.w	r3, r1, r0
  40453a:	f013 0303 	ands.w	r3, r3, #3
  40453e:	d16d      	bne.n	40461c <memcpy+0xe8>
  404540:	3a40      	subs	r2, #64	; 0x40
  404542:	d341      	bcc.n	4045c8 <memcpy+0x94>
  404544:	f851 3b04 	ldr.w	r3, [r1], #4
  404548:	f840 3b04 	str.w	r3, [r0], #4
  40454c:	f851 3b04 	ldr.w	r3, [r1], #4
  404550:	f840 3b04 	str.w	r3, [r0], #4
  404554:	f851 3b04 	ldr.w	r3, [r1], #4
  404558:	f840 3b04 	str.w	r3, [r0], #4
  40455c:	f851 3b04 	ldr.w	r3, [r1], #4
  404560:	f840 3b04 	str.w	r3, [r0], #4
  404564:	f851 3b04 	ldr.w	r3, [r1], #4
  404568:	f840 3b04 	str.w	r3, [r0], #4
  40456c:	f851 3b04 	ldr.w	r3, [r1], #4
  404570:	f840 3b04 	str.w	r3, [r0], #4
  404574:	f851 3b04 	ldr.w	r3, [r1], #4
  404578:	f840 3b04 	str.w	r3, [r0], #4
  40457c:	f851 3b04 	ldr.w	r3, [r1], #4
  404580:	f840 3b04 	str.w	r3, [r0], #4
  404584:	f851 3b04 	ldr.w	r3, [r1], #4
  404588:	f840 3b04 	str.w	r3, [r0], #4
  40458c:	f851 3b04 	ldr.w	r3, [r1], #4
  404590:	f840 3b04 	str.w	r3, [r0], #4
  404594:	f851 3b04 	ldr.w	r3, [r1], #4
  404598:	f840 3b04 	str.w	r3, [r0], #4
  40459c:	f851 3b04 	ldr.w	r3, [r1], #4
  4045a0:	f840 3b04 	str.w	r3, [r0], #4
  4045a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4045a8:	f840 3b04 	str.w	r3, [r0], #4
  4045ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4045b0:	f840 3b04 	str.w	r3, [r0], #4
  4045b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4045b8:	f840 3b04 	str.w	r3, [r0], #4
  4045bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4045c0:	f840 3b04 	str.w	r3, [r0], #4
  4045c4:	3a40      	subs	r2, #64	; 0x40
  4045c6:	d2bd      	bcs.n	404544 <memcpy+0x10>
  4045c8:	3230      	adds	r2, #48	; 0x30
  4045ca:	d311      	bcc.n	4045f0 <memcpy+0xbc>
  4045cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4045d0:	f840 3b04 	str.w	r3, [r0], #4
  4045d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4045d8:	f840 3b04 	str.w	r3, [r0], #4
  4045dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4045e0:	f840 3b04 	str.w	r3, [r0], #4
  4045e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4045e8:	f840 3b04 	str.w	r3, [r0], #4
  4045ec:	3a10      	subs	r2, #16
  4045ee:	d2ed      	bcs.n	4045cc <memcpy+0x98>
  4045f0:	320c      	adds	r2, #12
  4045f2:	d305      	bcc.n	404600 <memcpy+0xcc>
  4045f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4045f8:	f840 3b04 	str.w	r3, [r0], #4
  4045fc:	3a04      	subs	r2, #4
  4045fe:	d2f9      	bcs.n	4045f4 <memcpy+0xc0>
  404600:	3204      	adds	r2, #4
  404602:	d008      	beq.n	404616 <memcpy+0xe2>
  404604:	07d2      	lsls	r2, r2, #31
  404606:	bf1c      	itt	ne
  404608:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40460c:	f800 3b01 	strbne.w	r3, [r0], #1
  404610:	d301      	bcc.n	404616 <memcpy+0xe2>
  404612:	880b      	ldrh	r3, [r1, #0]
  404614:	8003      	strh	r3, [r0, #0]
  404616:	4660      	mov	r0, ip
  404618:	4770      	bx	lr
  40461a:	bf00      	nop
  40461c:	2a08      	cmp	r2, #8
  40461e:	d313      	bcc.n	404648 <memcpy+0x114>
  404620:	078b      	lsls	r3, r1, #30
  404622:	d08d      	beq.n	404540 <memcpy+0xc>
  404624:	f010 0303 	ands.w	r3, r0, #3
  404628:	d08a      	beq.n	404540 <memcpy+0xc>
  40462a:	f1c3 0304 	rsb	r3, r3, #4
  40462e:	1ad2      	subs	r2, r2, r3
  404630:	07db      	lsls	r3, r3, #31
  404632:	bf1c      	itt	ne
  404634:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404638:	f800 3b01 	strbne.w	r3, [r0], #1
  40463c:	d380      	bcc.n	404540 <memcpy+0xc>
  40463e:	f831 3b02 	ldrh.w	r3, [r1], #2
  404642:	f820 3b02 	strh.w	r3, [r0], #2
  404646:	e77b      	b.n	404540 <memcpy+0xc>
  404648:	3a04      	subs	r2, #4
  40464a:	d3d9      	bcc.n	404600 <memcpy+0xcc>
  40464c:	3a01      	subs	r2, #1
  40464e:	f811 3b01 	ldrb.w	r3, [r1], #1
  404652:	f800 3b01 	strb.w	r3, [r0], #1
  404656:	d2f9      	bcs.n	40464c <memcpy+0x118>
  404658:	780b      	ldrb	r3, [r1, #0]
  40465a:	7003      	strb	r3, [r0, #0]
  40465c:	784b      	ldrb	r3, [r1, #1]
  40465e:	7043      	strb	r3, [r0, #1]
  404660:	788b      	ldrb	r3, [r1, #2]
  404662:	7083      	strb	r3, [r0, #2]
  404664:	4660      	mov	r0, ip
  404666:	4770      	bx	lr

00404668 <memset>:
  404668:	b470      	push	{r4, r5, r6}
  40466a:	0786      	lsls	r6, r0, #30
  40466c:	d046      	beq.n	4046fc <memset+0x94>
  40466e:	1e54      	subs	r4, r2, #1
  404670:	2a00      	cmp	r2, #0
  404672:	d041      	beq.n	4046f8 <memset+0x90>
  404674:	b2ca      	uxtb	r2, r1
  404676:	4603      	mov	r3, r0
  404678:	e002      	b.n	404680 <memset+0x18>
  40467a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40467e:	d33b      	bcc.n	4046f8 <memset+0x90>
  404680:	f803 2b01 	strb.w	r2, [r3], #1
  404684:	079d      	lsls	r5, r3, #30
  404686:	d1f8      	bne.n	40467a <memset+0x12>
  404688:	2c03      	cmp	r4, #3
  40468a:	d92e      	bls.n	4046ea <memset+0x82>
  40468c:	b2cd      	uxtb	r5, r1
  40468e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404692:	2c0f      	cmp	r4, #15
  404694:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404698:	d919      	bls.n	4046ce <memset+0x66>
  40469a:	f103 0210 	add.w	r2, r3, #16
  40469e:	4626      	mov	r6, r4
  4046a0:	3e10      	subs	r6, #16
  4046a2:	2e0f      	cmp	r6, #15
  4046a4:	f842 5c10 	str.w	r5, [r2, #-16]
  4046a8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4046ac:	f842 5c08 	str.w	r5, [r2, #-8]
  4046b0:	f842 5c04 	str.w	r5, [r2, #-4]
  4046b4:	f102 0210 	add.w	r2, r2, #16
  4046b8:	d8f2      	bhi.n	4046a0 <memset+0x38>
  4046ba:	f1a4 0210 	sub.w	r2, r4, #16
  4046be:	f022 020f 	bic.w	r2, r2, #15
  4046c2:	f004 040f 	and.w	r4, r4, #15
  4046c6:	3210      	adds	r2, #16
  4046c8:	2c03      	cmp	r4, #3
  4046ca:	4413      	add	r3, r2
  4046cc:	d90d      	bls.n	4046ea <memset+0x82>
  4046ce:	461e      	mov	r6, r3
  4046d0:	4622      	mov	r2, r4
  4046d2:	3a04      	subs	r2, #4
  4046d4:	2a03      	cmp	r2, #3
  4046d6:	f846 5b04 	str.w	r5, [r6], #4
  4046da:	d8fa      	bhi.n	4046d2 <memset+0x6a>
  4046dc:	1f22      	subs	r2, r4, #4
  4046de:	f022 0203 	bic.w	r2, r2, #3
  4046e2:	3204      	adds	r2, #4
  4046e4:	4413      	add	r3, r2
  4046e6:	f004 0403 	and.w	r4, r4, #3
  4046ea:	b12c      	cbz	r4, 4046f8 <memset+0x90>
  4046ec:	b2c9      	uxtb	r1, r1
  4046ee:	441c      	add	r4, r3
  4046f0:	f803 1b01 	strb.w	r1, [r3], #1
  4046f4:	429c      	cmp	r4, r3
  4046f6:	d1fb      	bne.n	4046f0 <memset+0x88>
  4046f8:	bc70      	pop	{r4, r5, r6}
  4046fa:	4770      	bx	lr
  4046fc:	4614      	mov	r4, r2
  4046fe:	4603      	mov	r3, r0
  404700:	e7c2      	b.n	404688 <memset+0x20>
  404702:	bf00      	nop

00404704 <__malloc_lock>:
  404704:	4801      	ldr	r0, [pc, #4]	; (40470c <__malloc_lock+0x8>)
  404706:	f003 b95d 	b.w	4079c4 <__retarget_lock_acquire_recursive>
  40470a:	bf00      	nop
  40470c:	20400e38 	.word	0x20400e38

00404710 <__malloc_unlock>:
  404710:	4801      	ldr	r0, [pc, #4]	; (404718 <__malloc_unlock+0x8>)
  404712:	f003 b959 	b.w	4079c8 <__retarget_lock_release_recursive>
  404716:	bf00      	nop
  404718:	20400e38 	.word	0x20400e38

0040471c <printf>:
  40471c:	b40f      	push	{r0, r1, r2, r3}
  40471e:	b500      	push	{lr}
  404720:	4907      	ldr	r1, [pc, #28]	; (404740 <printf+0x24>)
  404722:	b083      	sub	sp, #12
  404724:	ab04      	add	r3, sp, #16
  404726:	6808      	ldr	r0, [r1, #0]
  404728:	f853 2b04 	ldr.w	r2, [r3], #4
  40472c:	6881      	ldr	r1, [r0, #8]
  40472e:	9301      	str	r3, [sp, #4]
  404730:	f000 f9f4 	bl	404b1c <_vfprintf_r>
  404734:	b003      	add	sp, #12
  404736:	f85d eb04 	ldr.w	lr, [sp], #4
  40473a:	b004      	add	sp, #16
  40473c:	4770      	bx	lr
  40473e:	bf00      	nop
  404740:	20400014 	.word	0x20400014

00404744 <_puts_r>:
  404744:	b5f0      	push	{r4, r5, r6, r7, lr}
  404746:	4605      	mov	r5, r0
  404748:	b089      	sub	sp, #36	; 0x24
  40474a:	4608      	mov	r0, r1
  40474c:	460c      	mov	r4, r1
  40474e:	f000 f977 	bl	404a40 <strlen>
  404752:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404754:	4f21      	ldr	r7, [pc, #132]	; (4047dc <_puts_r+0x98>)
  404756:	9404      	str	r4, [sp, #16]
  404758:	2601      	movs	r6, #1
  40475a:	1c44      	adds	r4, r0, #1
  40475c:	a904      	add	r1, sp, #16
  40475e:	2202      	movs	r2, #2
  404760:	9403      	str	r4, [sp, #12]
  404762:	9005      	str	r0, [sp, #20]
  404764:	68ac      	ldr	r4, [r5, #8]
  404766:	9706      	str	r7, [sp, #24]
  404768:	9607      	str	r6, [sp, #28]
  40476a:	9101      	str	r1, [sp, #4]
  40476c:	9202      	str	r2, [sp, #8]
  40476e:	b353      	cbz	r3, 4047c6 <_puts_r+0x82>
  404770:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404772:	f013 0f01 	tst.w	r3, #1
  404776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40477a:	b29a      	uxth	r2, r3
  40477c:	d101      	bne.n	404782 <_puts_r+0x3e>
  40477e:	0590      	lsls	r0, r2, #22
  404780:	d525      	bpl.n	4047ce <_puts_r+0x8a>
  404782:	0491      	lsls	r1, r2, #18
  404784:	d406      	bmi.n	404794 <_puts_r+0x50>
  404786:	6e62      	ldr	r2, [r4, #100]	; 0x64
  404788:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40478c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  404790:	81a3      	strh	r3, [r4, #12]
  404792:	6662      	str	r2, [r4, #100]	; 0x64
  404794:	4628      	mov	r0, r5
  404796:	aa01      	add	r2, sp, #4
  404798:	4621      	mov	r1, r4
  40479a:	f002 ff5f 	bl	40765c <__sfvwrite_r>
  40479e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4047a0:	2800      	cmp	r0, #0
  4047a2:	bf0c      	ite	eq
  4047a4:	250a      	moveq	r5, #10
  4047a6:	f04f 35ff 	movne.w	r5, #4294967295
  4047aa:	07da      	lsls	r2, r3, #31
  4047ac:	d402      	bmi.n	4047b4 <_puts_r+0x70>
  4047ae:	89a3      	ldrh	r3, [r4, #12]
  4047b0:	059b      	lsls	r3, r3, #22
  4047b2:	d502      	bpl.n	4047ba <_puts_r+0x76>
  4047b4:	4628      	mov	r0, r5
  4047b6:	b009      	add	sp, #36	; 0x24
  4047b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4047ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4047bc:	f003 f904 	bl	4079c8 <__retarget_lock_release_recursive>
  4047c0:	4628      	mov	r0, r5
  4047c2:	b009      	add	sp, #36	; 0x24
  4047c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4047c6:	4628      	mov	r0, r5
  4047c8:	f002 fdc0 	bl	40734c <__sinit>
  4047cc:	e7d0      	b.n	404770 <_puts_r+0x2c>
  4047ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4047d0:	f003 f8f8 	bl	4079c4 <__retarget_lock_acquire_recursive>
  4047d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047d8:	b29a      	uxth	r2, r3
  4047da:	e7d2      	b.n	404782 <_puts_r+0x3e>
  4047dc:	00409258 	.word	0x00409258

004047e0 <puts>:
  4047e0:	4b02      	ldr	r3, [pc, #8]	; (4047ec <puts+0xc>)
  4047e2:	4601      	mov	r1, r0
  4047e4:	6818      	ldr	r0, [r3, #0]
  4047e6:	f7ff bfad 	b.w	404744 <_puts_r>
  4047ea:	bf00      	nop
  4047ec:	20400014 	.word	0x20400014

004047f0 <srand>:
  4047f0:	4b03      	ldr	r3, [pc, #12]	; (404800 <srand+0x10>)
  4047f2:	681b      	ldr	r3, [r3, #0]
  4047f4:	2200      	movs	r2, #0
  4047f6:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
  4047fa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  4047fe:	4770      	bx	lr
  404800:	20400014 	.word	0x20400014

00404804 <rand>:
  404804:	b410      	push	{r4}
  404806:	4b0c      	ldr	r3, [pc, #48]	; (404838 <rand+0x34>)
  404808:	480c      	ldr	r0, [pc, #48]	; (40483c <rand+0x38>)
  40480a:	6819      	ldr	r1, [r3, #0]
  40480c:	4c0c      	ldr	r4, [pc, #48]	; (404840 <rand+0x3c>)
  40480e:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
  404812:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
  404816:	fb00 f002 	mul.w	r0, r0, r2
  40481a:	fb04 0003 	mla	r0, r4, r3, r0
  40481e:	fba2 2304 	umull	r2, r3, r2, r4
  404822:	4403      	add	r3, r0
  404824:	3201      	adds	r2, #1
  404826:	f143 0300 	adc.w	r3, r3, #0
  40482a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
  40482e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
  404832:	bc10      	pop	{r4}
  404834:	4770      	bx	lr
  404836:	bf00      	nop
  404838:	20400014 	.word	0x20400014
  40483c:	5851f42d 	.word	0x5851f42d
  404840:	4c957f2d 	.word	0x4c957f2d

00404844 <_sbrk_r>:
  404844:	b538      	push	{r3, r4, r5, lr}
  404846:	4c07      	ldr	r4, [pc, #28]	; (404864 <_sbrk_r+0x20>)
  404848:	2300      	movs	r3, #0
  40484a:	4605      	mov	r5, r0
  40484c:	4608      	mov	r0, r1
  40484e:	6023      	str	r3, [r4, #0]
  404850:	f7fc fdd0 	bl	4013f4 <_sbrk>
  404854:	1c43      	adds	r3, r0, #1
  404856:	d000      	beq.n	40485a <_sbrk_r+0x16>
  404858:	bd38      	pop	{r3, r4, r5, pc}
  40485a:	6823      	ldr	r3, [r4, #0]
  40485c:	2b00      	cmp	r3, #0
  40485e:	d0fb      	beq.n	404858 <_sbrk_r+0x14>
  404860:	602b      	str	r3, [r5, #0]
  404862:	bd38      	pop	{r3, r4, r5, pc}
  404864:	20400e4c 	.word	0x20400e4c

00404868 <setbuf>:
  404868:	2900      	cmp	r1, #0
  40486a:	bf0c      	ite	eq
  40486c:	2202      	moveq	r2, #2
  40486e:	2200      	movne	r2, #0
  404870:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404874:	f000 b800 	b.w	404878 <setvbuf>

00404878 <setvbuf>:
  404878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40487c:	4c61      	ldr	r4, [pc, #388]	; (404a04 <setvbuf+0x18c>)
  40487e:	6825      	ldr	r5, [r4, #0]
  404880:	b083      	sub	sp, #12
  404882:	4604      	mov	r4, r0
  404884:	460f      	mov	r7, r1
  404886:	4690      	mov	r8, r2
  404888:	461e      	mov	r6, r3
  40488a:	b115      	cbz	r5, 404892 <setvbuf+0x1a>
  40488c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40488e:	2b00      	cmp	r3, #0
  404890:	d064      	beq.n	40495c <setvbuf+0xe4>
  404892:	f1b8 0f02 	cmp.w	r8, #2
  404896:	d006      	beq.n	4048a6 <setvbuf+0x2e>
  404898:	f1b8 0f01 	cmp.w	r8, #1
  40489c:	f200 809f 	bhi.w	4049de <setvbuf+0x166>
  4048a0:	2e00      	cmp	r6, #0
  4048a2:	f2c0 809c 	blt.w	4049de <setvbuf+0x166>
  4048a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4048a8:	07d8      	lsls	r0, r3, #31
  4048aa:	d534      	bpl.n	404916 <setvbuf+0x9e>
  4048ac:	4621      	mov	r1, r4
  4048ae:	4628      	mov	r0, r5
  4048b0:	f002 fcf4 	bl	40729c <_fflush_r>
  4048b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4048b6:	b141      	cbz	r1, 4048ca <setvbuf+0x52>
  4048b8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4048bc:	4299      	cmp	r1, r3
  4048be:	d002      	beq.n	4048c6 <setvbuf+0x4e>
  4048c0:	4628      	mov	r0, r5
  4048c2:	f002 fde5 	bl	407490 <_free_r>
  4048c6:	2300      	movs	r3, #0
  4048c8:	6323      	str	r3, [r4, #48]	; 0x30
  4048ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4048ce:	2200      	movs	r2, #0
  4048d0:	61a2      	str	r2, [r4, #24]
  4048d2:	6062      	str	r2, [r4, #4]
  4048d4:	061a      	lsls	r2, r3, #24
  4048d6:	d43a      	bmi.n	40494e <setvbuf+0xd6>
  4048d8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4048dc:	f023 0303 	bic.w	r3, r3, #3
  4048e0:	f1b8 0f02 	cmp.w	r8, #2
  4048e4:	81a3      	strh	r3, [r4, #12]
  4048e6:	d01d      	beq.n	404924 <setvbuf+0xac>
  4048e8:	ab01      	add	r3, sp, #4
  4048ea:	466a      	mov	r2, sp
  4048ec:	4621      	mov	r1, r4
  4048ee:	4628      	mov	r0, r5
  4048f0:	f003 f86c 	bl	4079cc <__swhatbuf_r>
  4048f4:	89a3      	ldrh	r3, [r4, #12]
  4048f6:	4318      	orrs	r0, r3
  4048f8:	81a0      	strh	r0, [r4, #12]
  4048fa:	2e00      	cmp	r6, #0
  4048fc:	d132      	bne.n	404964 <setvbuf+0xec>
  4048fe:	9e00      	ldr	r6, [sp, #0]
  404900:	4630      	mov	r0, r6
  404902:	f7ff fb57 	bl	403fb4 <malloc>
  404906:	4607      	mov	r7, r0
  404908:	2800      	cmp	r0, #0
  40490a:	d06b      	beq.n	4049e4 <setvbuf+0x16c>
  40490c:	89a3      	ldrh	r3, [r4, #12]
  40490e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404912:	81a3      	strh	r3, [r4, #12]
  404914:	e028      	b.n	404968 <setvbuf+0xf0>
  404916:	89a3      	ldrh	r3, [r4, #12]
  404918:	0599      	lsls	r1, r3, #22
  40491a:	d4c7      	bmi.n	4048ac <setvbuf+0x34>
  40491c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40491e:	f003 f851 	bl	4079c4 <__retarget_lock_acquire_recursive>
  404922:	e7c3      	b.n	4048ac <setvbuf+0x34>
  404924:	2500      	movs	r5, #0
  404926:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404928:	2600      	movs	r6, #0
  40492a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40492e:	f043 0302 	orr.w	r3, r3, #2
  404932:	2001      	movs	r0, #1
  404934:	60a6      	str	r6, [r4, #8]
  404936:	07ce      	lsls	r6, r1, #31
  404938:	81a3      	strh	r3, [r4, #12]
  40493a:	6022      	str	r2, [r4, #0]
  40493c:	6122      	str	r2, [r4, #16]
  40493e:	6160      	str	r0, [r4, #20]
  404940:	d401      	bmi.n	404946 <setvbuf+0xce>
  404942:	0598      	lsls	r0, r3, #22
  404944:	d53e      	bpl.n	4049c4 <setvbuf+0x14c>
  404946:	4628      	mov	r0, r5
  404948:	b003      	add	sp, #12
  40494a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40494e:	6921      	ldr	r1, [r4, #16]
  404950:	4628      	mov	r0, r5
  404952:	f002 fd9d 	bl	407490 <_free_r>
  404956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40495a:	e7bd      	b.n	4048d8 <setvbuf+0x60>
  40495c:	4628      	mov	r0, r5
  40495e:	f002 fcf5 	bl	40734c <__sinit>
  404962:	e796      	b.n	404892 <setvbuf+0x1a>
  404964:	2f00      	cmp	r7, #0
  404966:	d0cb      	beq.n	404900 <setvbuf+0x88>
  404968:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40496a:	2b00      	cmp	r3, #0
  40496c:	d033      	beq.n	4049d6 <setvbuf+0x15e>
  40496e:	9b00      	ldr	r3, [sp, #0]
  404970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404974:	6027      	str	r7, [r4, #0]
  404976:	429e      	cmp	r6, r3
  404978:	bf1c      	itt	ne
  40497a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40497e:	81a2      	strhne	r2, [r4, #12]
  404980:	f1b8 0f01 	cmp.w	r8, #1
  404984:	bf04      	itt	eq
  404986:	f042 0201 	orreq.w	r2, r2, #1
  40498a:	81a2      	strheq	r2, [r4, #12]
  40498c:	b292      	uxth	r2, r2
  40498e:	f012 0308 	ands.w	r3, r2, #8
  404992:	6127      	str	r7, [r4, #16]
  404994:	6166      	str	r6, [r4, #20]
  404996:	d00e      	beq.n	4049b6 <setvbuf+0x13e>
  404998:	07d1      	lsls	r1, r2, #31
  40499a:	d51a      	bpl.n	4049d2 <setvbuf+0x15a>
  40499c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40499e:	4276      	negs	r6, r6
  4049a0:	2300      	movs	r3, #0
  4049a2:	f015 0501 	ands.w	r5, r5, #1
  4049a6:	61a6      	str	r6, [r4, #24]
  4049a8:	60a3      	str	r3, [r4, #8]
  4049aa:	d009      	beq.n	4049c0 <setvbuf+0x148>
  4049ac:	2500      	movs	r5, #0
  4049ae:	4628      	mov	r0, r5
  4049b0:	b003      	add	sp, #12
  4049b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4049b6:	60a3      	str	r3, [r4, #8]
  4049b8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4049ba:	f015 0501 	ands.w	r5, r5, #1
  4049be:	d1f5      	bne.n	4049ac <setvbuf+0x134>
  4049c0:	0593      	lsls	r3, r2, #22
  4049c2:	d4c0      	bmi.n	404946 <setvbuf+0xce>
  4049c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049c6:	f002 ffff 	bl	4079c8 <__retarget_lock_release_recursive>
  4049ca:	4628      	mov	r0, r5
  4049cc:	b003      	add	sp, #12
  4049ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4049d2:	60a6      	str	r6, [r4, #8]
  4049d4:	e7f0      	b.n	4049b8 <setvbuf+0x140>
  4049d6:	4628      	mov	r0, r5
  4049d8:	f002 fcb8 	bl	40734c <__sinit>
  4049dc:	e7c7      	b.n	40496e <setvbuf+0xf6>
  4049de:	f04f 35ff 	mov.w	r5, #4294967295
  4049e2:	e7b0      	b.n	404946 <setvbuf+0xce>
  4049e4:	f8dd 9000 	ldr.w	r9, [sp]
  4049e8:	45b1      	cmp	r9, r6
  4049ea:	d004      	beq.n	4049f6 <setvbuf+0x17e>
  4049ec:	4648      	mov	r0, r9
  4049ee:	f7ff fae1 	bl	403fb4 <malloc>
  4049f2:	4607      	mov	r7, r0
  4049f4:	b920      	cbnz	r0, 404a00 <setvbuf+0x188>
  4049f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4049fa:	f04f 35ff 	mov.w	r5, #4294967295
  4049fe:	e792      	b.n	404926 <setvbuf+0xae>
  404a00:	464e      	mov	r6, r9
  404a02:	e783      	b.n	40490c <setvbuf+0x94>
  404a04:	20400014 	.word	0x20400014
	...

00404a40 <strlen>:
  404a40:	f890 f000 	pld	[r0]
  404a44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404a48:	f020 0107 	bic.w	r1, r0, #7
  404a4c:	f06f 0c00 	mvn.w	ip, #0
  404a50:	f010 0407 	ands.w	r4, r0, #7
  404a54:	f891 f020 	pld	[r1, #32]
  404a58:	f040 8049 	bne.w	404aee <strlen+0xae>
  404a5c:	f04f 0400 	mov.w	r4, #0
  404a60:	f06f 0007 	mvn.w	r0, #7
  404a64:	e9d1 2300 	ldrd	r2, r3, [r1]
  404a68:	f891 f040 	pld	[r1, #64]	; 0x40
  404a6c:	f100 0008 	add.w	r0, r0, #8
  404a70:	fa82 f24c 	uadd8	r2, r2, ip
  404a74:	faa4 f28c 	sel	r2, r4, ip
  404a78:	fa83 f34c 	uadd8	r3, r3, ip
  404a7c:	faa2 f38c 	sel	r3, r2, ip
  404a80:	bb4b      	cbnz	r3, 404ad6 <strlen+0x96>
  404a82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404a86:	fa82 f24c 	uadd8	r2, r2, ip
  404a8a:	f100 0008 	add.w	r0, r0, #8
  404a8e:	faa4 f28c 	sel	r2, r4, ip
  404a92:	fa83 f34c 	uadd8	r3, r3, ip
  404a96:	faa2 f38c 	sel	r3, r2, ip
  404a9a:	b9e3      	cbnz	r3, 404ad6 <strlen+0x96>
  404a9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404aa0:	fa82 f24c 	uadd8	r2, r2, ip
  404aa4:	f100 0008 	add.w	r0, r0, #8
  404aa8:	faa4 f28c 	sel	r2, r4, ip
  404aac:	fa83 f34c 	uadd8	r3, r3, ip
  404ab0:	faa2 f38c 	sel	r3, r2, ip
  404ab4:	b97b      	cbnz	r3, 404ad6 <strlen+0x96>
  404ab6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404aba:	f101 0120 	add.w	r1, r1, #32
  404abe:	fa82 f24c 	uadd8	r2, r2, ip
  404ac2:	f100 0008 	add.w	r0, r0, #8
  404ac6:	faa4 f28c 	sel	r2, r4, ip
  404aca:	fa83 f34c 	uadd8	r3, r3, ip
  404ace:	faa2 f38c 	sel	r3, r2, ip
  404ad2:	2b00      	cmp	r3, #0
  404ad4:	d0c6      	beq.n	404a64 <strlen+0x24>
  404ad6:	2a00      	cmp	r2, #0
  404ad8:	bf04      	itt	eq
  404ada:	3004      	addeq	r0, #4
  404adc:	461a      	moveq	r2, r3
  404ade:	ba12      	rev	r2, r2
  404ae0:	fab2 f282 	clz	r2, r2
  404ae4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404ae8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404aec:	4770      	bx	lr
  404aee:	e9d1 2300 	ldrd	r2, r3, [r1]
  404af2:	f004 0503 	and.w	r5, r4, #3
  404af6:	f1c4 0000 	rsb	r0, r4, #0
  404afa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404afe:	f014 0f04 	tst.w	r4, #4
  404b02:	f891 f040 	pld	[r1, #64]	; 0x40
  404b06:	fa0c f505 	lsl.w	r5, ip, r5
  404b0a:	ea62 0205 	orn	r2, r2, r5
  404b0e:	bf1c      	itt	ne
  404b10:	ea63 0305 	ornne	r3, r3, r5
  404b14:	4662      	movne	r2, ip
  404b16:	f04f 0400 	mov.w	r4, #0
  404b1a:	e7a9      	b.n	404a70 <strlen+0x30>

00404b1c <_vfprintf_r>:
  404b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b20:	b0c1      	sub	sp, #260	; 0x104
  404b22:	461d      	mov	r5, r3
  404b24:	468a      	mov	sl, r1
  404b26:	4691      	mov	r9, r2
  404b28:	4604      	mov	r4, r0
  404b2a:	9008      	str	r0, [sp, #32]
  404b2c:	f002 ff38 	bl	4079a0 <_localeconv_r>
  404b30:	6803      	ldr	r3, [r0, #0]
  404b32:	9315      	str	r3, [sp, #84]	; 0x54
  404b34:	4618      	mov	r0, r3
  404b36:	f7ff ff83 	bl	404a40 <strlen>
  404b3a:	950e      	str	r5, [sp, #56]	; 0x38
  404b3c:	9014      	str	r0, [sp, #80]	; 0x50
  404b3e:	b11c      	cbz	r4, 404b48 <_vfprintf_r+0x2c>
  404b40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  404b42:	2b00      	cmp	r3, #0
  404b44:	f000 825f 	beq.w	405006 <_vfprintf_r+0x4ea>
  404b48:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  404b4c:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  404b50:	f013 0f01 	tst.w	r3, #1
  404b54:	b293      	uxth	r3, r2
  404b56:	d102      	bne.n	404b5e <_vfprintf_r+0x42>
  404b58:	0599      	lsls	r1, r3, #22
  404b5a:	f140 8275 	bpl.w	405048 <_vfprintf_r+0x52c>
  404b5e:	049f      	lsls	r7, r3, #18
  404b60:	d40a      	bmi.n	404b78 <_vfprintf_r+0x5c>
  404b62:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
  404b66:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
  404b6a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404b6e:	f8aa 300c 	strh.w	r3, [sl, #12]
  404b72:	f8ca 1064 	str.w	r1, [sl, #100]	; 0x64
  404b76:	b29b      	uxth	r3, r3
  404b78:	071e      	lsls	r6, r3, #28
  404b7a:	f140 8223 	bpl.w	404fc4 <_vfprintf_r+0x4a8>
  404b7e:	f8da 2010 	ldr.w	r2, [sl, #16]
  404b82:	2a00      	cmp	r2, #0
  404b84:	f000 821e 	beq.w	404fc4 <_vfprintf_r+0x4a8>
  404b88:	f003 021a 	and.w	r2, r3, #26
  404b8c:	2a0a      	cmp	r2, #10
  404b8e:	f000 823e 	beq.w	40500e <_vfprintf_r+0x4f2>
  404b92:	2300      	movs	r3, #0
  404b94:	4618      	mov	r0, r3
  404b96:	9311      	str	r3, [sp, #68]	; 0x44
  404b98:	9313      	str	r3, [sp, #76]	; 0x4c
  404b9a:	9312      	str	r3, [sp, #72]	; 0x48
  404b9c:	9325      	str	r3, [sp, #148]	; 0x94
  404b9e:	9324      	str	r3, [sp, #144]	; 0x90
  404ba0:	9318      	str	r3, [sp, #96]	; 0x60
  404ba2:	9319      	str	r3, [sp, #100]	; 0x64
  404ba4:	930b      	str	r3, [sp, #44]	; 0x2c
  404ba6:	ab30      	add	r3, sp, #192	; 0xc0
  404ba8:	9323      	str	r3, [sp, #140]	; 0x8c
  404baa:	4698      	mov	r8, r3
  404bac:	9016      	str	r0, [sp, #88]	; 0x58
  404bae:	9017      	str	r0, [sp, #92]	; 0x5c
  404bb0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  404bb4:	f899 3000 	ldrb.w	r3, [r9]
  404bb8:	464c      	mov	r4, r9
  404bba:	b1eb      	cbz	r3, 404bf8 <_vfprintf_r+0xdc>
  404bbc:	2b25      	cmp	r3, #37	; 0x25
  404bbe:	d102      	bne.n	404bc6 <_vfprintf_r+0xaa>
  404bc0:	e01a      	b.n	404bf8 <_vfprintf_r+0xdc>
  404bc2:	2b25      	cmp	r3, #37	; 0x25
  404bc4:	d003      	beq.n	404bce <_vfprintf_r+0xb2>
  404bc6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404bca:	2b00      	cmp	r3, #0
  404bcc:	d1f9      	bne.n	404bc2 <_vfprintf_r+0xa6>
  404bce:	eba4 0509 	sub.w	r5, r4, r9
  404bd2:	b18d      	cbz	r5, 404bf8 <_vfprintf_r+0xdc>
  404bd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404bd6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404bd8:	f8c8 9000 	str.w	r9, [r8]
  404bdc:	3301      	adds	r3, #1
  404bde:	442a      	add	r2, r5
  404be0:	2b07      	cmp	r3, #7
  404be2:	f8c8 5004 	str.w	r5, [r8, #4]
  404be6:	9225      	str	r2, [sp, #148]	; 0x94
  404be8:	9324      	str	r3, [sp, #144]	; 0x90
  404bea:	f300 8201 	bgt.w	404ff0 <_vfprintf_r+0x4d4>
  404bee:	f108 0808 	add.w	r8, r8, #8
  404bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404bf4:	442b      	add	r3, r5
  404bf6:	930b      	str	r3, [sp, #44]	; 0x2c
  404bf8:	7823      	ldrb	r3, [r4, #0]
  404bfa:	2b00      	cmp	r3, #0
  404bfc:	f000 83f0 	beq.w	4053e0 <_vfprintf_r+0x8c4>
  404c00:	2300      	movs	r3, #0
  404c02:	461a      	mov	r2, r3
  404c04:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404c08:	4619      	mov	r1, r3
  404c0a:	930c      	str	r3, [sp, #48]	; 0x30
  404c0c:	469b      	mov	fp, r3
  404c0e:	7866      	ldrb	r6, [r4, #1]
  404c10:	f04f 33ff 	mov.w	r3, #4294967295
  404c14:	f104 0901 	add.w	r9, r4, #1
  404c18:	9309      	str	r3, [sp, #36]	; 0x24
  404c1a:	f109 0901 	add.w	r9, r9, #1
  404c1e:	f1a6 0320 	sub.w	r3, r6, #32
  404c22:	2b58      	cmp	r3, #88	; 0x58
  404c24:	f200 83bf 	bhi.w	4053a6 <_vfprintf_r+0x88a>
  404c28:	e8df f013 	tbh	[pc, r3, lsl #1]
  404c2c:	03bd02e0 	.word	0x03bd02e0
  404c30:	034f03bd 	.word	0x034f03bd
  404c34:	03bd03bd 	.word	0x03bd03bd
  404c38:	03bd03bd 	.word	0x03bd03bd
  404c3c:	03bd03bd 	.word	0x03bd03bd
  404c40:	03080354 	.word	0x03080354
  404c44:	021a03bd 	.word	0x021a03bd
  404c48:	03bd02e8 	.word	0x03bd02e8
  404c4c:	033a0303 	.word	0x033a0303
  404c50:	033a033a 	.word	0x033a033a
  404c54:	033a033a 	.word	0x033a033a
  404c58:	033a033a 	.word	0x033a033a
  404c5c:	033a033a 	.word	0x033a033a
  404c60:	03bd03bd 	.word	0x03bd03bd
  404c64:	03bd03bd 	.word	0x03bd03bd
  404c68:	03bd03bd 	.word	0x03bd03bd
  404c6c:	03bd03bd 	.word	0x03bd03bd
  404c70:	03bd03bd 	.word	0x03bd03bd
  404c74:	03620349 	.word	0x03620349
  404c78:	036203bd 	.word	0x036203bd
  404c7c:	03bd03bd 	.word	0x03bd03bd
  404c80:	03bd03bd 	.word	0x03bd03bd
  404c84:	03bd03a2 	.word	0x03bd03a2
  404c88:	006f03bd 	.word	0x006f03bd
  404c8c:	03bd03bd 	.word	0x03bd03bd
  404c90:	03bd03bd 	.word	0x03bd03bd
  404c94:	005903bd 	.word	0x005903bd
  404c98:	03bd03bd 	.word	0x03bd03bd
  404c9c:	03bd031e 	.word	0x03bd031e
  404ca0:	03bd03bd 	.word	0x03bd03bd
  404ca4:	03bd03bd 	.word	0x03bd03bd
  404ca8:	03bd03bd 	.word	0x03bd03bd
  404cac:	03bd03bd 	.word	0x03bd03bd
  404cb0:	032403bd 	.word	0x032403bd
  404cb4:	03620273 	.word	0x03620273
  404cb8:	03620362 	.word	0x03620362
  404cbc:	027302b7 	.word	0x027302b7
  404cc0:	03bd03bd 	.word	0x03bd03bd
  404cc4:	03bd02bc 	.word	0x03bd02bc
  404cc8:	007102c9 	.word	0x007102c9
  404ccc:	0247030d 	.word	0x0247030d
  404cd0:	025203bd 	.word	0x025203bd
  404cd4:	005b03bd 	.word	0x005b03bd
  404cd8:	03bd03bd 	.word	0x03bd03bd
  404cdc:	021f      	.short	0x021f
  404cde:	f04b 0b10 	orr.w	fp, fp, #16
  404ce2:	f01b 0f20 	tst.w	fp, #32
  404ce6:	f040 8353 	bne.w	405390 <_vfprintf_r+0x874>
  404cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404cec:	f01b 0f10 	tst.w	fp, #16
  404cf0:	4613      	mov	r3, r2
  404cf2:	f040 85b4 	bne.w	40585e <_vfprintf_r+0xd42>
  404cf6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404cfa:	f000 85b0 	beq.w	40585e <_vfprintf_r+0xd42>
  404cfe:	8814      	ldrh	r4, [r2, #0]
  404d00:	3204      	adds	r2, #4
  404d02:	2500      	movs	r5, #0
  404d04:	2301      	movs	r3, #1
  404d06:	920e      	str	r2, [sp, #56]	; 0x38
  404d08:	e014      	b.n	404d34 <_vfprintf_r+0x218>
  404d0a:	f04b 0b10 	orr.w	fp, fp, #16
  404d0e:	f01b 0320 	ands.w	r3, fp, #32
  404d12:	f040 8332 	bne.w	40537a <_vfprintf_r+0x85e>
  404d16:	f01b 0210 	ands.w	r2, fp, #16
  404d1a:	f040 8589 	bne.w	405830 <_vfprintf_r+0xd14>
  404d1e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404d22:	f000 8585 	beq.w	405830 <_vfprintf_r+0xd14>
  404d26:	990e      	ldr	r1, [sp, #56]	; 0x38
  404d28:	4613      	mov	r3, r2
  404d2a:	460a      	mov	r2, r1
  404d2c:	3204      	adds	r2, #4
  404d2e:	880c      	ldrh	r4, [r1, #0]
  404d30:	920e      	str	r2, [sp, #56]	; 0x38
  404d32:	2500      	movs	r5, #0
  404d34:	f04f 0a00 	mov.w	sl, #0
  404d38:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  404d3c:	9909      	ldr	r1, [sp, #36]	; 0x24
  404d3e:	1c4a      	adds	r2, r1, #1
  404d40:	f000 820b 	beq.w	40515a <_vfprintf_r+0x63e>
  404d44:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404d48:	9206      	str	r2, [sp, #24]
  404d4a:	ea54 0205 	orrs.w	r2, r4, r5
  404d4e:	f040 820a 	bne.w	405166 <_vfprintf_r+0x64a>
  404d52:	2900      	cmp	r1, #0
  404d54:	f040 846f 	bne.w	405636 <_vfprintf_r+0xb1a>
  404d58:	2b00      	cmp	r3, #0
  404d5a:	f040 852d 	bne.w	4057b8 <_vfprintf_r+0xc9c>
  404d5e:	f01b 0301 	ands.w	r3, fp, #1
  404d62:	930d      	str	r3, [sp, #52]	; 0x34
  404d64:	f000 8668 	beq.w	405a38 <_vfprintf_r+0xf1c>
  404d68:	af40      	add	r7, sp, #256	; 0x100
  404d6a:	2330      	movs	r3, #48	; 0x30
  404d6c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  404d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404d72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404d74:	4293      	cmp	r3, r2
  404d76:	bfb8      	it	lt
  404d78:	4613      	movlt	r3, r2
  404d7a:	9307      	str	r3, [sp, #28]
  404d7c:	2300      	movs	r3, #0
  404d7e:	9310      	str	r3, [sp, #64]	; 0x40
  404d80:	f1ba 0f00 	cmp.w	sl, #0
  404d84:	d002      	beq.n	404d8c <_vfprintf_r+0x270>
  404d86:	9b07      	ldr	r3, [sp, #28]
  404d88:	3301      	adds	r3, #1
  404d8a:	9307      	str	r3, [sp, #28]
  404d8c:	9b06      	ldr	r3, [sp, #24]
  404d8e:	f013 0302 	ands.w	r3, r3, #2
  404d92:	930f      	str	r3, [sp, #60]	; 0x3c
  404d94:	d002      	beq.n	404d9c <_vfprintf_r+0x280>
  404d96:	9b07      	ldr	r3, [sp, #28]
  404d98:	3302      	adds	r3, #2
  404d9a:	9307      	str	r3, [sp, #28]
  404d9c:	9b06      	ldr	r3, [sp, #24]
  404d9e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  404da2:	f040 831b 	bne.w	4053dc <_vfprintf_r+0x8c0>
  404da6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404da8:	9a07      	ldr	r2, [sp, #28]
  404daa:	eba3 0b02 	sub.w	fp, r3, r2
  404dae:	f1bb 0f00 	cmp.w	fp, #0
  404db2:	f340 8313 	ble.w	4053dc <_vfprintf_r+0x8c0>
  404db6:	f1bb 0f10 	cmp.w	fp, #16
  404dba:	9925      	ldr	r1, [sp, #148]	; 0x94
  404dbc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404dbe:	dd28      	ble.n	404e12 <_vfprintf_r+0x2f6>
  404dc0:	4643      	mov	r3, r8
  404dc2:	2410      	movs	r4, #16
  404dc4:	46a8      	mov	r8, r5
  404dc6:	f8dd a020 	ldr.w	sl, [sp, #32]
  404dca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404dcc:	e006      	b.n	404ddc <_vfprintf_r+0x2c0>
  404dce:	f1ab 0b10 	sub.w	fp, fp, #16
  404dd2:	f1bb 0f10 	cmp.w	fp, #16
  404dd6:	f103 0308 	add.w	r3, r3, #8
  404dda:	dd18      	ble.n	404e0e <_vfprintf_r+0x2f2>
  404ddc:	3201      	adds	r2, #1
  404dde:	48b9      	ldr	r0, [pc, #740]	; (4050c4 <_vfprintf_r+0x5a8>)
  404de0:	9224      	str	r2, [sp, #144]	; 0x90
  404de2:	3110      	adds	r1, #16
  404de4:	2a07      	cmp	r2, #7
  404de6:	9125      	str	r1, [sp, #148]	; 0x94
  404de8:	e883 0011 	stmia.w	r3, {r0, r4}
  404dec:	ddef      	ble.n	404dce <_vfprintf_r+0x2b2>
  404dee:	aa23      	add	r2, sp, #140	; 0x8c
  404df0:	4629      	mov	r1, r5
  404df2:	4650      	mov	r0, sl
  404df4:	f003 fc3c 	bl	408670 <__sprint_r>
  404df8:	2800      	cmp	r0, #0
  404dfa:	f040 836a 	bne.w	4054d2 <_vfprintf_r+0x9b6>
  404dfe:	f1ab 0b10 	sub.w	fp, fp, #16
  404e02:	f1bb 0f10 	cmp.w	fp, #16
  404e06:	9925      	ldr	r1, [sp, #148]	; 0x94
  404e08:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404e0a:	ab30      	add	r3, sp, #192	; 0xc0
  404e0c:	dce6      	bgt.n	404ddc <_vfprintf_r+0x2c0>
  404e0e:	4645      	mov	r5, r8
  404e10:	4698      	mov	r8, r3
  404e12:	3201      	adds	r2, #1
  404e14:	4bab      	ldr	r3, [pc, #684]	; (4050c4 <_vfprintf_r+0x5a8>)
  404e16:	9224      	str	r2, [sp, #144]	; 0x90
  404e18:	eb0b 0401 	add.w	r4, fp, r1
  404e1c:	2a07      	cmp	r2, #7
  404e1e:	9425      	str	r4, [sp, #148]	; 0x94
  404e20:	e888 0808 	stmia.w	r8, {r3, fp}
  404e24:	f300 84cd 	bgt.w	4057c2 <_vfprintf_r+0xca6>
  404e28:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  404e2c:	f108 0808 	add.w	r8, r8, #8
  404e30:	f1ba 0f00 	cmp.w	sl, #0
  404e34:	d00e      	beq.n	404e54 <_vfprintf_r+0x338>
  404e36:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e38:	3301      	adds	r3, #1
  404e3a:	3401      	adds	r4, #1
  404e3c:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  404e40:	2201      	movs	r2, #1
  404e42:	2b07      	cmp	r3, #7
  404e44:	9425      	str	r4, [sp, #148]	; 0x94
  404e46:	9324      	str	r3, [sp, #144]	; 0x90
  404e48:	e888 0006 	stmia.w	r8, {r1, r2}
  404e4c:	f300 840a 	bgt.w	405664 <_vfprintf_r+0xb48>
  404e50:	f108 0808 	add.w	r8, r8, #8
  404e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404e56:	b16b      	cbz	r3, 404e74 <_vfprintf_r+0x358>
  404e58:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e5a:	3301      	adds	r3, #1
  404e5c:	3402      	adds	r4, #2
  404e5e:	a91c      	add	r1, sp, #112	; 0x70
  404e60:	2202      	movs	r2, #2
  404e62:	2b07      	cmp	r3, #7
  404e64:	9425      	str	r4, [sp, #148]	; 0x94
  404e66:	9324      	str	r3, [sp, #144]	; 0x90
  404e68:	e888 0006 	stmia.w	r8, {r1, r2}
  404e6c:	f300 8406 	bgt.w	40567c <_vfprintf_r+0xb60>
  404e70:	f108 0808 	add.w	r8, r8, #8
  404e74:	2d80      	cmp	r5, #128	; 0x80
  404e76:	f000 832e 	beq.w	4054d6 <_vfprintf_r+0x9ba>
  404e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404e7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404e7e:	eba3 0a02 	sub.w	sl, r3, r2
  404e82:	f1ba 0f00 	cmp.w	sl, #0
  404e86:	dd3b      	ble.n	404f00 <_vfprintf_r+0x3e4>
  404e88:	f1ba 0f10 	cmp.w	sl, #16
  404e8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e8e:	4d8e      	ldr	r5, [pc, #568]	; (4050c8 <_vfprintf_r+0x5ac>)
  404e90:	dd2b      	ble.n	404eea <_vfprintf_r+0x3ce>
  404e92:	4642      	mov	r2, r8
  404e94:	4621      	mov	r1, r4
  404e96:	46b0      	mov	r8, r6
  404e98:	f04f 0b10 	mov.w	fp, #16
  404e9c:	462e      	mov	r6, r5
  404e9e:	9c08      	ldr	r4, [sp, #32]
  404ea0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404ea2:	e006      	b.n	404eb2 <_vfprintf_r+0x396>
  404ea4:	f1aa 0a10 	sub.w	sl, sl, #16
  404ea8:	f1ba 0f10 	cmp.w	sl, #16
  404eac:	f102 0208 	add.w	r2, r2, #8
  404eb0:	dd17      	ble.n	404ee2 <_vfprintf_r+0x3c6>
  404eb2:	3301      	adds	r3, #1
  404eb4:	3110      	adds	r1, #16
  404eb6:	2b07      	cmp	r3, #7
  404eb8:	9125      	str	r1, [sp, #148]	; 0x94
  404eba:	9324      	str	r3, [sp, #144]	; 0x90
  404ebc:	e882 0840 	stmia.w	r2, {r6, fp}
  404ec0:	ddf0      	ble.n	404ea4 <_vfprintf_r+0x388>
  404ec2:	aa23      	add	r2, sp, #140	; 0x8c
  404ec4:	4629      	mov	r1, r5
  404ec6:	4620      	mov	r0, r4
  404ec8:	f003 fbd2 	bl	408670 <__sprint_r>
  404ecc:	2800      	cmp	r0, #0
  404ece:	f040 8300 	bne.w	4054d2 <_vfprintf_r+0x9b6>
  404ed2:	f1aa 0a10 	sub.w	sl, sl, #16
  404ed6:	f1ba 0f10 	cmp.w	sl, #16
  404eda:	9925      	ldr	r1, [sp, #148]	; 0x94
  404edc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404ede:	aa30      	add	r2, sp, #192	; 0xc0
  404ee0:	dce7      	bgt.n	404eb2 <_vfprintf_r+0x396>
  404ee2:	4635      	mov	r5, r6
  404ee4:	460c      	mov	r4, r1
  404ee6:	4646      	mov	r6, r8
  404ee8:	4690      	mov	r8, r2
  404eea:	3301      	adds	r3, #1
  404eec:	4454      	add	r4, sl
  404eee:	2b07      	cmp	r3, #7
  404ef0:	9425      	str	r4, [sp, #148]	; 0x94
  404ef2:	9324      	str	r3, [sp, #144]	; 0x90
  404ef4:	e888 0420 	stmia.w	r8, {r5, sl}
  404ef8:	f300 83a9 	bgt.w	40564e <_vfprintf_r+0xb32>
  404efc:	f108 0808 	add.w	r8, r8, #8
  404f00:	9b06      	ldr	r3, [sp, #24]
  404f02:	05db      	lsls	r3, r3, #23
  404f04:	f100 8285 	bmi.w	405412 <_vfprintf_r+0x8f6>
  404f08:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f0a:	990d      	ldr	r1, [sp, #52]	; 0x34
  404f0c:	f8c8 7000 	str.w	r7, [r8]
  404f10:	3301      	adds	r3, #1
  404f12:	440c      	add	r4, r1
  404f14:	2b07      	cmp	r3, #7
  404f16:	9425      	str	r4, [sp, #148]	; 0x94
  404f18:	f8c8 1004 	str.w	r1, [r8, #4]
  404f1c:	9324      	str	r3, [sp, #144]	; 0x90
  404f1e:	f300 8375 	bgt.w	40560c <_vfprintf_r+0xaf0>
  404f22:	f108 0808 	add.w	r8, r8, #8
  404f26:	9b06      	ldr	r3, [sp, #24]
  404f28:	0759      	lsls	r1, r3, #29
  404f2a:	d53b      	bpl.n	404fa4 <_vfprintf_r+0x488>
  404f2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404f2e:	9a07      	ldr	r2, [sp, #28]
  404f30:	1a9d      	subs	r5, r3, r2
  404f32:	2d00      	cmp	r5, #0
  404f34:	dd36      	ble.n	404fa4 <_vfprintf_r+0x488>
  404f36:	2d10      	cmp	r5, #16
  404f38:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f3a:	dd21      	ble.n	404f80 <_vfprintf_r+0x464>
  404f3c:	2610      	movs	r6, #16
  404f3e:	9f08      	ldr	r7, [sp, #32]
  404f40:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  404f44:	e004      	b.n	404f50 <_vfprintf_r+0x434>
  404f46:	3d10      	subs	r5, #16
  404f48:	2d10      	cmp	r5, #16
  404f4a:	f108 0808 	add.w	r8, r8, #8
  404f4e:	dd17      	ble.n	404f80 <_vfprintf_r+0x464>
  404f50:	3301      	adds	r3, #1
  404f52:	4a5c      	ldr	r2, [pc, #368]	; (4050c4 <_vfprintf_r+0x5a8>)
  404f54:	9324      	str	r3, [sp, #144]	; 0x90
  404f56:	3410      	adds	r4, #16
  404f58:	2b07      	cmp	r3, #7
  404f5a:	9425      	str	r4, [sp, #148]	; 0x94
  404f5c:	e888 0044 	stmia.w	r8, {r2, r6}
  404f60:	ddf1      	ble.n	404f46 <_vfprintf_r+0x42a>
  404f62:	aa23      	add	r2, sp, #140	; 0x8c
  404f64:	4651      	mov	r1, sl
  404f66:	4638      	mov	r0, r7
  404f68:	f003 fb82 	bl	408670 <__sprint_r>
  404f6c:	2800      	cmp	r0, #0
  404f6e:	f040 823f 	bne.w	4053f0 <_vfprintf_r+0x8d4>
  404f72:	3d10      	subs	r5, #16
  404f74:	2d10      	cmp	r5, #16
  404f76:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f78:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404f7a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404f7e:	dce7      	bgt.n	404f50 <_vfprintf_r+0x434>
  404f80:	3301      	adds	r3, #1
  404f82:	4a50      	ldr	r2, [pc, #320]	; (4050c4 <_vfprintf_r+0x5a8>)
  404f84:	9324      	str	r3, [sp, #144]	; 0x90
  404f86:	442c      	add	r4, r5
  404f88:	2b07      	cmp	r3, #7
  404f8a:	9425      	str	r4, [sp, #148]	; 0x94
  404f8c:	e888 0024 	stmia.w	r8, {r2, r5}
  404f90:	dd08      	ble.n	404fa4 <_vfprintf_r+0x488>
  404f92:	aa23      	add	r2, sp, #140	; 0x8c
  404f94:	990a      	ldr	r1, [sp, #40]	; 0x28
  404f96:	9808      	ldr	r0, [sp, #32]
  404f98:	f003 fb6a 	bl	408670 <__sprint_r>
  404f9c:	2800      	cmp	r0, #0
  404f9e:	f040 8347 	bne.w	405630 <_vfprintf_r+0xb14>
  404fa2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404fa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404fa8:	9907      	ldr	r1, [sp, #28]
  404faa:	428a      	cmp	r2, r1
  404fac:	bfac      	ite	ge
  404fae:	189b      	addge	r3, r3, r2
  404fb0:	185b      	addlt	r3, r3, r1
  404fb2:	930b      	str	r3, [sp, #44]	; 0x2c
  404fb4:	2c00      	cmp	r4, #0
  404fb6:	f040 8333 	bne.w	405620 <_vfprintf_r+0xb04>
  404fba:	2300      	movs	r3, #0
  404fbc:	9324      	str	r3, [sp, #144]	; 0x90
  404fbe:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  404fc2:	e5f7      	b.n	404bb4 <_vfprintf_r+0x98>
  404fc4:	4651      	mov	r1, sl
  404fc6:	9808      	ldr	r0, [sp, #32]
  404fc8:	f001 f896 	bl	4060f8 <__swsetup_r>
  404fcc:	2800      	cmp	r0, #0
  404fce:	d038      	beq.n	405042 <_vfprintf_r+0x526>
  404fd0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  404fd4:	07dd      	lsls	r5, r3, #31
  404fd6:	d404      	bmi.n	404fe2 <_vfprintf_r+0x4c6>
  404fd8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  404fdc:	059c      	lsls	r4, r3, #22
  404fde:	f140 85ca 	bpl.w	405b76 <_vfprintf_r+0x105a>
  404fe2:	f04f 33ff 	mov.w	r3, #4294967295
  404fe6:	930b      	str	r3, [sp, #44]	; 0x2c
  404fe8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404fea:	b041      	add	sp, #260	; 0x104
  404fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ff0:	aa23      	add	r2, sp, #140	; 0x8c
  404ff2:	990a      	ldr	r1, [sp, #40]	; 0x28
  404ff4:	9808      	ldr	r0, [sp, #32]
  404ff6:	f003 fb3b 	bl	408670 <__sprint_r>
  404ffa:	2800      	cmp	r0, #0
  404ffc:	f040 8318 	bne.w	405630 <_vfprintf_r+0xb14>
  405000:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405004:	e5f5      	b.n	404bf2 <_vfprintf_r+0xd6>
  405006:	9808      	ldr	r0, [sp, #32]
  405008:	f002 f9a0 	bl	40734c <__sinit>
  40500c:	e59c      	b.n	404b48 <_vfprintf_r+0x2c>
  40500e:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
  405012:	2a00      	cmp	r2, #0
  405014:	f6ff adbd 	blt.w	404b92 <_vfprintf_r+0x76>
  405018:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
  40501c:	07d0      	lsls	r0, r2, #31
  40501e:	d405      	bmi.n	40502c <_vfprintf_r+0x510>
  405020:	0599      	lsls	r1, r3, #22
  405022:	d403      	bmi.n	40502c <_vfprintf_r+0x510>
  405024:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  405028:	f002 fcce 	bl	4079c8 <__retarget_lock_release_recursive>
  40502c:	462b      	mov	r3, r5
  40502e:	464a      	mov	r2, r9
  405030:	4651      	mov	r1, sl
  405032:	9808      	ldr	r0, [sp, #32]
  405034:	f001 f81e 	bl	406074 <__sbprintf>
  405038:	900b      	str	r0, [sp, #44]	; 0x2c
  40503a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40503c:	b041      	add	sp, #260	; 0x104
  40503e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405042:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  405046:	e59f      	b.n	404b88 <_vfprintf_r+0x6c>
  405048:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40504c:	f002 fcba 	bl	4079c4 <__retarget_lock_acquire_recursive>
  405050:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
  405054:	b293      	uxth	r3, r2
  405056:	e582      	b.n	404b5e <_vfprintf_r+0x42>
  405058:	980c      	ldr	r0, [sp, #48]	; 0x30
  40505a:	930e      	str	r3, [sp, #56]	; 0x38
  40505c:	4240      	negs	r0, r0
  40505e:	900c      	str	r0, [sp, #48]	; 0x30
  405060:	f04b 0b04 	orr.w	fp, fp, #4
  405064:	f899 6000 	ldrb.w	r6, [r9]
  405068:	e5d7      	b.n	404c1a <_vfprintf_r+0xfe>
  40506a:	2a00      	cmp	r2, #0
  40506c:	f040 87df 	bne.w	40602e <_vfprintf_r+0x1512>
  405070:	4b16      	ldr	r3, [pc, #88]	; (4050cc <_vfprintf_r+0x5b0>)
  405072:	9318      	str	r3, [sp, #96]	; 0x60
  405074:	f01b 0f20 	tst.w	fp, #32
  405078:	f040 84b9 	bne.w	4059ee <_vfprintf_r+0xed2>
  40507c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40507e:	f01b 0f10 	tst.w	fp, #16
  405082:	4613      	mov	r3, r2
  405084:	f040 83dc 	bne.w	405840 <_vfprintf_r+0xd24>
  405088:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40508c:	f000 83d8 	beq.w	405840 <_vfprintf_r+0xd24>
  405090:	3304      	adds	r3, #4
  405092:	8814      	ldrh	r4, [r2, #0]
  405094:	930e      	str	r3, [sp, #56]	; 0x38
  405096:	2500      	movs	r5, #0
  405098:	f01b 0f01 	tst.w	fp, #1
  40509c:	f000 8322 	beq.w	4056e4 <_vfprintf_r+0xbc8>
  4050a0:	ea54 0305 	orrs.w	r3, r4, r5
  4050a4:	f000 831e 	beq.w	4056e4 <_vfprintf_r+0xbc8>
  4050a8:	2330      	movs	r3, #48	; 0x30
  4050aa:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4050ae:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  4050b2:	f04b 0b02 	orr.w	fp, fp, #2
  4050b6:	2302      	movs	r3, #2
  4050b8:	e63c      	b.n	404d34 <_vfprintf_r+0x218>
  4050ba:	f04b 0b20 	orr.w	fp, fp, #32
  4050be:	f899 6000 	ldrb.w	r6, [r9]
  4050c2:	e5aa      	b.n	404c1a <_vfprintf_r+0xfe>
  4050c4:	004092a0 	.word	0x004092a0
  4050c8:	004092b0 	.word	0x004092b0
  4050cc:	00409280 	.word	0x00409280
  4050d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4050d2:	6817      	ldr	r7, [r2, #0]
  4050d4:	2400      	movs	r4, #0
  4050d6:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  4050da:	1d15      	adds	r5, r2, #4
  4050dc:	2f00      	cmp	r7, #0
  4050de:	f000 864e 	beq.w	405d7e <_vfprintf_r+0x1262>
  4050e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4050e4:	1c53      	adds	r3, r2, #1
  4050e6:	f000 85cc 	beq.w	405c82 <_vfprintf_r+0x1166>
  4050ea:	4621      	mov	r1, r4
  4050ec:	4638      	mov	r0, r7
  4050ee:	f002 fce7 	bl	407ac0 <memchr>
  4050f2:	2800      	cmp	r0, #0
  4050f4:	f000 8697 	beq.w	405e26 <_vfprintf_r+0x130a>
  4050f8:	1bc3      	subs	r3, r0, r7
  4050fa:	930d      	str	r3, [sp, #52]	; 0x34
  4050fc:	9409      	str	r4, [sp, #36]	; 0x24
  4050fe:	950e      	str	r5, [sp, #56]	; 0x38
  405100:	f8cd b018 	str.w	fp, [sp, #24]
  405104:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405108:	9307      	str	r3, [sp, #28]
  40510a:	9410      	str	r4, [sp, #64]	; 0x40
  40510c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405110:	e636      	b.n	404d80 <_vfprintf_r+0x264>
  405112:	2a00      	cmp	r2, #0
  405114:	f040 8796 	bne.w	406044 <_vfprintf_r+0x1528>
  405118:	f01b 0f20 	tst.w	fp, #32
  40511c:	f040 845a 	bne.w	4059d4 <_vfprintf_r+0xeb8>
  405120:	f01b 0f10 	tst.w	fp, #16
  405124:	f040 83a2 	bne.w	40586c <_vfprintf_r+0xd50>
  405128:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40512c:	f000 839e 	beq.w	40586c <_vfprintf_r+0xd50>
  405130:	990e      	ldr	r1, [sp, #56]	; 0x38
  405132:	f9b1 4000 	ldrsh.w	r4, [r1]
  405136:	3104      	adds	r1, #4
  405138:	17e5      	asrs	r5, r4, #31
  40513a:	4622      	mov	r2, r4
  40513c:	462b      	mov	r3, r5
  40513e:	910e      	str	r1, [sp, #56]	; 0x38
  405140:	2a00      	cmp	r2, #0
  405142:	f173 0300 	sbcs.w	r3, r3, #0
  405146:	f2c0 8487 	blt.w	405a58 <_vfprintf_r+0xf3c>
  40514a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40514c:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405150:	1c4a      	adds	r2, r1, #1
  405152:	f04f 0301 	mov.w	r3, #1
  405156:	f47f adf5 	bne.w	404d44 <_vfprintf_r+0x228>
  40515a:	ea54 0205 	orrs.w	r2, r4, r5
  40515e:	f000 826c 	beq.w	40563a <_vfprintf_r+0xb1e>
  405162:	f8cd b018 	str.w	fp, [sp, #24]
  405166:	2b01      	cmp	r3, #1
  405168:	f000 8308 	beq.w	40577c <_vfprintf_r+0xc60>
  40516c:	2b02      	cmp	r3, #2
  40516e:	f040 8295 	bne.w	40569c <_vfprintf_r+0xb80>
  405172:	9818      	ldr	r0, [sp, #96]	; 0x60
  405174:	af30      	add	r7, sp, #192	; 0xc0
  405176:	0923      	lsrs	r3, r4, #4
  405178:	f004 010f 	and.w	r1, r4, #15
  40517c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405180:	092a      	lsrs	r2, r5, #4
  405182:	461c      	mov	r4, r3
  405184:	4615      	mov	r5, r2
  405186:	5c43      	ldrb	r3, [r0, r1]
  405188:	f807 3d01 	strb.w	r3, [r7, #-1]!
  40518c:	ea54 0305 	orrs.w	r3, r4, r5
  405190:	d1f1      	bne.n	405176 <_vfprintf_r+0x65a>
  405192:	ab30      	add	r3, sp, #192	; 0xc0
  405194:	1bdb      	subs	r3, r3, r7
  405196:	930d      	str	r3, [sp, #52]	; 0x34
  405198:	e5ea      	b.n	404d70 <_vfprintf_r+0x254>
  40519a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  40519e:	f899 6000 	ldrb.w	r6, [r9]
  4051a2:	e53a      	b.n	404c1a <_vfprintf_r+0xfe>
  4051a4:	f899 6000 	ldrb.w	r6, [r9]
  4051a8:	2e6c      	cmp	r6, #108	; 0x6c
  4051aa:	bf03      	ittte	eq
  4051ac:	f899 6001 	ldrbeq.w	r6, [r9, #1]
  4051b0:	f04b 0b20 	orreq.w	fp, fp, #32
  4051b4:	f109 0901 	addeq.w	r9, r9, #1
  4051b8:	f04b 0b10 	orrne.w	fp, fp, #16
  4051bc:	e52d      	b.n	404c1a <_vfprintf_r+0xfe>
  4051be:	2a00      	cmp	r2, #0
  4051c0:	f040 874c 	bne.w	40605c <_vfprintf_r+0x1540>
  4051c4:	f01b 0f20 	tst.w	fp, #32
  4051c8:	f040 853f 	bne.w	405c4a <_vfprintf_r+0x112e>
  4051cc:	f01b 0f10 	tst.w	fp, #16
  4051d0:	f040 80fc 	bne.w	4053cc <_vfprintf_r+0x8b0>
  4051d4:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4051d8:	f000 80f8 	beq.w	4053cc <_vfprintf_r+0x8b0>
  4051dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4051de:	6813      	ldr	r3, [r2, #0]
  4051e0:	3204      	adds	r2, #4
  4051e2:	920e      	str	r2, [sp, #56]	; 0x38
  4051e4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  4051e8:	801a      	strh	r2, [r3, #0]
  4051ea:	e4e3      	b.n	404bb4 <_vfprintf_r+0x98>
  4051ec:	f899 6000 	ldrb.w	r6, [r9]
  4051f0:	2900      	cmp	r1, #0
  4051f2:	f47f ad12 	bne.w	404c1a <_vfprintf_r+0xfe>
  4051f6:	2201      	movs	r2, #1
  4051f8:	2120      	movs	r1, #32
  4051fa:	e50e      	b.n	404c1a <_vfprintf_r+0xfe>
  4051fc:	f899 6000 	ldrb.w	r6, [r9]
  405200:	2e2a      	cmp	r6, #42	; 0x2a
  405202:	f109 0001 	add.w	r0, r9, #1
  405206:	f000 86f1 	beq.w	405fec <_vfprintf_r+0x14d0>
  40520a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40520e:	2b09      	cmp	r3, #9
  405210:	4681      	mov	r9, r0
  405212:	bf98      	it	ls
  405214:	2000      	movls	r0, #0
  405216:	f200 863d 	bhi.w	405e94 <_vfprintf_r+0x1378>
  40521a:	f819 6b01 	ldrb.w	r6, [r9], #1
  40521e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  405222:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  405226:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  40522a:	2b09      	cmp	r3, #9
  40522c:	d9f5      	bls.n	40521a <_vfprintf_r+0x6fe>
  40522e:	9009      	str	r0, [sp, #36]	; 0x24
  405230:	e4f5      	b.n	404c1e <_vfprintf_r+0x102>
  405232:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  405236:	f899 6000 	ldrb.w	r6, [r9]
  40523a:	e4ee      	b.n	404c1a <_vfprintf_r+0xfe>
  40523c:	f899 6000 	ldrb.w	r6, [r9]
  405240:	2201      	movs	r2, #1
  405242:	212b      	movs	r1, #43	; 0x2b
  405244:	e4e9      	b.n	404c1a <_vfprintf_r+0xfe>
  405246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405248:	4bae      	ldr	r3, [pc, #696]	; (405504 <_vfprintf_r+0x9e8>)
  40524a:	6814      	ldr	r4, [r2, #0]
  40524c:	9318      	str	r3, [sp, #96]	; 0x60
  40524e:	2678      	movs	r6, #120	; 0x78
  405250:	2330      	movs	r3, #48	; 0x30
  405252:	3204      	adds	r2, #4
  405254:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  405258:	f04b 0b02 	orr.w	fp, fp, #2
  40525c:	920e      	str	r2, [sp, #56]	; 0x38
  40525e:	2500      	movs	r5, #0
  405260:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  405264:	2302      	movs	r3, #2
  405266:	e565      	b.n	404d34 <_vfprintf_r+0x218>
  405268:	2a00      	cmp	r2, #0
  40526a:	f040 86e4 	bne.w	406036 <_vfprintf_r+0x151a>
  40526e:	4ba6      	ldr	r3, [pc, #664]	; (405508 <_vfprintf_r+0x9ec>)
  405270:	9318      	str	r3, [sp, #96]	; 0x60
  405272:	e6ff      	b.n	405074 <_vfprintf_r+0x558>
  405274:	990e      	ldr	r1, [sp, #56]	; 0x38
  405276:	f8cd b018 	str.w	fp, [sp, #24]
  40527a:	680a      	ldr	r2, [r1, #0]
  40527c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  405280:	2300      	movs	r3, #0
  405282:	460a      	mov	r2, r1
  405284:	469a      	mov	sl, r3
  405286:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40528a:	3204      	adds	r2, #4
  40528c:	2301      	movs	r3, #1
  40528e:	9307      	str	r3, [sp, #28]
  405290:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  405294:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
  405298:	920e      	str	r2, [sp, #56]	; 0x38
  40529a:	930d      	str	r3, [sp, #52]	; 0x34
  40529c:	af26      	add	r7, sp, #152	; 0x98
  40529e:	e575      	b.n	404d8c <_vfprintf_r+0x270>
  4052a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4052a4:	2000      	movs	r0, #0
  4052a6:	f819 6b01 	ldrb.w	r6, [r9], #1
  4052aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4052ae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  4052b2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
  4052b6:	2b09      	cmp	r3, #9
  4052b8:	d9f5      	bls.n	4052a6 <_vfprintf_r+0x78a>
  4052ba:	900c      	str	r0, [sp, #48]	; 0x30
  4052bc:	e4af      	b.n	404c1e <_vfprintf_r+0x102>
  4052be:	2a00      	cmp	r2, #0
  4052c0:	f040 86c8 	bne.w	406054 <_vfprintf_r+0x1538>
  4052c4:	f04b 0b10 	orr.w	fp, fp, #16
  4052c8:	e726      	b.n	405118 <_vfprintf_r+0x5fc>
  4052ca:	f04b 0b01 	orr.w	fp, fp, #1
  4052ce:	f899 6000 	ldrb.w	r6, [r9]
  4052d2:	e4a2      	b.n	404c1a <_vfprintf_r+0xfe>
  4052d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4052d6:	6823      	ldr	r3, [r4, #0]
  4052d8:	930c      	str	r3, [sp, #48]	; 0x30
  4052da:	4618      	mov	r0, r3
  4052dc:	2800      	cmp	r0, #0
  4052de:	4623      	mov	r3, r4
  4052e0:	f103 0304 	add.w	r3, r3, #4
  4052e4:	f6ff aeb8 	blt.w	405058 <_vfprintf_r+0x53c>
  4052e8:	930e      	str	r3, [sp, #56]	; 0x38
  4052ea:	f899 6000 	ldrb.w	r6, [r9]
  4052ee:	e494      	b.n	404c1a <_vfprintf_r+0xfe>
  4052f0:	2a00      	cmp	r2, #0
  4052f2:	f040 86b7 	bne.w	406064 <_vfprintf_r+0x1548>
  4052f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4052f8:	3507      	adds	r5, #7
  4052fa:	f025 0307 	bic.w	r3, r5, #7
  4052fe:	f103 0208 	add.w	r2, r3, #8
  405302:	920e      	str	r2, [sp, #56]	; 0x38
  405304:	681a      	ldr	r2, [r3, #0]
  405306:	9213      	str	r2, [sp, #76]	; 0x4c
  405308:	685b      	ldr	r3, [r3, #4]
  40530a:	9312      	str	r3, [sp, #72]	; 0x48
  40530c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40530e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  405310:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  405314:	4628      	mov	r0, r5
  405316:	4621      	mov	r1, r4
  405318:	f04f 32ff 	mov.w	r2, #4294967295
  40531c:	4b7b      	ldr	r3, [pc, #492]	; (40550c <_vfprintf_r+0x9f0>)
  40531e:	f003 fef1 	bl	409104 <__aeabi_dcmpun>
  405322:	2800      	cmp	r0, #0
  405324:	f040 83a2 	bne.w	405a6c <_vfprintf_r+0xf50>
  405328:	4628      	mov	r0, r5
  40532a:	4621      	mov	r1, r4
  40532c:	f04f 32ff 	mov.w	r2, #4294967295
  405330:	4b76      	ldr	r3, [pc, #472]	; (40550c <_vfprintf_r+0x9f0>)
  405332:	f003 fec9 	bl	4090c8 <__aeabi_dcmple>
  405336:	2800      	cmp	r0, #0
  405338:	f040 8398 	bne.w	405a6c <_vfprintf_r+0xf50>
  40533c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40533e:	9813      	ldr	r0, [sp, #76]	; 0x4c
  405340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405342:	9912      	ldr	r1, [sp, #72]	; 0x48
  405344:	f003 feb6 	bl	4090b4 <__aeabi_dcmplt>
  405348:	2800      	cmp	r0, #0
  40534a:	f040 8435 	bne.w	405bb8 <_vfprintf_r+0x109c>
  40534e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405352:	4f6f      	ldr	r7, [pc, #444]	; (405510 <_vfprintf_r+0x9f4>)
  405354:	4b6f      	ldr	r3, [pc, #444]	; (405514 <_vfprintf_r+0x9f8>)
  405356:	2203      	movs	r2, #3
  405358:	2100      	movs	r1, #0
  40535a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40535e:	9207      	str	r2, [sp, #28]
  405360:	9109      	str	r1, [sp, #36]	; 0x24
  405362:	9006      	str	r0, [sp, #24]
  405364:	2e47      	cmp	r6, #71	; 0x47
  405366:	bfd8      	it	le
  405368:	461f      	movle	r7, r3
  40536a:	920d      	str	r2, [sp, #52]	; 0x34
  40536c:	9110      	str	r1, [sp, #64]	; 0x40
  40536e:	e507      	b.n	404d80 <_vfprintf_r+0x264>
  405370:	f04b 0b08 	orr.w	fp, fp, #8
  405374:	f899 6000 	ldrb.w	r6, [r9]
  405378:	e44f      	b.n	404c1a <_vfprintf_r+0xfe>
  40537a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  40537c:	3507      	adds	r5, #7
  40537e:	f025 0307 	bic.w	r3, r5, #7
  405382:	f103 0208 	add.w	r2, r3, #8
  405386:	e9d3 4500 	ldrd	r4, r5, [r3]
  40538a:	920e      	str	r2, [sp, #56]	; 0x38
  40538c:	2300      	movs	r3, #0
  40538e:	e4d1      	b.n	404d34 <_vfprintf_r+0x218>
  405390:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  405392:	3507      	adds	r5, #7
  405394:	f025 0307 	bic.w	r3, r5, #7
  405398:	f103 0208 	add.w	r2, r3, #8
  40539c:	e9d3 4500 	ldrd	r4, r5, [r3]
  4053a0:	920e      	str	r2, [sp, #56]	; 0x38
  4053a2:	2301      	movs	r3, #1
  4053a4:	e4c6      	b.n	404d34 <_vfprintf_r+0x218>
  4053a6:	2a00      	cmp	r2, #0
  4053a8:	f040 8650 	bne.w	40604c <_vfprintf_r+0x1530>
  4053ac:	b1c6      	cbz	r6, 4053e0 <_vfprintf_r+0x8c4>
  4053ae:	2300      	movs	r3, #0
  4053b0:	2201      	movs	r2, #1
  4053b2:	469a      	mov	sl, r3
  4053b4:	9207      	str	r2, [sp, #28]
  4053b6:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  4053ba:	f8cd b018 	str.w	fp, [sp, #24]
  4053be:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4053c2:	9309      	str	r3, [sp, #36]	; 0x24
  4053c4:	9310      	str	r3, [sp, #64]	; 0x40
  4053c6:	920d      	str	r2, [sp, #52]	; 0x34
  4053c8:	af26      	add	r7, sp, #152	; 0x98
  4053ca:	e4df      	b.n	404d8c <_vfprintf_r+0x270>
  4053cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4053ce:	6813      	ldr	r3, [r2, #0]
  4053d0:	3204      	adds	r2, #4
  4053d2:	920e      	str	r2, [sp, #56]	; 0x38
  4053d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4053d6:	601a      	str	r2, [r3, #0]
  4053d8:	f7ff bbec 	b.w	404bb4 <_vfprintf_r+0x98>
  4053dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4053de:	e527      	b.n	404e30 <_vfprintf_r+0x314>
  4053e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4053e2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  4053e6:	2b00      	cmp	r3, #0
  4053e8:	f040 8594 	bne.w	405f14 <_vfprintf_r+0x13f8>
  4053ec:	2300      	movs	r3, #0
  4053ee:	9324      	str	r3, [sp, #144]	; 0x90
  4053f0:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
  4053f4:	f013 0f01 	tst.w	r3, #1
  4053f8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4053fc:	d102      	bne.n	405404 <_vfprintf_r+0x8e8>
  4053fe:	059a      	lsls	r2, r3, #22
  405400:	f140 8249 	bpl.w	405896 <_vfprintf_r+0xd7a>
  405404:	065b      	lsls	r3, r3, #25
  405406:	f53f adec 	bmi.w	404fe2 <_vfprintf_r+0x4c6>
  40540a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40540c:	b041      	add	sp, #260	; 0x104
  40540e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405412:	2e65      	cmp	r6, #101	; 0x65
  405414:	f340 80b2 	ble.w	40557c <_vfprintf_r+0xa60>
  405418:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40541a:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40541c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40541e:	9912      	ldr	r1, [sp, #72]	; 0x48
  405420:	f003 fe3e 	bl	4090a0 <__aeabi_dcmpeq>
  405424:	2800      	cmp	r0, #0
  405426:	f000 8160 	beq.w	4056ea <_vfprintf_r+0xbce>
  40542a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40542c:	4a3a      	ldr	r2, [pc, #232]	; (405518 <_vfprintf_r+0x9fc>)
  40542e:	f8c8 2000 	str.w	r2, [r8]
  405432:	3301      	adds	r3, #1
  405434:	3401      	adds	r4, #1
  405436:	2201      	movs	r2, #1
  405438:	2b07      	cmp	r3, #7
  40543a:	9425      	str	r4, [sp, #148]	; 0x94
  40543c:	9324      	str	r3, [sp, #144]	; 0x90
  40543e:	f8c8 2004 	str.w	r2, [r8, #4]
  405442:	f300 83bf 	bgt.w	405bc4 <_vfprintf_r+0x10a8>
  405446:	f108 0808 	add.w	r8, r8, #8
  40544a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40544c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40544e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405450:	4293      	cmp	r3, r2
  405452:	db03      	blt.n	40545c <_vfprintf_r+0x940>
  405454:	9b06      	ldr	r3, [sp, #24]
  405456:	07df      	lsls	r7, r3, #31
  405458:	f57f ad65 	bpl.w	404f26 <_vfprintf_r+0x40a>
  40545c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40545e:	9914      	ldr	r1, [sp, #80]	; 0x50
  405460:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405462:	f8c8 2000 	str.w	r2, [r8]
  405466:	3301      	adds	r3, #1
  405468:	440c      	add	r4, r1
  40546a:	2b07      	cmp	r3, #7
  40546c:	f8c8 1004 	str.w	r1, [r8, #4]
  405470:	9425      	str	r4, [sp, #148]	; 0x94
  405472:	9324      	str	r3, [sp, #144]	; 0x90
  405474:	f300 83f8 	bgt.w	405c68 <_vfprintf_r+0x114c>
  405478:	f108 0808 	add.w	r8, r8, #8
  40547c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40547e:	1e5e      	subs	r6, r3, #1
  405480:	2e00      	cmp	r6, #0
  405482:	f77f ad50 	ble.w	404f26 <_vfprintf_r+0x40a>
  405486:	2e10      	cmp	r6, #16
  405488:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40548a:	4d24      	ldr	r5, [pc, #144]	; (40551c <_vfprintf_r+0xa00>)
  40548c:	f340 81dd 	ble.w	40584a <_vfprintf_r+0xd2e>
  405490:	2710      	movs	r7, #16
  405492:	f8dd a020 	ldr.w	sl, [sp, #32]
  405496:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40549a:	e005      	b.n	4054a8 <_vfprintf_r+0x98c>
  40549c:	f108 0808 	add.w	r8, r8, #8
  4054a0:	3e10      	subs	r6, #16
  4054a2:	2e10      	cmp	r6, #16
  4054a4:	f340 81d1 	ble.w	40584a <_vfprintf_r+0xd2e>
  4054a8:	3301      	adds	r3, #1
  4054aa:	3410      	adds	r4, #16
  4054ac:	2b07      	cmp	r3, #7
  4054ae:	9425      	str	r4, [sp, #148]	; 0x94
  4054b0:	9324      	str	r3, [sp, #144]	; 0x90
  4054b2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4054b6:	ddf1      	ble.n	40549c <_vfprintf_r+0x980>
  4054b8:	aa23      	add	r2, sp, #140	; 0x8c
  4054ba:	4659      	mov	r1, fp
  4054bc:	4650      	mov	r0, sl
  4054be:	f003 f8d7 	bl	408670 <__sprint_r>
  4054c2:	2800      	cmp	r0, #0
  4054c4:	f040 83cd 	bne.w	405c62 <_vfprintf_r+0x1146>
  4054c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4054ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4054cc:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4054d0:	e7e6      	b.n	4054a0 <_vfprintf_r+0x984>
  4054d2:	46aa      	mov	sl, r5
  4054d4:	e78c      	b.n	4053f0 <_vfprintf_r+0x8d4>
  4054d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4054d8:	9a07      	ldr	r2, [sp, #28]
  4054da:	eba3 0a02 	sub.w	sl, r3, r2
  4054de:	f1ba 0f00 	cmp.w	sl, #0
  4054e2:	f77f acca 	ble.w	404e7a <_vfprintf_r+0x35e>
  4054e6:	f1ba 0f10 	cmp.w	sl, #16
  4054ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4054ec:	4d0b      	ldr	r5, [pc, #44]	; (40551c <_vfprintf_r+0xa00>)
  4054ee:	dd39      	ble.n	405564 <_vfprintf_r+0xa48>
  4054f0:	4642      	mov	r2, r8
  4054f2:	4621      	mov	r1, r4
  4054f4:	46b0      	mov	r8, r6
  4054f6:	f04f 0b10 	mov.w	fp, #16
  4054fa:	462e      	mov	r6, r5
  4054fc:	9c08      	ldr	r4, [sp, #32]
  4054fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405500:	e015      	b.n	40552e <_vfprintf_r+0xa12>
  405502:	bf00      	nop
  405504:	00409280 	.word	0x00409280
  405508:	0040926c 	.word	0x0040926c
  40550c:	7fefffff 	.word	0x7fefffff
  405510:	00409260 	.word	0x00409260
  405514:	0040925c 	.word	0x0040925c
  405518:	0040929c 	.word	0x0040929c
  40551c:	004092b0 	.word	0x004092b0
  405520:	f1aa 0a10 	sub.w	sl, sl, #16
  405524:	f1ba 0f10 	cmp.w	sl, #16
  405528:	f102 0208 	add.w	r2, r2, #8
  40552c:	dd16      	ble.n	40555c <_vfprintf_r+0xa40>
  40552e:	3301      	adds	r3, #1
  405530:	3110      	adds	r1, #16
  405532:	2b07      	cmp	r3, #7
  405534:	9125      	str	r1, [sp, #148]	; 0x94
  405536:	9324      	str	r3, [sp, #144]	; 0x90
  405538:	e882 0840 	stmia.w	r2, {r6, fp}
  40553c:	ddf0      	ble.n	405520 <_vfprintf_r+0xa04>
  40553e:	aa23      	add	r2, sp, #140	; 0x8c
  405540:	4629      	mov	r1, r5
  405542:	4620      	mov	r0, r4
  405544:	f003 f894 	bl	408670 <__sprint_r>
  405548:	2800      	cmp	r0, #0
  40554a:	d1c2      	bne.n	4054d2 <_vfprintf_r+0x9b6>
  40554c:	f1aa 0a10 	sub.w	sl, sl, #16
  405550:	f1ba 0f10 	cmp.w	sl, #16
  405554:	9925      	ldr	r1, [sp, #148]	; 0x94
  405556:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405558:	aa30      	add	r2, sp, #192	; 0xc0
  40555a:	dce8      	bgt.n	40552e <_vfprintf_r+0xa12>
  40555c:	4635      	mov	r5, r6
  40555e:	460c      	mov	r4, r1
  405560:	4646      	mov	r6, r8
  405562:	4690      	mov	r8, r2
  405564:	3301      	adds	r3, #1
  405566:	4454      	add	r4, sl
  405568:	2b07      	cmp	r3, #7
  40556a:	9425      	str	r4, [sp, #148]	; 0x94
  40556c:	9324      	str	r3, [sp, #144]	; 0x90
  40556e:	e888 0420 	stmia.w	r8, {r5, sl}
  405572:	f300 8264 	bgt.w	405a3e <_vfprintf_r+0xf22>
  405576:	f108 0808 	add.w	r8, r8, #8
  40557a:	e47e      	b.n	404e7a <_vfprintf_r+0x35e>
  40557c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40557e:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405580:	2b01      	cmp	r3, #1
  405582:	f340 81fd 	ble.w	405980 <_vfprintf_r+0xe64>
  405586:	3601      	adds	r6, #1
  405588:	3401      	adds	r4, #1
  40558a:	2301      	movs	r3, #1
  40558c:	2e07      	cmp	r6, #7
  40558e:	9425      	str	r4, [sp, #148]	; 0x94
  405590:	9624      	str	r6, [sp, #144]	; 0x90
  405592:	f8c8 7000 	str.w	r7, [r8]
  405596:	f8c8 3004 	str.w	r3, [r8, #4]
  40559a:	f300 820e 	bgt.w	4059ba <_vfprintf_r+0xe9e>
  40559e:	f108 0808 	add.w	r8, r8, #8
  4055a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4055a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4055a6:	f8c8 3000 	str.w	r3, [r8]
  4055aa:	3601      	adds	r6, #1
  4055ac:	4414      	add	r4, r2
  4055ae:	2e07      	cmp	r6, #7
  4055b0:	9425      	str	r4, [sp, #148]	; 0x94
  4055b2:	9624      	str	r6, [sp, #144]	; 0x90
  4055b4:	f8c8 2004 	str.w	r2, [r8, #4]
  4055b8:	f300 822e 	bgt.w	405a18 <_vfprintf_r+0xefc>
  4055bc:	f108 0808 	add.w	r8, r8, #8
  4055c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4055c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4055c4:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4055c6:	9912      	ldr	r1, [sp, #72]	; 0x48
  4055c8:	f003 fd6a 	bl	4090a0 <__aeabi_dcmpeq>
  4055cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4055ce:	2800      	cmp	r0, #0
  4055d0:	f040 8106 	bne.w	4057e0 <_vfprintf_r+0xcc4>
  4055d4:	3b01      	subs	r3, #1
  4055d6:	3601      	adds	r6, #1
  4055d8:	3701      	adds	r7, #1
  4055da:	441c      	add	r4, r3
  4055dc:	2e07      	cmp	r6, #7
  4055de:	9624      	str	r6, [sp, #144]	; 0x90
  4055e0:	9425      	str	r4, [sp, #148]	; 0x94
  4055e2:	f8c8 7000 	str.w	r7, [r8]
  4055e6:	f8c8 3004 	str.w	r3, [r8, #4]
  4055ea:	f300 81d9 	bgt.w	4059a0 <_vfprintf_r+0xe84>
  4055ee:	f108 0808 	add.w	r8, r8, #8
  4055f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4055f4:	f8c8 2004 	str.w	r2, [r8, #4]
  4055f8:	3601      	adds	r6, #1
  4055fa:	4414      	add	r4, r2
  4055fc:	ab1f      	add	r3, sp, #124	; 0x7c
  4055fe:	2e07      	cmp	r6, #7
  405600:	9425      	str	r4, [sp, #148]	; 0x94
  405602:	9624      	str	r6, [sp, #144]	; 0x90
  405604:	f8c8 3000 	str.w	r3, [r8]
  405608:	f77f ac8b 	ble.w	404f22 <_vfprintf_r+0x406>
  40560c:	aa23      	add	r2, sp, #140	; 0x8c
  40560e:	990a      	ldr	r1, [sp, #40]	; 0x28
  405610:	9808      	ldr	r0, [sp, #32]
  405612:	f003 f82d 	bl	408670 <__sprint_r>
  405616:	b958      	cbnz	r0, 405630 <_vfprintf_r+0xb14>
  405618:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40561a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40561e:	e482      	b.n	404f26 <_vfprintf_r+0x40a>
  405620:	aa23      	add	r2, sp, #140	; 0x8c
  405622:	990a      	ldr	r1, [sp, #40]	; 0x28
  405624:	9808      	ldr	r0, [sp, #32]
  405626:	f003 f823 	bl	408670 <__sprint_r>
  40562a:	2800      	cmp	r0, #0
  40562c:	f43f acc5 	beq.w	404fba <_vfprintf_r+0x49e>
  405630:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
  405634:	e6dc      	b.n	4053f0 <_vfprintf_r+0x8d4>
  405636:	f8dd b018 	ldr.w	fp, [sp, #24]
  40563a:	2b01      	cmp	r3, #1
  40563c:	f000 8121 	beq.w	405882 <_vfprintf_r+0xd66>
  405640:	2b02      	cmp	r3, #2
  405642:	d127      	bne.n	405694 <_vfprintf_r+0xb78>
  405644:	f8cd b018 	str.w	fp, [sp, #24]
  405648:	2400      	movs	r4, #0
  40564a:	2500      	movs	r5, #0
  40564c:	e591      	b.n	405172 <_vfprintf_r+0x656>
  40564e:	aa23      	add	r2, sp, #140	; 0x8c
  405650:	990a      	ldr	r1, [sp, #40]	; 0x28
  405652:	9808      	ldr	r0, [sp, #32]
  405654:	f003 f80c 	bl	408670 <__sprint_r>
  405658:	2800      	cmp	r0, #0
  40565a:	d1e9      	bne.n	405630 <_vfprintf_r+0xb14>
  40565c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40565e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405662:	e44d      	b.n	404f00 <_vfprintf_r+0x3e4>
  405664:	aa23      	add	r2, sp, #140	; 0x8c
  405666:	990a      	ldr	r1, [sp, #40]	; 0x28
  405668:	9808      	ldr	r0, [sp, #32]
  40566a:	f003 f801 	bl	408670 <__sprint_r>
  40566e:	2800      	cmp	r0, #0
  405670:	d1de      	bne.n	405630 <_vfprintf_r+0xb14>
  405672:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405674:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405678:	f7ff bbec 	b.w	404e54 <_vfprintf_r+0x338>
  40567c:	aa23      	add	r2, sp, #140	; 0x8c
  40567e:	990a      	ldr	r1, [sp, #40]	; 0x28
  405680:	9808      	ldr	r0, [sp, #32]
  405682:	f002 fff5 	bl	408670 <__sprint_r>
  405686:	2800      	cmp	r0, #0
  405688:	d1d2      	bne.n	405630 <_vfprintf_r+0xb14>
  40568a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40568c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405690:	f7ff bbf0 	b.w	404e74 <_vfprintf_r+0x358>
  405694:	f8cd b018 	str.w	fp, [sp, #24]
  405698:	2400      	movs	r4, #0
  40569a:	2500      	movs	r5, #0
  40569c:	a930      	add	r1, sp, #192	; 0xc0
  40569e:	e000      	b.n	4056a2 <_vfprintf_r+0xb86>
  4056a0:	4639      	mov	r1, r7
  4056a2:	08e2      	lsrs	r2, r4, #3
  4056a4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4056a8:	08e8      	lsrs	r0, r5, #3
  4056aa:	f004 0307 	and.w	r3, r4, #7
  4056ae:	4605      	mov	r5, r0
  4056b0:	4614      	mov	r4, r2
  4056b2:	3330      	adds	r3, #48	; 0x30
  4056b4:	ea54 0205 	orrs.w	r2, r4, r5
  4056b8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4056bc:	f101 37ff 	add.w	r7, r1, #4294967295
  4056c0:	d1ee      	bne.n	4056a0 <_vfprintf_r+0xb84>
  4056c2:	9a06      	ldr	r2, [sp, #24]
  4056c4:	07d2      	lsls	r2, r2, #31
  4056c6:	f57f ad64 	bpl.w	405192 <_vfprintf_r+0x676>
  4056ca:	2b30      	cmp	r3, #48	; 0x30
  4056cc:	f43f ad61 	beq.w	405192 <_vfprintf_r+0x676>
  4056d0:	2330      	movs	r3, #48	; 0x30
  4056d2:	3902      	subs	r1, #2
  4056d4:	f807 3c01 	strb.w	r3, [r7, #-1]
  4056d8:	ab30      	add	r3, sp, #192	; 0xc0
  4056da:	1a5b      	subs	r3, r3, r1
  4056dc:	930d      	str	r3, [sp, #52]	; 0x34
  4056de:	460f      	mov	r7, r1
  4056e0:	f7ff bb46 	b.w	404d70 <_vfprintf_r+0x254>
  4056e4:	2302      	movs	r3, #2
  4056e6:	f7ff bb25 	b.w	404d34 <_vfprintf_r+0x218>
  4056ea:	991d      	ldr	r1, [sp, #116]	; 0x74
  4056ec:	2900      	cmp	r1, #0
  4056ee:	f340 8274 	ble.w	405bda <_vfprintf_r+0x10be>
  4056f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4056f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056f6:	4293      	cmp	r3, r2
  4056f8:	bfa8      	it	ge
  4056fa:	4613      	movge	r3, r2
  4056fc:	2b00      	cmp	r3, #0
  4056fe:	461e      	mov	r6, r3
  405700:	dd0d      	ble.n	40571e <_vfprintf_r+0xc02>
  405702:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405704:	f8c8 7000 	str.w	r7, [r8]
  405708:	3301      	adds	r3, #1
  40570a:	4434      	add	r4, r6
  40570c:	2b07      	cmp	r3, #7
  40570e:	9425      	str	r4, [sp, #148]	; 0x94
  405710:	f8c8 6004 	str.w	r6, [r8, #4]
  405714:	9324      	str	r3, [sp, #144]	; 0x90
  405716:	f300 8324 	bgt.w	405d62 <_vfprintf_r+0x1246>
  40571a:	f108 0808 	add.w	r8, r8, #8
  40571e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405720:	2e00      	cmp	r6, #0
  405722:	bfa8      	it	ge
  405724:	1b9b      	subge	r3, r3, r6
  405726:	2b00      	cmp	r3, #0
  405728:	461e      	mov	r6, r3
  40572a:	f340 80d0 	ble.w	4058ce <_vfprintf_r+0xdb2>
  40572e:	2e10      	cmp	r6, #16
  405730:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405732:	4dc0      	ldr	r5, [pc, #768]	; (405a34 <_vfprintf_r+0xf18>)
  405734:	f340 80b7 	ble.w	4058a6 <_vfprintf_r+0xd8a>
  405738:	4622      	mov	r2, r4
  40573a:	f04f 0a10 	mov.w	sl, #16
  40573e:	f8dd b020 	ldr.w	fp, [sp, #32]
  405742:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405744:	e005      	b.n	405752 <_vfprintf_r+0xc36>
  405746:	f108 0808 	add.w	r8, r8, #8
  40574a:	3e10      	subs	r6, #16
  40574c:	2e10      	cmp	r6, #16
  40574e:	f340 80a9 	ble.w	4058a4 <_vfprintf_r+0xd88>
  405752:	3301      	adds	r3, #1
  405754:	3210      	adds	r2, #16
  405756:	2b07      	cmp	r3, #7
  405758:	9225      	str	r2, [sp, #148]	; 0x94
  40575a:	9324      	str	r3, [sp, #144]	; 0x90
  40575c:	e888 0420 	stmia.w	r8, {r5, sl}
  405760:	ddf1      	ble.n	405746 <_vfprintf_r+0xc2a>
  405762:	aa23      	add	r2, sp, #140	; 0x8c
  405764:	4621      	mov	r1, r4
  405766:	4658      	mov	r0, fp
  405768:	f002 ff82 	bl	408670 <__sprint_r>
  40576c:	2800      	cmp	r0, #0
  40576e:	f040 8324 	bne.w	405dba <_vfprintf_r+0x129e>
  405772:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405774:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405776:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40577a:	e7e6      	b.n	40574a <_vfprintf_r+0xc2e>
  40577c:	2d00      	cmp	r5, #0
  40577e:	bf08      	it	eq
  405780:	2c0a      	cmpeq	r4, #10
  405782:	d37c      	bcc.n	40587e <_vfprintf_r+0xd62>
  405784:	af30      	add	r7, sp, #192	; 0xc0
  405786:	4620      	mov	r0, r4
  405788:	4629      	mov	r1, r5
  40578a:	220a      	movs	r2, #10
  40578c:	2300      	movs	r3, #0
  40578e:	f7fe fa61 	bl	403c54 <__aeabi_uldivmod>
  405792:	3230      	adds	r2, #48	; 0x30
  405794:	f807 2d01 	strb.w	r2, [r7, #-1]!
  405798:	4620      	mov	r0, r4
  40579a:	4629      	mov	r1, r5
  40579c:	2300      	movs	r3, #0
  40579e:	220a      	movs	r2, #10
  4057a0:	f7fe fa58 	bl	403c54 <__aeabi_uldivmod>
  4057a4:	4604      	mov	r4, r0
  4057a6:	460d      	mov	r5, r1
  4057a8:	ea54 0305 	orrs.w	r3, r4, r5
  4057ac:	d1eb      	bne.n	405786 <_vfprintf_r+0xc6a>
  4057ae:	ab30      	add	r3, sp, #192	; 0xc0
  4057b0:	1bdb      	subs	r3, r3, r7
  4057b2:	930d      	str	r3, [sp, #52]	; 0x34
  4057b4:	f7ff badc 	b.w	404d70 <_vfprintf_r+0x254>
  4057b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4057ba:	930d      	str	r3, [sp, #52]	; 0x34
  4057bc:	af30      	add	r7, sp, #192	; 0xc0
  4057be:	f7ff bad7 	b.w	404d70 <_vfprintf_r+0x254>
  4057c2:	aa23      	add	r2, sp, #140	; 0x8c
  4057c4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4057c6:	9808      	ldr	r0, [sp, #32]
  4057c8:	f002 ff52 	bl	408670 <__sprint_r>
  4057cc:	2800      	cmp	r0, #0
  4057ce:	f47f af2f 	bne.w	405630 <_vfprintf_r+0xb14>
  4057d2:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  4057d6:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4057d8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4057dc:	f7ff bb28 	b.w	404e30 <_vfprintf_r+0x314>
  4057e0:	1e5f      	subs	r7, r3, #1
  4057e2:	2f00      	cmp	r7, #0
  4057e4:	f77f af05 	ble.w	4055f2 <_vfprintf_r+0xad6>
  4057e8:	2f10      	cmp	r7, #16
  4057ea:	4d92      	ldr	r5, [pc, #584]	; (405a34 <_vfprintf_r+0xf18>)
  4057ec:	f340 810a 	ble.w	405a04 <_vfprintf_r+0xee8>
  4057f0:	f04f 0a10 	mov.w	sl, #16
  4057f4:	f8dd b020 	ldr.w	fp, [sp, #32]
  4057f8:	e005      	b.n	405806 <_vfprintf_r+0xcea>
  4057fa:	f108 0808 	add.w	r8, r8, #8
  4057fe:	3f10      	subs	r7, #16
  405800:	2f10      	cmp	r7, #16
  405802:	f340 80ff 	ble.w	405a04 <_vfprintf_r+0xee8>
  405806:	3601      	adds	r6, #1
  405808:	3410      	adds	r4, #16
  40580a:	2e07      	cmp	r6, #7
  40580c:	9425      	str	r4, [sp, #148]	; 0x94
  40580e:	9624      	str	r6, [sp, #144]	; 0x90
  405810:	e888 0420 	stmia.w	r8, {r5, sl}
  405814:	ddf1      	ble.n	4057fa <_vfprintf_r+0xcde>
  405816:	aa23      	add	r2, sp, #140	; 0x8c
  405818:	990a      	ldr	r1, [sp, #40]	; 0x28
  40581a:	4658      	mov	r0, fp
  40581c:	f002 ff28 	bl	408670 <__sprint_r>
  405820:	2800      	cmp	r0, #0
  405822:	f47f af05 	bne.w	405630 <_vfprintf_r+0xb14>
  405826:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405828:	9e24      	ldr	r6, [sp, #144]	; 0x90
  40582a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40582e:	e7e6      	b.n	4057fe <_vfprintf_r+0xce2>
  405830:	990e      	ldr	r1, [sp, #56]	; 0x38
  405832:	460a      	mov	r2, r1
  405834:	3204      	adds	r2, #4
  405836:	680c      	ldr	r4, [r1, #0]
  405838:	920e      	str	r2, [sp, #56]	; 0x38
  40583a:	2500      	movs	r5, #0
  40583c:	f7ff ba7a 	b.w	404d34 <_vfprintf_r+0x218>
  405840:	681c      	ldr	r4, [r3, #0]
  405842:	3304      	adds	r3, #4
  405844:	930e      	str	r3, [sp, #56]	; 0x38
  405846:	2500      	movs	r5, #0
  405848:	e426      	b.n	405098 <_vfprintf_r+0x57c>
  40584a:	3301      	adds	r3, #1
  40584c:	4434      	add	r4, r6
  40584e:	2b07      	cmp	r3, #7
  405850:	9425      	str	r4, [sp, #148]	; 0x94
  405852:	9324      	str	r3, [sp, #144]	; 0x90
  405854:	e888 0060 	stmia.w	r8, {r5, r6}
  405858:	f77f ab63 	ble.w	404f22 <_vfprintf_r+0x406>
  40585c:	e6d6      	b.n	40560c <_vfprintf_r+0xaf0>
  40585e:	3204      	adds	r2, #4
  405860:	681c      	ldr	r4, [r3, #0]
  405862:	920e      	str	r2, [sp, #56]	; 0x38
  405864:	2301      	movs	r3, #1
  405866:	2500      	movs	r5, #0
  405868:	f7ff ba64 	b.w	404d34 <_vfprintf_r+0x218>
  40586c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40586e:	6814      	ldr	r4, [r2, #0]
  405870:	4613      	mov	r3, r2
  405872:	3304      	adds	r3, #4
  405874:	17e5      	asrs	r5, r4, #31
  405876:	930e      	str	r3, [sp, #56]	; 0x38
  405878:	4622      	mov	r2, r4
  40587a:	462b      	mov	r3, r5
  40587c:	e460      	b.n	405140 <_vfprintf_r+0x624>
  40587e:	f8dd b018 	ldr.w	fp, [sp, #24]
  405882:	f8cd b018 	str.w	fp, [sp, #24]
  405886:	af40      	add	r7, sp, #256	; 0x100
  405888:	3430      	adds	r4, #48	; 0x30
  40588a:	2301      	movs	r3, #1
  40588c:	f807 4d41 	strb.w	r4, [r7, #-65]!
  405890:	930d      	str	r3, [sp, #52]	; 0x34
  405892:	f7ff ba6d 	b.w	404d70 <_vfprintf_r+0x254>
  405896:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  40589a:	f002 f895 	bl	4079c8 <__retarget_lock_release_recursive>
  40589e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
  4058a2:	e5af      	b.n	405404 <_vfprintf_r+0x8e8>
  4058a4:	4614      	mov	r4, r2
  4058a6:	3301      	adds	r3, #1
  4058a8:	4434      	add	r4, r6
  4058aa:	2b07      	cmp	r3, #7
  4058ac:	9425      	str	r4, [sp, #148]	; 0x94
  4058ae:	9324      	str	r3, [sp, #144]	; 0x90
  4058b0:	e888 0060 	stmia.w	r8, {r5, r6}
  4058b4:	f340 816d 	ble.w	405b92 <_vfprintf_r+0x1076>
  4058b8:	aa23      	add	r2, sp, #140	; 0x8c
  4058ba:	990a      	ldr	r1, [sp, #40]	; 0x28
  4058bc:	9808      	ldr	r0, [sp, #32]
  4058be:	f002 fed7 	bl	408670 <__sprint_r>
  4058c2:	2800      	cmp	r0, #0
  4058c4:	f47f aeb4 	bne.w	405630 <_vfprintf_r+0xb14>
  4058c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4058ca:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4058ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4058d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4058d2:	4293      	cmp	r3, r2
  4058d4:	f280 8158 	bge.w	405b88 <_vfprintf_r+0x106c>
  4058d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4058da:	9814      	ldr	r0, [sp, #80]	; 0x50
  4058dc:	9915      	ldr	r1, [sp, #84]	; 0x54
  4058de:	f8c8 1000 	str.w	r1, [r8]
  4058e2:	3201      	adds	r2, #1
  4058e4:	4404      	add	r4, r0
  4058e6:	2a07      	cmp	r2, #7
  4058e8:	9425      	str	r4, [sp, #148]	; 0x94
  4058ea:	f8c8 0004 	str.w	r0, [r8, #4]
  4058ee:	9224      	str	r2, [sp, #144]	; 0x90
  4058f0:	f300 8152 	bgt.w	405b98 <_vfprintf_r+0x107c>
  4058f4:	f108 0808 	add.w	r8, r8, #8
  4058f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4058fa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4058fc:	1ad3      	subs	r3, r2, r3
  4058fe:	1a56      	subs	r6, r2, r1
  405900:	429e      	cmp	r6, r3
  405902:	bfa8      	it	ge
  405904:	461e      	movge	r6, r3
  405906:	2e00      	cmp	r6, #0
  405908:	dd0e      	ble.n	405928 <_vfprintf_r+0xe0c>
  40590a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40590c:	f8c8 6004 	str.w	r6, [r8, #4]
  405910:	3201      	adds	r2, #1
  405912:	440f      	add	r7, r1
  405914:	4434      	add	r4, r6
  405916:	2a07      	cmp	r2, #7
  405918:	f8c8 7000 	str.w	r7, [r8]
  40591c:	9425      	str	r4, [sp, #148]	; 0x94
  40591e:	9224      	str	r2, [sp, #144]	; 0x90
  405920:	f300 823c 	bgt.w	405d9c <_vfprintf_r+0x1280>
  405924:	f108 0808 	add.w	r8, r8, #8
  405928:	2e00      	cmp	r6, #0
  40592a:	bfac      	ite	ge
  40592c:	1b9e      	subge	r6, r3, r6
  40592e:	461e      	movlt	r6, r3
  405930:	2e00      	cmp	r6, #0
  405932:	f77f aaf8 	ble.w	404f26 <_vfprintf_r+0x40a>
  405936:	2e10      	cmp	r6, #16
  405938:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40593a:	4d3e      	ldr	r5, [pc, #248]	; (405a34 <_vfprintf_r+0xf18>)
  40593c:	dd85      	ble.n	40584a <_vfprintf_r+0xd2e>
  40593e:	2710      	movs	r7, #16
  405940:	f8dd a020 	ldr.w	sl, [sp, #32]
  405944:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405948:	e005      	b.n	405956 <_vfprintf_r+0xe3a>
  40594a:	f108 0808 	add.w	r8, r8, #8
  40594e:	3e10      	subs	r6, #16
  405950:	2e10      	cmp	r6, #16
  405952:	f77f af7a 	ble.w	40584a <_vfprintf_r+0xd2e>
  405956:	3301      	adds	r3, #1
  405958:	3410      	adds	r4, #16
  40595a:	2b07      	cmp	r3, #7
  40595c:	9425      	str	r4, [sp, #148]	; 0x94
  40595e:	9324      	str	r3, [sp, #144]	; 0x90
  405960:	e888 00a0 	stmia.w	r8, {r5, r7}
  405964:	ddf1      	ble.n	40594a <_vfprintf_r+0xe2e>
  405966:	aa23      	add	r2, sp, #140	; 0x8c
  405968:	4659      	mov	r1, fp
  40596a:	4650      	mov	r0, sl
  40596c:	f002 fe80 	bl	408670 <__sprint_r>
  405970:	2800      	cmp	r0, #0
  405972:	f040 8176 	bne.w	405c62 <_vfprintf_r+0x1146>
  405976:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405978:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40597a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  40597e:	e7e6      	b.n	40594e <_vfprintf_r+0xe32>
  405980:	9b06      	ldr	r3, [sp, #24]
  405982:	07d8      	lsls	r0, r3, #31
  405984:	f53f adff 	bmi.w	405586 <_vfprintf_r+0xa6a>
  405988:	3601      	adds	r6, #1
  40598a:	3401      	adds	r4, #1
  40598c:	2301      	movs	r3, #1
  40598e:	2e07      	cmp	r6, #7
  405990:	9425      	str	r4, [sp, #148]	; 0x94
  405992:	9624      	str	r6, [sp, #144]	; 0x90
  405994:	f8c8 7000 	str.w	r7, [r8]
  405998:	f8c8 3004 	str.w	r3, [r8, #4]
  40599c:	f77f ae27 	ble.w	4055ee <_vfprintf_r+0xad2>
  4059a0:	aa23      	add	r2, sp, #140	; 0x8c
  4059a2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4059a4:	9808      	ldr	r0, [sp, #32]
  4059a6:	f002 fe63 	bl	408670 <__sprint_r>
  4059aa:	2800      	cmp	r0, #0
  4059ac:	f47f ae40 	bne.w	405630 <_vfprintf_r+0xb14>
  4059b0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4059b2:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4059b4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4059b8:	e61b      	b.n	4055f2 <_vfprintf_r+0xad6>
  4059ba:	aa23      	add	r2, sp, #140	; 0x8c
  4059bc:	990a      	ldr	r1, [sp, #40]	; 0x28
  4059be:	9808      	ldr	r0, [sp, #32]
  4059c0:	f002 fe56 	bl	408670 <__sprint_r>
  4059c4:	2800      	cmp	r0, #0
  4059c6:	f47f ae33 	bne.w	405630 <_vfprintf_r+0xb14>
  4059ca:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4059cc:	9e24      	ldr	r6, [sp, #144]	; 0x90
  4059ce:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4059d2:	e5e6      	b.n	4055a2 <_vfprintf_r+0xa86>
  4059d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4059d6:	3507      	adds	r5, #7
  4059d8:	f025 0507 	bic.w	r5, r5, #7
  4059dc:	e9d5 2300 	ldrd	r2, r3, [r5]
  4059e0:	f105 0108 	add.w	r1, r5, #8
  4059e4:	910e      	str	r1, [sp, #56]	; 0x38
  4059e6:	4614      	mov	r4, r2
  4059e8:	461d      	mov	r5, r3
  4059ea:	f7ff bba9 	b.w	405140 <_vfprintf_r+0x624>
  4059ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4059f0:	3507      	adds	r5, #7
  4059f2:	f025 0307 	bic.w	r3, r5, #7
  4059f6:	f103 0208 	add.w	r2, r3, #8
  4059fa:	920e      	str	r2, [sp, #56]	; 0x38
  4059fc:	e9d3 4500 	ldrd	r4, r5, [r3]
  405a00:	f7ff bb4a 	b.w	405098 <_vfprintf_r+0x57c>
  405a04:	3601      	adds	r6, #1
  405a06:	443c      	add	r4, r7
  405a08:	2e07      	cmp	r6, #7
  405a0a:	9425      	str	r4, [sp, #148]	; 0x94
  405a0c:	9624      	str	r6, [sp, #144]	; 0x90
  405a0e:	e888 00a0 	stmia.w	r8, {r5, r7}
  405a12:	f77f adec 	ble.w	4055ee <_vfprintf_r+0xad2>
  405a16:	e7c3      	b.n	4059a0 <_vfprintf_r+0xe84>
  405a18:	aa23      	add	r2, sp, #140	; 0x8c
  405a1a:	990a      	ldr	r1, [sp, #40]	; 0x28
  405a1c:	9808      	ldr	r0, [sp, #32]
  405a1e:	f002 fe27 	bl	408670 <__sprint_r>
  405a22:	2800      	cmp	r0, #0
  405a24:	f47f ae04 	bne.w	405630 <_vfprintf_r+0xb14>
  405a28:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405a2a:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405a2c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405a30:	e5c6      	b.n	4055c0 <_vfprintf_r+0xaa4>
  405a32:	bf00      	nop
  405a34:	004092b0 	.word	0x004092b0
  405a38:	af30      	add	r7, sp, #192	; 0xc0
  405a3a:	f7ff b999 	b.w	404d70 <_vfprintf_r+0x254>
  405a3e:	aa23      	add	r2, sp, #140	; 0x8c
  405a40:	990a      	ldr	r1, [sp, #40]	; 0x28
  405a42:	9808      	ldr	r0, [sp, #32]
  405a44:	f002 fe14 	bl	408670 <__sprint_r>
  405a48:	2800      	cmp	r0, #0
  405a4a:	f47f adf1 	bne.w	405630 <_vfprintf_r+0xb14>
  405a4e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405a50:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405a54:	f7ff ba11 	b.w	404e7a <_vfprintf_r+0x35e>
  405a58:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  405a5c:	4264      	negs	r4, r4
  405a5e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405a62:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  405a66:	2301      	movs	r3, #1
  405a68:	f7ff b968 	b.w	404d3c <_vfprintf_r+0x220>
  405a6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
  405a6e:	4622      	mov	r2, r4
  405a70:	4620      	mov	r0, r4
  405a72:	9c12      	ldr	r4, [sp, #72]	; 0x48
  405a74:	4623      	mov	r3, r4
  405a76:	4621      	mov	r1, r4
  405a78:	f003 fb44 	bl	409104 <__aeabi_dcmpun>
  405a7c:	2800      	cmp	r0, #0
  405a7e:	f040 828c 	bne.w	405f9a <_vfprintf_r+0x147e>
  405a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405a84:	3301      	adds	r3, #1
  405a86:	f026 0320 	bic.w	r3, r6, #32
  405a8a:	930d      	str	r3, [sp, #52]	; 0x34
  405a8c:	f000 8091 	beq.w	405bb2 <_vfprintf_r+0x1096>
  405a90:	2b47      	cmp	r3, #71	; 0x47
  405a92:	d104      	bne.n	405a9e <_vfprintf_r+0xf82>
  405a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405a96:	2b00      	cmp	r3, #0
  405a98:	bf08      	it	eq
  405a9a:	2301      	moveq	r3, #1
  405a9c:	9309      	str	r3, [sp, #36]	; 0x24
  405a9e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  405aa2:	9306      	str	r3, [sp, #24]
  405aa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405aa6:	f1b3 0a00 	subs.w	sl, r3, #0
  405aaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405aac:	9307      	str	r3, [sp, #28]
  405aae:	bfbb      	ittet	lt
  405ab0:	4653      	movlt	r3, sl
  405ab2:	f103 4a00 	addlt.w	sl, r3, #2147483648	; 0x80000000
  405ab6:	2300      	movge	r3, #0
  405ab8:	232d      	movlt	r3, #45	; 0x2d
  405aba:	2e66      	cmp	r6, #102	; 0x66
  405abc:	930f      	str	r3, [sp, #60]	; 0x3c
  405abe:	f000 817f 	beq.w	405dc0 <_vfprintf_r+0x12a4>
  405ac2:	2e46      	cmp	r6, #70	; 0x46
  405ac4:	f000 81d4 	beq.w	405e70 <_vfprintf_r+0x1354>
  405ac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405aca:	9a07      	ldr	r2, [sp, #28]
  405acc:	2b45      	cmp	r3, #69	; 0x45
  405ace:	bf0c      	ite	eq
  405ad0:	9b09      	ldreq	r3, [sp, #36]	; 0x24
  405ad2:	9d09      	ldrne	r5, [sp, #36]	; 0x24
  405ad4:	a821      	add	r0, sp, #132	; 0x84
  405ad6:	a91e      	add	r1, sp, #120	; 0x78
  405ad8:	bf08      	it	eq
  405ada:	1c5d      	addeq	r5, r3, #1
  405adc:	9004      	str	r0, [sp, #16]
  405ade:	9103      	str	r1, [sp, #12]
  405ae0:	a81d      	add	r0, sp, #116	; 0x74
  405ae2:	2102      	movs	r1, #2
  405ae4:	9002      	str	r0, [sp, #8]
  405ae6:	4653      	mov	r3, sl
  405ae8:	9501      	str	r5, [sp, #4]
  405aea:	9100      	str	r1, [sp, #0]
  405aec:	9808      	ldr	r0, [sp, #32]
  405aee:	f000 fc0b 	bl	406308 <_dtoa_r>
  405af2:	2e67      	cmp	r6, #103	; 0x67
  405af4:	4607      	mov	r7, r0
  405af6:	f040 81af 	bne.w	405e58 <_vfprintf_r+0x133c>
  405afa:	f01b 0f01 	tst.w	fp, #1
  405afe:	f000 8213 	beq.w	405f28 <_vfprintf_r+0x140c>
  405b02:	197c      	adds	r4, r7, r5
  405b04:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405b06:	9807      	ldr	r0, [sp, #28]
  405b08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405b0a:	4651      	mov	r1, sl
  405b0c:	f003 fac8 	bl	4090a0 <__aeabi_dcmpeq>
  405b10:	2800      	cmp	r0, #0
  405b12:	f040 8132 	bne.w	405d7a <_vfprintf_r+0x125e>
  405b16:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405b18:	42a3      	cmp	r3, r4
  405b1a:	d206      	bcs.n	405b2a <_vfprintf_r+0x100e>
  405b1c:	2130      	movs	r1, #48	; 0x30
  405b1e:	1c5a      	adds	r2, r3, #1
  405b20:	9221      	str	r2, [sp, #132]	; 0x84
  405b22:	7019      	strb	r1, [r3, #0]
  405b24:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405b26:	429c      	cmp	r4, r3
  405b28:	d8f9      	bhi.n	405b1e <_vfprintf_r+0x1002>
  405b2a:	1bdb      	subs	r3, r3, r7
  405b2c:	9311      	str	r3, [sp, #68]	; 0x44
  405b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405b30:	2b47      	cmp	r3, #71	; 0x47
  405b32:	f000 80b9 	beq.w	405ca8 <_vfprintf_r+0x118c>
  405b36:	2e65      	cmp	r6, #101	; 0x65
  405b38:	f340 8276 	ble.w	406028 <_vfprintf_r+0x150c>
  405b3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405b3e:	9310      	str	r3, [sp, #64]	; 0x40
  405b40:	2e66      	cmp	r6, #102	; 0x66
  405b42:	f000 8162 	beq.w	405e0a <_vfprintf_r+0x12ee>
  405b46:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405b48:	9a10      	ldr	r2, [sp, #64]	; 0x40
  405b4a:	4619      	mov	r1, r3
  405b4c:	4291      	cmp	r1, r2
  405b4e:	f300 814f 	bgt.w	405df0 <_vfprintf_r+0x12d4>
  405b52:	f01b 0f01 	tst.w	fp, #1
  405b56:	f040 8209 	bne.w	405f6c <_vfprintf_r+0x1450>
  405b5a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405b5e:	9307      	str	r3, [sp, #28]
  405b60:	920d      	str	r2, [sp, #52]	; 0x34
  405b62:	2667      	movs	r6, #103	; 0x67
  405b64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405b66:	2b00      	cmp	r3, #0
  405b68:	f040 8096 	bne.w	405c98 <_vfprintf_r+0x117c>
  405b6c:	9309      	str	r3, [sp, #36]	; 0x24
  405b6e:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405b72:	f7ff b905 	b.w	404d80 <_vfprintf_r+0x264>
  405b76:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
  405b7a:	f001 ff25 	bl	4079c8 <__retarget_lock_release_recursive>
  405b7e:	f04f 33ff 	mov.w	r3, #4294967295
  405b82:	930b      	str	r3, [sp, #44]	; 0x2c
  405b84:	f7ff ba30 	b.w	404fe8 <_vfprintf_r+0x4cc>
  405b88:	9a06      	ldr	r2, [sp, #24]
  405b8a:	07d5      	lsls	r5, r2, #31
  405b8c:	f57f aeb4 	bpl.w	4058f8 <_vfprintf_r+0xddc>
  405b90:	e6a2      	b.n	4058d8 <_vfprintf_r+0xdbc>
  405b92:	f108 0808 	add.w	r8, r8, #8
  405b96:	e69a      	b.n	4058ce <_vfprintf_r+0xdb2>
  405b98:	aa23      	add	r2, sp, #140	; 0x8c
  405b9a:	990a      	ldr	r1, [sp, #40]	; 0x28
  405b9c:	9808      	ldr	r0, [sp, #32]
  405b9e:	f002 fd67 	bl	408670 <__sprint_r>
  405ba2:	2800      	cmp	r0, #0
  405ba4:	f47f ad44 	bne.w	405630 <_vfprintf_r+0xb14>
  405ba8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405baa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405bac:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405bb0:	e6a2      	b.n	4058f8 <_vfprintf_r+0xddc>
  405bb2:	2306      	movs	r3, #6
  405bb4:	9309      	str	r3, [sp, #36]	; 0x24
  405bb6:	e772      	b.n	405a9e <_vfprintf_r+0xf82>
  405bb8:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  405bbc:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  405bc0:	f7ff bbc7 	b.w	405352 <_vfprintf_r+0x836>
  405bc4:	aa23      	add	r2, sp, #140	; 0x8c
  405bc6:	990a      	ldr	r1, [sp, #40]	; 0x28
  405bc8:	9808      	ldr	r0, [sp, #32]
  405bca:	f002 fd51 	bl	408670 <__sprint_r>
  405bce:	2800      	cmp	r0, #0
  405bd0:	f47f ad2e 	bne.w	405630 <_vfprintf_r+0xb14>
  405bd4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405bd8:	e437      	b.n	40544a <_vfprintf_r+0x92e>
  405bda:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405bdc:	4ab4      	ldr	r2, [pc, #720]	; (405eb0 <_vfprintf_r+0x1394>)
  405bde:	f8c8 2000 	str.w	r2, [r8]
  405be2:	3301      	adds	r3, #1
  405be4:	3401      	adds	r4, #1
  405be6:	2201      	movs	r2, #1
  405be8:	2b07      	cmp	r3, #7
  405bea:	9425      	str	r4, [sp, #148]	; 0x94
  405bec:	9324      	str	r3, [sp, #144]	; 0x90
  405bee:	f8c8 2004 	str.w	r2, [r8, #4]
  405bf2:	f300 8124 	bgt.w	405e3e <_vfprintf_r+0x1322>
  405bf6:	f108 0808 	add.w	r8, r8, #8
  405bfa:	b929      	cbnz	r1, 405c08 <_vfprintf_r+0x10ec>
  405bfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405bfe:	b91b      	cbnz	r3, 405c08 <_vfprintf_r+0x10ec>
  405c00:	9b06      	ldr	r3, [sp, #24]
  405c02:	07de      	lsls	r6, r3, #31
  405c04:	f57f a98f 	bpl.w	404f26 <_vfprintf_r+0x40a>
  405c08:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405c0a:	9814      	ldr	r0, [sp, #80]	; 0x50
  405c0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
  405c0e:	f8c8 2000 	str.w	r2, [r8]
  405c12:	3301      	adds	r3, #1
  405c14:	4602      	mov	r2, r0
  405c16:	4422      	add	r2, r4
  405c18:	2b07      	cmp	r3, #7
  405c1a:	9225      	str	r2, [sp, #148]	; 0x94
  405c1c:	f8c8 0004 	str.w	r0, [r8, #4]
  405c20:	9324      	str	r3, [sp, #144]	; 0x90
  405c22:	f300 8169 	bgt.w	405ef8 <_vfprintf_r+0x13dc>
  405c26:	f108 0808 	add.w	r8, r8, #8
  405c2a:	2900      	cmp	r1, #0
  405c2c:	f2c0 8136 	blt.w	405e9c <_vfprintf_r+0x1380>
  405c30:	9911      	ldr	r1, [sp, #68]	; 0x44
  405c32:	f8c8 7000 	str.w	r7, [r8]
  405c36:	3301      	adds	r3, #1
  405c38:	188c      	adds	r4, r1, r2
  405c3a:	2b07      	cmp	r3, #7
  405c3c:	9425      	str	r4, [sp, #148]	; 0x94
  405c3e:	9324      	str	r3, [sp, #144]	; 0x90
  405c40:	f8c8 1004 	str.w	r1, [r8, #4]
  405c44:	f77f a96d 	ble.w	404f22 <_vfprintf_r+0x406>
  405c48:	e4e0      	b.n	40560c <_vfprintf_r+0xaf0>
  405c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405c4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405c4e:	6813      	ldr	r3, [r2, #0]
  405c50:	17cd      	asrs	r5, r1, #31
  405c52:	4608      	mov	r0, r1
  405c54:	3204      	adds	r2, #4
  405c56:	4629      	mov	r1, r5
  405c58:	920e      	str	r2, [sp, #56]	; 0x38
  405c5a:	e9c3 0100 	strd	r0, r1, [r3]
  405c5e:	f7fe bfa9 	b.w	404bb4 <_vfprintf_r+0x98>
  405c62:	46da      	mov	sl, fp
  405c64:	f7ff bbc4 	b.w	4053f0 <_vfprintf_r+0x8d4>
  405c68:	aa23      	add	r2, sp, #140	; 0x8c
  405c6a:	990a      	ldr	r1, [sp, #40]	; 0x28
  405c6c:	9808      	ldr	r0, [sp, #32]
  405c6e:	f002 fcff 	bl	408670 <__sprint_r>
  405c72:	2800      	cmp	r0, #0
  405c74:	f47f acdc 	bne.w	405630 <_vfprintf_r+0xb14>
  405c78:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405c7a:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405c7e:	f7ff bbfd 	b.w	40547c <_vfprintf_r+0x960>
  405c82:	4638      	mov	r0, r7
  405c84:	9409      	str	r4, [sp, #36]	; 0x24
  405c86:	f7fe fedb 	bl	404a40 <strlen>
  405c8a:	950e      	str	r5, [sp, #56]	; 0x38
  405c8c:	900d      	str	r0, [sp, #52]	; 0x34
  405c8e:	f8cd b018 	str.w	fp, [sp, #24]
  405c92:	4603      	mov	r3, r0
  405c94:	f7ff ba36 	b.w	405104 <_vfprintf_r+0x5e8>
  405c98:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  405c9c:	2300      	movs	r3, #0
  405c9e:	f88d a06f 	strb.w	sl, [sp, #111]	; 0x6f
  405ca2:	9309      	str	r3, [sp, #36]	; 0x24
  405ca4:	f7ff b86f 	b.w	404d86 <_vfprintf_r+0x26a>
  405ca8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405caa:	9310      	str	r3, [sp, #64]	; 0x40
  405cac:	461a      	mov	r2, r3
  405cae:	3303      	adds	r3, #3
  405cb0:	db04      	blt.n	405cbc <_vfprintf_r+0x11a0>
  405cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405cb4:	4619      	mov	r1, r3
  405cb6:	4291      	cmp	r1, r2
  405cb8:	f6bf af45 	bge.w	405b46 <_vfprintf_r+0x102a>
  405cbc:	3e02      	subs	r6, #2
  405cbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405cc0:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  405cc4:	3b01      	subs	r3, #1
  405cc6:	2b00      	cmp	r3, #0
  405cc8:	931d      	str	r3, [sp, #116]	; 0x74
  405cca:	bfbd      	ittte	lt
  405ccc:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
  405cce:	f1c3 0301 	rsblt	r3, r3, #1
  405cd2:	222d      	movlt	r2, #45	; 0x2d
  405cd4:	222b      	movge	r2, #43	; 0x2b
  405cd6:	2b09      	cmp	r3, #9
  405cd8:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  405cdc:	f340 813e 	ble.w	405f5c <_vfprintf_r+0x1440>
  405ce0:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
  405ce4:	4620      	mov	r0, r4
  405ce6:	4d73      	ldr	r5, [pc, #460]	; (405eb4 <_vfprintf_r+0x1398>)
  405ce8:	e000      	b.n	405cec <_vfprintf_r+0x11d0>
  405cea:	4610      	mov	r0, r2
  405cec:	fb85 1203 	smull	r1, r2, r5, r3
  405cf0:	17d9      	asrs	r1, r3, #31
  405cf2:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405cf6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  405cfa:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405cfe:	3230      	adds	r2, #48	; 0x30
  405d00:	2909      	cmp	r1, #9
  405d02:	f800 2c01 	strb.w	r2, [r0, #-1]
  405d06:	460b      	mov	r3, r1
  405d08:	f100 32ff 	add.w	r2, r0, #4294967295
  405d0c:	dced      	bgt.n	405cea <_vfprintf_r+0x11ce>
  405d0e:	3330      	adds	r3, #48	; 0x30
  405d10:	3802      	subs	r0, #2
  405d12:	b2d9      	uxtb	r1, r3
  405d14:	4284      	cmp	r4, r0
  405d16:	f802 1c01 	strb.w	r1, [r2, #-1]
  405d1a:	f240 8190 	bls.w	40603e <_vfprintf_r+0x1522>
  405d1e:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
  405d22:	4613      	mov	r3, r2
  405d24:	e001      	b.n	405d2a <_vfprintf_r+0x120e>
  405d26:	f813 1b01 	ldrb.w	r1, [r3], #1
  405d2a:	f800 1b01 	strb.w	r1, [r0], #1
  405d2e:	42a3      	cmp	r3, r4
  405d30:	d1f9      	bne.n	405d26 <_vfprintf_r+0x120a>
  405d32:	3301      	adds	r3, #1
  405d34:	1a9b      	subs	r3, r3, r2
  405d36:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  405d3a:	4413      	add	r3, r2
  405d3c:	aa1f      	add	r2, sp, #124	; 0x7c
  405d3e:	1a9b      	subs	r3, r3, r2
  405d40:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405d42:	9319      	str	r3, [sp, #100]	; 0x64
  405d44:	2a01      	cmp	r2, #1
  405d46:	4413      	add	r3, r2
  405d48:	930d      	str	r3, [sp, #52]	; 0x34
  405d4a:	f340 8145 	ble.w	405fd8 <_vfprintf_r+0x14bc>
  405d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405d50:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405d52:	4413      	add	r3, r2
  405d54:	930d      	str	r3, [sp, #52]	; 0x34
  405d56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405d5a:	9307      	str	r3, [sp, #28]
  405d5c:	2300      	movs	r3, #0
  405d5e:	9310      	str	r3, [sp, #64]	; 0x40
  405d60:	e700      	b.n	405b64 <_vfprintf_r+0x1048>
  405d62:	aa23      	add	r2, sp, #140	; 0x8c
  405d64:	990a      	ldr	r1, [sp, #40]	; 0x28
  405d66:	9808      	ldr	r0, [sp, #32]
  405d68:	f002 fc82 	bl	408670 <__sprint_r>
  405d6c:	2800      	cmp	r0, #0
  405d6e:	f47f ac5f 	bne.w	405630 <_vfprintf_r+0xb14>
  405d72:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405d74:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405d78:	e4d1      	b.n	40571e <_vfprintf_r+0xc02>
  405d7a:	4623      	mov	r3, r4
  405d7c:	e6d5      	b.n	405b2a <_vfprintf_r+0x100e>
  405d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405d80:	9710      	str	r7, [sp, #64]	; 0x40
  405d82:	2b06      	cmp	r3, #6
  405d84:	bf28      	it	cs
  405d86:	2306      	movcs	r3, #6
  405d88:	9709      	str	r7, [sp, #36]	; 0x24
  405d8a:	46ba      	mov	sl, r7
  405d8c:	9307      	str	r3, [sp, #28]
  405d8e:	950e      	str	r5, [sp, #56]	; 0x38
  405d90:	f8cd b018 	str.w	fp, [sp, #24]
  405d94:	930d      	str	r3, [sp, #52]	; 0x34
  405d96:	4f48      	ldr	r7, [pc, #288]	; (405eb8 <_vfprintf_r+0x139c>)
  405d98:	f7fe bff2 	b.w	404d80 <_vfprintf_r+0x264>
  405d9c:	aa23      	add	r2, sp, #140	; 0x8c
  405d9e:	990a      	ldr	r1, [sp, #40]	; 0x28
  405da0:	9808      	ldr	r0, [sp, #32]
  405da2:	f002 fc65 	bl	408670 <__sprint_r>
  405da6:	2800      	cmp	r0, #0
  405da8:	f47f ac42 	bne.w	405630 <_vfprintf_r+0xb14>
  405dac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405dae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405db0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405db2:	1ad3      	subs	r3, r2, r3
  405db4:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405db8:	e5b6      	b.n	405928 <_vfprintf_r+0xe0c>
  405dba:	46a2      	mov	sl, r4
  405dbc:	f7ff bb18 	b.w	4053f0 <_vfprintf_r+0x8d4>
  405dc0:	a821      	add	r0, sp, #132	; 0x84
  405dc2:	a91e      	add	r1, sp, #120	; 0x78
  405dc4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405dc6:	9004      	str	r0, [sp, #16]
  405dc8:	9103      	str	r1, [sp, #12]
  405dca:	a81d      	add	r0, sp, #116	; 0x74
  405dcc:	2103      	movs	r1, #3
  405dce:	9002      	str	r0, [sp, #8]
  405dd0:	9a07      	ldr	r2, [sp, #28]
  405dd2:	9501      	str	r5, [sp, #4]
  405dd4:	4653      	mov	r3, sl
  405dd6:	9100      	str	r1, [sp, #0]
  405dd8:	9808      	ldr	r0, [sp, #32]
  405dda:	f000 fa95 	bl	406308 <_dtoa_r>
  405dde:	4607      	mov	r7, r0
  405de0:	1944      	adds	r4, r0, r5
  405de2:	783b      	ldrb	r3, [r7, #0]
  405de4:	2b30      	cmp	r3, #48	; 0x30
  405de6:	f000 80ca 	beq.w	405f7e <_vfprintf_r+0x1462>
  405dea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  405dec:	442c      	add	r4, r5
  405dee:	e689      	b.n	405b04 <_vfprintf_r+0xfe8>
  405df0:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405df2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405df4:	4413      	add	r3, r2
  405df6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  405df8:	930d      	str	r3, [sp, #52]	; 0x34
  405dfa:	2a00      	cmp	r2, #0
  405dfc:	f340 80e4 	ble.w	405fc8 <_vfprintf_r+0x14ac>
  405e00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405e04:	9307      	str	r3, [sp, #28]
  405e06:	2667      	movs	r6, #103	; 0x67
  405e08:	e6ac      	b.n	405b64 <_vfprintf_r+0x1048>
  405e0a:	2b00      	cmp	r3, #0
  405e0c:	f340 80fb 	ble.w	406006 <_vfprintf_r+0x14ea>
  405e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405e12:	2a00      	cmp	r2, #0
  405e14:	f040 80ce 	bne.w	405fb4 <_vfprintf_r+0x1498>
  405e18:	f01b 0f01 	tst.w	fp, #1
  405e1c:	f040 80ca 	bne.w	405fb4 <_vfprintf_r+0x1498>
  405e20:	9307      	str	r3, [sp, #28]
  405e22:	930d      	str	r3, [sp, #52]	; 0x34
  405e24:	e69e      	b.n	405b64 <_vfprintf_r+0x1048>
  405e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405e28:	9307      	str	r3, [sp, #28]
  405e2a:	930d      	str	r3, [sp, #52]	; 0x34
  405e2c:	9009      	str	r0, [sp, #36]	; 0x24
  405e2e:	950e      	str	r5, [sp, #56]	; 0x38
  405e30:	f8cd b018 	str.w	fp, [sp, #24]
  405e34:	9010      	str	r0, [sp, #64]	; 0x40
  405e36:	f89d a06f 	ldrb.w	sl, [sp, #111]	; 0x6f
  405e3a:	f7fe bfa1 	b.w	404d80 <_vfprintf_r+0x264>
  405e3e:	aa23      	add	r2, sp, #140	; 0x8c
  405e40:	990a      	ldr	r1, [sp, #40]	; 0x28
  405e42:	9808      	ldr	r0, [sp, #32]
  405e44:	f002 fc14 	bl	408670 <__sprint_r>
  405e48:	2800      	cmp	r0, #0
  405e4a:	f47f abf1 	bne.w	405630 <_vfprintf_r+0xb14>
  405e4e:	991d      	ldr	r1, [sp, #116]	; 0x74
  405e50:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405e52:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405e56:	e6d0      	b.n	405bfa <_vfprintf_r+0x10de>
  405e58:	2e47      	cmp	r6, #71	; 0x47
  405e5a:	f47f ae52 	bne.w	405b02 <_vfprintf_r+0xfe6>
  405e5e:	f01b 0f01 	tst.w	fp, #1
  405e62:	f000 80da 	beq.w	40601a <_vfprintf_r+0x14fe>
  405e66:	2e46      	cmp	r6, #70	; 0x46
  405e68:	eb07 0405 	add.w	r4, r7, r5
  405e6c:	d0b9      	beq.n	405de2 <_vfprintf_r+0x12c6>
  405e6e:	e649      	b.n	405b04 <_vfprintf_r+0xfe8>
  405e70:	a821      	add	r0, sp, #132	; 0x84
  405e72:	a91e      	add	r1, sp, #120	; 0x78
  405e74:	9c09      	ldr	r4, [sp, #36]	; 0x24
  405e76:	9004      	str	r0, [sp, #16]
  405e78:	9103      	str	r1, [sp, #12]
  405e7a:	a81d      	add	r0, sp, #116	; 0x74
  405e7c:	2103      	movs	r1, #3
  405e7e:	9002      	str	r0, [sp, #8]
  405e80:	9a07      	ldr	r2, [sp, #28]
  405e82:	9401      	str	r4, [sp, #4]
  405e84:	4653      	mov	r3, sl
  405e86:	9100      	str	r1, [sp, #0]
  405e88:	9808      	ldr	r0, [sp, #32]
  405e8a:	f000 fa3d 	bl	406308 <_dtoa_r>
  405e8e:	4625      	mov	r5, r4
  405e90:	4607      	mov	r7, r0
  405e92:	e7e8      	b.n	405e66 <_vfprintf_r+0x134a>
  405e94:	2300      	movs	r3, #0
  405e96:	9309      	str	r3, [sp, #36]	; 0x24
  405e98:	f7fe bec1 	b.w	404c1e <_vfprintf_r+0x102>
  405e9c:	424e      	negs	r6, r1
  405e9e:	3110      	adds	r1, #16
  405ea0:	4d06      	ldr	r5, [pc, #24]	; (405ebc <_vfprintf_r+0x13a0>)
  405ea2:	da43      	bge.n	405f2c <_vfprintf_r+0x1410>
  405ea4:	2410      	movs	r4, #16
  405ea6:	f8dd a020 	ldr.w	sl, [sp, #32]
  405eaa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  405eae:	e00c      	b.n	405eca <_vfprintf_r+0x13ae>
  405eb0:	0040929c 	.word	0x0040929c
  405eb4:	66666667 	.word	0x66666667
  405eb8:	00409294 	.word	0x00409294
  405ebc:	004092b0 	.word	0x004092b0
  405ec0:	f108 0808 	add.w	r8, r8, #8
  405ec4:	3e10      	subs	r6, #16
  405ec6:	2e10      	cmp	r6, #16
  405ec8:	dd30      	ble.n	405f2c <_vfprintf_r+0x1410>
  405eca:	3301      	adds	r3, #1
  405ecc:	3210      	adds	r2, #16
  405ece:	2b07      	cmp	r3, #7
  405ed0:	9225      	str	r2, [sp, #148]	; 0x94
  405ed2:	9324      	str	r3, [sp, #144]	; 0x90
  405ed4:	f8c8 5000 	str.w	r5, [r8]
  405ed8:	f8c8 4004 	str.w	r4, [r8, #4]
  405edc:	ddf0      	ble.n	405ec0 <_vfprintf_r+0x13a4>
  405ede:	aa23      	add	r2, sp, #140	; 0x8c
  405ee0:	4659      	mov	r1, fp
  405ee2:	4650      	mov	r0, sl
  405ee4:	f002 fbc4 	bl	408670 <__sprint_r>
  405ee8:	2800      	cmp	r0, #0
  405eea:	f47f aeba 	bne.w	405c62 <_vfprintf_r+0x1146>
  405eee:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405ef0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405ef2:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405ef6:	e7e5      	b.n	405ec4 <_vfprintf_r+0x13a8>
  405ef8:	aa23      	add	r2, sp, #140	; 0x8c
  405efa:	990a      	ldr	r1, [sp, #40]	; 0x28
  405efc:	9808      	ldr	r0, [sp, #32]
  405efe:	f002 fbb7 	bl	408670 <__sprint_r>
  405f02:	2800      	cmp	r0, #0
  405f04:	f47f ab94 	bne.w	405630 <_vfprintf_r+0xb14>
  405f08:	991d      	ldr	r1, [sp, #116]	; 0x74
  405f0a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405f0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f0e:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405f12:	e68a      	b.n	405c2a <_vfprintf_r+0x110e>
  405f14:	9808      	ldr	r0, [sp, #32]
  405f16:	aa23      	add	r2, sp, #140	; 0x8c
  405f18:	4651      	mov	r1, sl
  405f1a:	f002 fba9 	bl	408670 <__sprint_r>
  405f1e:	2800      	cmp	r0, #0
  405f20:	f43f aa64 	beq.w	4053ec <_vfprintf_r+0x8d0>
  405f24:	f7ff ba64 	b.w	4053f0 <_vfprintf_r+0x8d4>
  405f28:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405f2a:	e5fe      	b.n	405b2a <_vfprintf_r+0x100e>
  405f2c:	3301      	adds	r3, #1
  405f2e:	4432      	add	r2, r6
  405f30:	2b07      	cmp	r3, #7
  405f32:	e888 0060 	stmia.w	r8, {r5, r6}
  405f36:	9225      	str	r2, [sp, #148]	; 0x94
  405f38:	9324      	str	r3, [sp, #144]	; 0x90
  405f3a:	f108 0808 	add.w	r8, r8, #8
  405f3e:	f77f ae77 	ble.w	405c30 <_vfprintf_r+0x1114>
  405f42:	aa23      	add	r2, sp, #140	; 0x8c
  405f44:	990a      	ldr	r1, [sp, #40]	; 0x28
  405f46:	9808      	ldr	r0, [sp, #32]
  405f48:	f002 fb92 	bl	408670 <__sprint_r>
  405f4c:	2800      	cmp	r0, #0
  405f4e:	f47f ab6f 	bne.w	405630 <_vfprintf_r+0xb14>
  405f52:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405f54:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405f56:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  405f5a:	e669      	b.n	405c30 <_vfprintf_r+0x1114>
  405f5c:	3330      	adds	r3, #48	; 0x30
  405f5e:	2230      	movs	r2, #48	; 0x30
  405f60:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  405f64:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  405f68:	ab20      	add	r3, sp, #128	; 0x80
  405f6a:	e6e7      	b.n	405d3c <_vfprintf_r+0x1220>
  405f6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405f6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405f70:	4413      	add	r3, r2
  405f72:	930d      	str	r3, [sp, #52]	; 0x34
  405f74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405f78:	9307      	str	r3, [sp, #28]
  405f7a:	2667      	movs	r6, #103	; 0x67
  405f7c:	e5f2      	b.n	405b64 <_vfprintf_r+0x1048>
  405f7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405f80:	9807      	ldr	r0, [sp, #28]
  405f82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405f84:	4651      	mov	r1, sl
  405f86:	f003 f88b 	bl	4090a0 <__aeabi_dcmpeq>
  405f8a:	2800      	cmp	r0, #0
  405f8c:	f47f af2d 	bne.w	405dea <_vfprintf_r+0x12ce>
  405f90:	f1c5 0501 	rsb	r5, r5, #1
  405f94:	951d      	str	r5, [sp, #116]	; 0x74
  405f96:	442c      	add	r4, r5
  405f98:	e5b4      	b.n	405b04 <_vfprintf_r+0xfe8>
  405f9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405f9c:	4f33      	ldr	r7, [pc, #204]	; (40606c <_vfprintf_r+0x1550>)
  405f9e:	2b00      	cmp	r3, #0
  405fa0:	bfb6      	itet	lt
  405fa2:	f04f 0a2d 	movlt.w	sl, #45	; 0x2d
  405fa6:	f89d a06f 	ldrbge.w	sl, [sp, #111]	; 0x6f
  405faa:	f88d a06f 	strblt.w	sl, [sp, #111]	; 0x6f
  405fae:	4b30      	ldr	r3, [pc, #192]	; (406070 <_vfprintf_r+0x1554>)
  405fb0:	f7ff b9d1 	b.w	405356 <_vfprintf_r+0x83a>
  405fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405fb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  405fb8:	4413      	add	r3, r2
  405fba:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405fbc:	441a      	add	r2, r3
  405fbe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405fc2:	920d      	str	r2, [sp, #52]	; 0x34
  405fc4:	9307      	str	r3, [sp, #28]
  405fc6:	e5cd      	b.n	405b64 <_vfprintf_r+0x1048>
  405fc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405fca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405fcc:	f1c3 0301 	rsb	r3, r3, #1
  405fd0:	441a      	add	r2, r3
  405fd2:	4613      	mov	r3, r2
  405fd4:	920d      	str	r2, [sp, #52]	; 0x34
  405fd6:	e713      	b.n	405e00 <_vfprintf_r+0x12e4>
  405fd8:	f01b 0301 	ands.w	r3, fp, #1
  405fdc:	9310      	str	r3, [sp, #64]	; 0x40
  405fde:	f47f aeb6 	bne.w	405d4e <_vfprintf_r+0x1232>
  405fe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405fe4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405fe8:	9307      	str	r3, [sp, #28]
  405fea:	e5bb      	b.n	405b64 <_vfprintf_r+0x1048>
  405fec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  405fee:	f899 6001 	ldrb.w	r6, [r9, #1]
  405ff2:	6823      	ldr	r3, [r4, #0]
  405ff4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
  405ff8:	9309      	str	r3, [sp, #36]	; 0x24
  405ffa:	4623      	mov	r3, r4
  405ffc:	3304      	adds	r3, #4
  405ffe:	4681      	mov	r9, r0
  406000:	930e      	str	r3, [sp, #56]	; 0x38
  406002:	f7fe be0a 	b.w	404c1a <_vfprintf_r+0xfe>
  406006:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406008:	b913      	cbnz	r3, 406010 <_vfprintf_r+0x14f4>
  40600a:	f01b 0f01 	tst.w	fp, #1
  40600e:	d002      	beq.n	406016 <_vfprintf_r+0x14fa>
  406010:	9b14      	ldr	r3, [sp, #80]	; 0x50
  406012:	3301      	adds	r3, #1
  406014:	e7d1      	b.n	405fba <_vfprintf_r+0x149e>
  406016:	2301      	movs	r3, #1
  406018:	e702      	b.n	405e20 <_vfprintf_r+0x1304>
  40601a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40601c:	1bdb      	subs	r3, r3, r7
  40601e:	9311      	str	r3, [sp, #68]	; 0x44
  406020:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406022:	2b47      	cmp	r3, #71	; 0x47
  406024:	f43f ae40 	beq.w	405ca8 <_vfprintf_r+0x118c>
  406028:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40602a:	9310      	str	r3, [sp, #64]	; 0x40
  40602c:	e647      	b.n	405cbe <_vfprintf_r+0x11a2>
  40602e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406032:	f7ff b81d 	b.w	405070 <_vfprintf_r+0x554>
  406036:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40603a:	f7ff b918 	b.w	40526e <_vfprintf_r+0x752>
  40603e:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  406042:	e67b      	b.n	405d3c <_vfprintf_r+0x1220>
  406044:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406048:	f7ff b866 	b.w	405118 <_vfprintf_r+0x5fc>
  40604c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406050:	f7ff b9ac 	b.w	4053ac <_vfprintf_r+0x890>
  406054:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406058:	f7ff b934 	b.w	4052c4 <_vfprintf_r+0x7a8>
  40605c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406060:	f7ff b8b0 	b.w	4051c4 <_vfprintf_r+0x6a8>
  406064:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  406068:	f7ff b945 	b.w	4052f6 <_vfprintf_r+0x7da>
  40606c:	00409268 	.word	0x00409268
  406070:	00409264 	.word	0x00409264

00406074 <__sbprintf>:
  406074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406078:	460c      	mov	r4, r1
  40607a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40607e:	8989      	ldrh	r1, [r1, #12]
  406080:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406082:	89e5      	ldrh	r5, [r4, #14]
  406084:	9619      	str	r6, [sp, #100]	; 0x64
  406086:	f021 0102 	bic.w	r1, r1, #2
  40608a:	4606      	mov	r6, r0
  40608c:	69e0      	ldr	r0, [r4, #28]
  40608e:	f8ad 100c 	strh.w	r1, [sp, #12]
  406092:	4617      	mov	r7, r2
  406094:	f44f 6180 	mov.w	r1, #1024	; 0x400
  406098:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40609a:	f8ad 500e 	strh.w	r5, [sp, #14]
  40609e:	4698      	mov	r8, r3
  4060a0:	ad1a      	add	r5, sp, #104	; 0x68
  4060a2:	2300      	movs	r3, #0
  4060a4:	9007      	str	r0, [sp, #28]
  4060a6:	a816      	add	r0, sp, #88	; 0x58
  4060a8:	9209      	str	r2, [sp, #36]	; 0x24
  4060aa:	9306      	str	r3, [sp, #24]
  4060ac:	9500      	str	r5, [sp, #0]
  4060ae:	9504      	str	r5, [sp, #16]
  4060b0:	9102      	str	r1, [sp, #8]
  4060b2:	9105      	str	r1, [sp, #20]
  4060b4:	f001 fc82 	bl	4079bc <__retarget_lock_init_recursive>
  4060b8:	4643      	mov	r3, r8
  4060ba:	463a      	mov	r2, r7
  4060bc:	4669      	mov	r1, sp
  4060be:	4630      	mov	r0, r6
  4060c0:	f7fe fd2c 	bl	404b1c <_vfprintf_r>
  4060c4:	1e05      	subs	r5, r0, #0
  4060c6:	db07      	blt.n	4060d8 <__sbprintf+0x64>
  4060c8:	4630      	mov	r0, r6
  4060ca:	4669      	mov	r1, sp
  4060cc:	f001 f8e6 	bl	40729c <_fflush_r>
  4060d0:	2800      	cmp	r0, #0
  4060d2:	bf18      	it	ne
  4060d4:	f04f 35ff 	movne.w	r5, #4294967295
  4060d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4060dc:	065b      	lsls	r3, r3, #25
  4060de:	d503      	bpl.n	4060e8 <__sbprintf+0x74>
  4060e0:	89a3      	ldrh	r3, [r4, #12]
  4060e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4060e6:	81a3      	strh	r3, [r4, #12]
  4060e8:	9816      	ldr	r0, [sp, #88]	; 0x58
  4060ea:	f001 fc69 	bl	4079c0 <__retarget_lock_close_recursive>
  4060ee:	4628      	mov	r0, r5
  4060f0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4060f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004060f8 <__swsetup_r>:
  4060f8:	b538      	push	{r3, r4, r5, lr}
  4060fa:	4b30      	ldr	r3, [pc, #192]	; (4061bc <__swsetup_r+0xc4>)
  4060fc:	681b      	ldr	r3, [r3, #0]
  4060fe:	4605      	mov	r5, r0
  406100:	460c      	mov	r4, r1
  406102:	b113      	cbz	r3, 40610a <__swsetup_r+0x12>
  406104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406106:	2a00      	cmp	r2, #0
  406108:	d038      	beq.n	40617c <__swsetup_r+0x84>
  40610a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40610e:	b293      	uxth	r3, r2
  406110:	0718      	lsls	r0, r3, #28
  406112:	d50c      	bpl.n	40612e <__swsetup_r+0x36>
  406114:	6920      	ldr	r0, [r4, #16]
  406116:	b1a8      	cbz	r0, 406144 <__swsetup_r+0x4c>
  406118:	f013 0201 	ands.w	r2, r3, #1
  40611c:	d01e      	beq.n	40615c <__swsetup_r+0x64>
  40611e:	6963      	ldr	r3, [r4, #20]
  406120:	2200      	movs	r2, #0
  406122:	425b      	negs	r3, r3
  406124:	61a3      	str	r3, [r4, #24]
  406126:	60a2      	str	r2, [r4, #8]
  406128:	b1f0      	cbz	r0, 406168 <__swsetup_r+0x70>
  40612a:	2000      	movs	r0, #0
  40612c:	bd38      	pop	{r3, r4, r5, pc}
  40612e:	06d9      	lsls	r1, r3, #27
  406130:	d53c      	bpl.n	4061ac <__swsetup_r+0xb4>
  406132:	0758      	lsls	r0, r3, #29
  406134:	d426      	bmi.n	406184 <__swsetup_r+0x8c>
  406136:	6920      	ldr	r0, [r4, #16]
  406138:	f042 0308 	orr.w	r3, r2, #8
  40613c:	81a3      	strh	r3, [r4, #12]
  40613e:	b29b      	uxth	r3, r3
  406140:	2800      	cmp	r0, #0
  406142:	d1e9      	bne.n	406118 <__swsetup_r+0x20>
  406144:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406148:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40614c:	d0e4      	beq.n	406118 <__swsetup_r+0x20>
  40614e:	4628      	mov	r0, r5
  406150:	4621      	mov	r1, r4
  406152:	f001 fc69 	bl	407a28 <__smakebuf_r>
  406156:	89a3      	ldrh	r3, [r4, #12]
  406158:	6920      	ldr	r0, [r4, #16]
  40615a:	e7dd      	b.n	406118 <__swsetup_r+0x20>
  40615c:	0799      	lsls	r1, r3, #30
  40615e:	bf58      	it	pl
  406160:	6962      	ldrpl	r2, [r4, #20]
  406162:	60a2      	str	r2, [r4, #8]
  406164:	2800      	cmp	r0, #0
  406166:	d1e0      	bne.n	40612a <__swsetup_r+0x32>
  406168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40616c:	061a      	lsls	r2, r3, #24
  40616e:	d5dd      	bpl.n	40612c <__swsetup_r+0x34>
  406170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406174:	81a3      	strh	r3, [r4, #12]
  406176:	f04f 30ff 	mov.w	r0, #4294967295
  40617a:	bd38      	pop	{r3, r4, r5, pc}
  40617c:	4618      	mov	r0, r3
  40617e:	f001 f8e5 	bl	40734c <__sinit>
  406182:	e7c2      	b.n	40610a <__swsetup_r+0x12>
  406184:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406186:	b151      	cbz	r1, 40619e <__swsetup_r+0xa6>
  406188:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40618c:	4299      	cmp	r1, r3
  40618e:	d004      	beq.n	40619a <__swsetup_r+0xa2>
  406190:	4628      	mov	r0, r5
  406192:	f001 f97d 	bl	407490 <_free_r>
  406196:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40619a:	2300      	movs	r3, #0
  40619c:	6323      	str	r3, [r4, #48]	; 0x30
  40619e:	2300      	movs	r3, #0
  4061a0:	6920      	ldr	r0, [r4, #16]
  4061a2:	6063      	str	r3, [r4, #4]
  4061a4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4061a8:	6020      	str	r0, [r4, #0]
  4061aa:	e7c5      	b.n	406138 <__swsetup_r+0x40>
  4061ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4061b0:	2309      	movs	r3, #9
  4061b2:	602b      	str	r3, [r5, #0]
  4061b4:	f04f 30ff 	mov.w	r0, #4294967295
  4061b8:	81a2      	strh	r2, [r4, #12]
  4061ba:	bd38      	pop	{r3, r4, r5, pc}
  4061bc:	20400014 	.word	0x20400014

004061c0 <register_fini>:
  4061c0:	4b02      	ldr	r3, [pc, #8]	; (4061cc <register_fini+0xc>)
  4061c2:	b113      	cbz	r3, 4061ca <register_fini+0xa>
  4061c4:	4802      	ldr	r0, [pc, #8]	; (4061d0 <register_fini+0x10>)
  4061c6:	f000 b805 	b.w	4061d4 <atexit>
  4061ca:	4770      	bx	lr
  4061cc:	00000000 	.word	0x00000000
  4061d0:	004073bd 	.word	0x004073bd

004061d4 <atexit>:
  4061d4:	2300      	movs	r3, #0
  4061d6:	4601      	mov	r1, r0
  4061d8:	461a      	mov	r2, r3
  4061da:	4618      	mov	r0, r3
  4061dc:	f002 ba68 	b.w	4086b0 <__register_exitproc>

004061e0 <quorem>:
  4061e0:	6902      	ldr	r2, [r0, #16]
  4061e2:	690b      	ldr	r3, [r1, #16]
  4061e4:	4293      	cmp	r3, r2
  4061e6:	f300 808d 	bgt.w	406304 <quorem+0x124>
  4061ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4061ee:	f103 38ff 	add.w	r8, r3, #4294967295
  4061f2:	f101 0714 	add.w	r7, r1, #20
  4061f6:	f100 0b14 	add.w	fp, r0, #20
  4061fa:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4061fe:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  406202:	ea4f 0488 	mov.w	r4, r8, lsl #2
  406206:	b083      	sub	sp, #12
  406208:	3201      	adds	r2, #1
  40620a:	fbb3 f9f2 	udiv	r9, r3, r2
  40620e:	eb0b 0304 	add.w	r3, fp, r4
  406212:	9400      	str	r4, [sp, #0]
  406214:	eb07 0a04 	add.w	sl, r7, r4
  406218:	9301      	str	r3, [sp, #4]
  40621a:	f1b9 0f00 	cmp.w	r9, #0
  40621e:	d039      	beq.n	406294 <quorem+0xb4>
  406220:	2500      	movs	r5, #0
  406222:	462e      	mov	r6, r5
  406224:	46bc      	mov	ip, r7
  406226:	46de      	mov	lr, fp
  406228:	f85c 4b04 	ldr.w	r4, [ip], #4
  40622c:	f8de 3000 	ldr.w	r3, [lr]
  406230:	b2a2      	uxth	r2, r4
  406232:	fb09 5502 	mla	r5, r9, r2, r5
  406236:	0c22      	lsrs	r2, r4, #16
  406238:	0c2c      	lsrs	r4, r5, #16
  40623a:	fb09 4202 	mla	r2, r9, r2, r4
  40623e:	b2ad      	uxth	r5, r5
  406240:	1b75      	subs	r5, r6, r5
  406242:	b296      	uxth	r6, r2
  406244:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  406248:	fa15 f383 	uxtah	r3, r5, r3
  40624c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  406250:	b29b      	uxth	r3, r3
  406252:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  406256:	45e2      	cmp	sl, ip
  406258:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40625c:	f84e 3b04 	str.w	r3, [lr], #4
  406260:	ea4f 4626 	mov.w	r6, r6, asr #16
  406264:	d2e0      	bcs.n	406228 <quorem+0x48>
  406266:	9b00      	ldr	r3, [sp, #0]
  406268:	f85b 3003 	ldr.w	r3, [fp, r3]
  40626c:	b993      	cbnz	r3, 406294 <quorem+0xb4>
  40626e:	9c01      	ldr	r4, [sp, #4]
  406270:	1f23      	subs	r3, r4, #4
  406272:	459b      	cmp	fp, r3
  406274:	d20c      	bcs.n	406290 <quorem+0xb0>
  406276:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40627a:	b94b      	cbnz	r3, 406290 <quorem+0xb0>
  40627c:	f1a4 0308 	sub.w	r3, r4, #8
  406280:	e002      	b.n	406288 <quorem+0xa8>
  406282:	681a      	ldr	r2, [r3, #0]
  406284:	3b04      	subs	r3, #4
  406286:	b91a      	cbnz	r2, 406290 <quorem+0xb0>
  406288:	459b      	cmp	fp, r3
  40628a:	f108 38ff 	add.w	r8, r8, #4294967295
  40628e:	d3f8      	bcc.n	406282 <quorem+0xa2>
  406290:	f8c0 8010 	str.w	r8, [r0, #16]
  406294:	4604      	mov	r4, r0
  406296:	f001 fec5 	bl	408024 <__mcmp>
  40629a:	2800      	cmp	r0, #0
  40629c:	db2e      	blt.n	4062fc <quorem+0x11c>
  40629e:	f109 0901 	add.w	r9, r9, #1
  4062a2:	465d      	mov	r5, fp
  4062a4:	2300      	movs	r3, #0
  4062a6:	f857 1b04 	ldr.w	r1, [r7], #4
  4062aa:	6828      	ldr	r0, [r5, #0]
  4062ac:	b28a      	uxth	r2, r1
  4062ae:	1a9a      	subs	r2, r3, r2
  4062b0:	0c0b      	lsrs	r3, r1, #16
  4062b2:	fa12 f280 	uxtah	r2, r2, r0
  4062b6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4062ba:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4062be:	b292      	uxth	r2, r2
  4062c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4062c4:	45ba      	cmp	sl, r7
  4062c6:	f845 2b04 	str.w	r2, [r5], #4
  4062ca:	ea4f 4323 	mov.w	r3, r3, asr #16
  4062ce:	d2ea      	bcs.n	4062a6 <quorem+0xc6>
  4062d0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4062d4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4062d8:	b982      	cbnz	r2, 4062fc <quorem+0x11c>
  4062da:	1f1a      	subs	r2, r3, #4
  4062dc:	4593      	cmp	fp, r2
  4062de:	d20b      	bcs.n	4062f8 <quorem+0x118>
  4062e0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4062e4:	b942      	cbnz	r2, 4062f8 <quorem+0x118>
  4062e6:	3b08      	subs	r3, #8
  4062e8:	e002      	b.n	4062f0 <quorem+0x110>
  4062ea:	681a      	ldr	r2, [r3, #0]
  4062ec:	3b04      	subs	r3, #4
  4062ee:	b91a      	cbnz	r2, 4062f8 <quorem+0x118>
  4062f0:	459b      	cmp	fp, r3
  4062f2:	f108 38ff 	add.w	r8, r8, #4294967295
  4062f6:	d3f8      	bcc.n	4062ea <quorem+0x10a>
  4062f8:	f8c4 8010 	str.w	r8, [r4, #16]
  4062fc:	4648      	mov	r0, r9
  4062fe:	b003      	add	sp, #12
  406300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406304:	2000      	movs	r0, #0
  406306:	4770      	bx	lr

00406308 <_dtoa_r>:
  406308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40630c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40630e:	b09b      	sub	sp, #108	; 0x6c
  406310:	4604      	mov	r4, r0
  406312:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  406314:	4692      	mov	sl, r2
  406316:	469b      	mov	fp, r3
  406318:	b141      	cbz	r1, 40632c <_dtoa_r+0x24>
  40631a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40631c:	604a      	str	r2, [r1, #4]
  40631e:	2301      	movs	r3, #1
  406320:	4093      	lsls	r3, r2
  406322:	608b      	str	r3, [r1, #8]
  406324:	f001 fca6 	bl	407c74 <_Bfree>
  406328:	2300      	movs	r3, #0
  40632a:	6423      	str	r3, [r4, #64]	; 0x40
  40632c:	f1bb 0f00 	cmp.w	fp, #0
  406330:	465d      	mov	r5, fp
  406332:	db35      	blt.n	4063a0 <_dtoa_r+0x98>
  406334:	2300      	movs	r3, #0
  406336:	6033      	str	r3, [r6, #0]
  406338:	4b9d      	ldr	r3, [pc, #628]	; (4065b0 <_dtoa_r+0x2a8>)
  40633a:	43ab      	bics	r3, r5
  40633c:	d015      	beq.n	40636a <_dtoa_r+0x62>
  40633e:	4650      	mov	r0, sl
  406340:	4659      	mov	r1, fp
  406342:	2200      	movs	r2, #0
  406344:	2300      	movs	r3, #0
  406346:	f002 feab 	bl	4090a0 <__aeabi_dcmpeq>
  40634a:	4680      	mov	r8, r0
  40634c:	2800      	cmp	r0, #0
  40634e:	d02d      	beq.n	4063ac <_dtoa_r+0xa4>
  406350:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406352:	2301      	movs	r3, #1
  406354:	6013      	str	r3, [r2, #0]
  406356:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406358:	2b00      	cmp	r3, #0
  40635a:	f000 80bd 	beq.w	4064d8 <_dtoa_r+0x1d0>
  40635e:	4895      	ldr	r0, [pc, #596]	; (4065b4 <_dtoa_r+0x2ac>)
  406360:	6018      	str	r0, [r3, #0]
  406362:	3801      	subs	r0, #1
  406364:	b01b      	add	sp, #108	; 0x6c
  406366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40636a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40636c:	f242 730f 	movw	r3, #9999	; 0x270f
  406370:	6013      	str	r3, [r2, #0]
  406372:	f1ba 0f00 	cmp.w	sl, #0
  406376:	d10d      	bne.n	406394 <_dtoa_r+0x8c>
  406378:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40637c:	b955      	cbnz	r5, 406394 <_dtoa_r+0x8c>
  40637e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406380:	488d      	ldr	r0, [pc, #564]	; (4065b8 <_dtoa_r+0x2b0>)
  406382:	2b00      	cmp	r3, #0
  406384:	d0ee      	beq.n	406364 <_dtoa_r+0x5c>
  406386:	f100 0308 	add.w	r3, r0, #8
  40638a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40638c:	6013      	str	r3, [r2, #0]
  40638e:	b01b      	add	sp, #108	; 0x6c
  406390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406394:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406396:	4889      	ldr	r0, [pc, #548]	; (4065bc <_dtoa_r+0x2b4>)
  406398:	2b00      	cmp	r3, #0
  40639a:	d0e3      	beq.n	406364 <_dtoa_r+0x5c>
  40639c:	1cc3      	adds	r3, r0, #3
  40639e:	e7f4      	b.n	40638a <_dtoa_r+0x82>
  4063a0:	2301      	movs	r3, #1
  4063a2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4063a6:	6033      	str	r3, [r6, #0]
  4063a8:	46ab      	mov	fp, r5
  4063aa:	e7c5      	b.n	406338 <_dtoa_r+0x30>
  4063ac:	aa18      	add	r2, sp, #96	; 0x60
  4063ae:	ab19      	add	r3, sp, #100	; 0x64
  4063b0:	9201      	str	r2, [sp, #4]
  4063b2:	9300      	str	r3, [sp, #0]
  4063b4:	4652      	mov	r2, sl
  4063b6:	465b      	mov	r3, fp
  4063b8:	4620      	mov	r0, r4
  4063ba:	f001 fed3 	bl	408164 <__d2b>
  4063be:	0d2b      	lsrs	r3, r5, #20
  4063c0:	4681      	mov	r9, r0
  4063c2:	d071      	beq.n	4064a8 <_dtoa_r+0x1a0>
  4063c4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4063c8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4063cc:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4063ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4063d2:	4650      	mov	r0, sl
  4063d4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  4063d8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4063dc:	2200      	movs	r2, #0
  4063de:	4b78      	ldr	r3, [pc, #480]	; (4065c0 <_dtoa_r+0x2b8>)
  4063e0:	f7fd fa84 	bl	4038ec <__aeabi_dsub>
  4063e4:	a36c      	add	r3, pc, #432	; (adr r3, 406598 <_dtoa_r+0x290>)
  4063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4063ea:	f002 fbf1 	bl	408bd0 <__aeabi_dmul>
  4063ee:	a36c      	add	r3, pc, #432	; (adr r3, 4065a0 <_dtoa_r+0x298>)
  4063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4063f4:	f7fd fa7c 	bl	4038f0 <__adddf3>
  4063f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4063fc:	4630      	mov	r0, r6
  4063fe:	f7fd fbc3 	bl	403b88 <__aeabi_i2d>
  406402:	a369      	add	r3, pc, #420	; (adr r3, 4065a8 <_dtoa_r+0x2a0>)
  406404:	e9d3 2300 	ldrd	r2, r3, [r3]
  406408:	f002 fbe2 	bl	408bd0 <__aeabi_dmul>
  40640c:	4602      	mov	r2, r0
  40640e:	460b      	mov	r3, r1
  406410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406414:	f7fd fa6c 	bl	4038f0 <__adddf3>
  406418:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40641c:	f002 fe88 	bl	409130 <__aeabi_d2iz>
  406420:	2200      	movs	r2, #0
  406422:	9002      	str	r0, [sp, #8]
  406424:	2300      	movs	r3, #0
  406426:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40642a:	f002 fe43 	bl	4090b4 <__aeabi_dcmplt>
  40642e:	2800      	cmp	r0, #0
  406430:	f040 8173 	bne.w	40671a <_dtoa_r+0x412>
  406434:	9d02      	ldr	r5, [sp, #8]
  406436:	2d16      	cmp	r5, #22
  406438:	f200 815d 	bhi.w	4066f6 <_dtoa_r+0x3ee>
  40643c:	4b61      	ldr	r3, [pc, #388]	; (4065c4 <_dtoa_r+0x2bc>)
  40643e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  406442:	e9d3 0100 	ldrd	r0, r1, [r3]
  406446:	4652      	mov	r2, sl
  406448:	465b      	mov	r3, fp
  40644a:	f002 fe51 	bl	4090f0 <__aeabi_dcmpgt>
  40644e:	2800      	cmp	r0, #0
  406450:	f000 81c5 	beq.w	4067de <_dtoa_r+0x4d6>
  406454:	1e6b      	subs	r3, r5, #1
  406456:	9302      	str	r3, [sp, #8]
  406458:	2300      	movs	r3, #0
  40645a:	930e      	str	r3, [sp, #56]	; 0x38
  40645c:	1bbf      	subs	r7, r7, r6
  40645e:	1e7b      	subs	r3, r7, #1
  406460:	9306      	str	r3, [sp, #24]
  406462:	f100 8154 	bmi.w	40670e <_dtoa_r+0x406>
  406466:	2300      	movs	r3, #0
  406468:	9308      	str	r3, [sp, #32]
  40646a:	9b02      	ldr	r3, [sp, #8]
  40646c:	2b00      	cmp	r3, #0
  40646e:	f2c0 8145 	blt.w	4066fc <_dtoa_r+0x3f4>
  406472:	9a06      	ldr	r2, [sp, #24]
  406474:	930d      	str	r3, [sp, #52]	; 0x34
  406476:	4611      	mov	r1, r2
  406478:	4419      	add	r1, r3
  40647a:	2300      	movs	r3, #0
  40647c:	9106      	str	r1, [sp, #24]
  40647e:	930c      	str	r3, [sp, #48]	; 0x30
  406480:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406482:	2b09      	cmp	r3, #9
  406484:	d82a      	bhi.n	4064dc <_dtoa_r+0x1d4>
  406486:	2b05      	cmp	r3, #5
  406488:	f340 865b 	ble.w	407142 <_dtoa_r+0xe3a>
  40648c:	3b04      	subs	r3, #4
  40648e:	9324      	str	r3, [sp, #144]	; 0x90
  406490:	2500      	movs	r5, #0
  406492:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406494:	3b02      	subs	r3, #2
  406496:	2b03      	cmp	r3, #3
  406498:	f200 8642 	bhi.w	407120 <_dtoa_r+0xe18>
  40649c:	e8df f013 	tbh	[pc, r3, lsl #1]
  4064a0:	02c903d4 	.word	0x02c903d4
  4064a4:	046103df 	.word	0x046103df
  4064a8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4064aa:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4064ac:	443e      	add	r6, r7
  4064ae:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4064b2:	2b20      	cmp	r3, #32
  4064b4:	f340 818e 	ble.w	4067d4 <_dtoa_r+0x4cc>
  4064b8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4064bc:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4064c0:	409d      	lsls	r5, r3
  4064c2:	fa2a f000 	lsr.w	r0, sl, r0
  4064c6:	4328      	orrs	r0, r5
  4064c8:	f7fd fb4e 	bl	403b68 <__aeabi_ui2d>
  4064cc:	2301      	movs	r3, #1
  4064ce:	3e01      	subs	r6, #1
  4064d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4064d4:	9314      	str	r3, [sp, #80]	; 0x50
  4064d6:	e781      	b.n	4063dc <_dtoa_r+0xd4>
  4064d8:	483b      	ldr	r0, [pc, #236]	; (4065c8 <_dtoa_r+0x2c0>)
  4064da:	e743      	b.n	406364 <_dtoa_r+0x5c>
  4064dc:	2100      	movs	r1, #0
  4064de:	6461      	str	r1, [r4, #68]	; 0x44
  4064e0:	4620      	mov	r0, r4
  4064e2:	9125      	str	r1, [sp, #148]	; 0x94
  4064e4:	f001 fba0 	bl	407c28 <_Balloc>
  4064e8:	f04f 33ff 	mov.w	r3, #4294967295
  4064ec:	930a      	str	r3, [sp, #40]	; 0x28
  4064ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4064f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4064f2:	2301      	movs	r3, #1
  4064f4:	9004      	str	r0, [sp, #16]
  4064f6:	6420      	str	r0, [r4, #64]	; 0x40
  4064f8:	9224      	str	r2, [sp, #144]	; 0x90
  4064fa:	930b      	str	r3, [sp, #44]	; 0x2c
  4064fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4064fe:	2b00      	cmp	r3, #0
  406500:	f2c0 80d9 	blt.w	4066b6 <_dtoa_r+0x3ae>
  406504:	9a02      	ldr	r2, [sp, #8]
  406506:	2a0e      	cmp	r2, #14
  406508:	f300 80d5 	bgt.w	4066b6 <_dtoa_r+0x3ae>
  40650c:	4b2d      	ldr	r3, [pc, #180]	; (4065c4 <_dtoa_r+0x2bc>)
  40650e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406512:	e9d3 2300 	ldrd	r2, r3, [r3]
  406516:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40651a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40651c:	2b00      	cmp	r3, #0
  40651e:	f2c0 83ba 	blt.w	406c96 <_dtoa_r+0x98e>
  406522:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  406526:	4650      	mov	r0, sl
  406528:	462a      	mov	r2, r5
  40652a:	4633      	mov	r3, r6
  40652c:	4659      	mov	r1, fp
  40652e:	f002 fc79 	bl	408e24 <__aeabi_ddiv>
  406532:	f002 fdfd 	bl	409130 <__aeabi_d2iz>
  406536:	4680      	mov	r8, r0
  406538:	f7fd fb26 	bl	403b88 <__aeabi_i2d>
  40653c:	462a      	mov	r2, r5
  40653e:	4633      	mov	r3, r6
  406540:	f002 fb46 	bl	408bd0 <__aeabi_dmul>
  406544:	460b      	mov	r3, r1
  406546:	4602      	mov	r2, r0
  406548:	4659      	mov	r1, fp
  40654a:	4650      	mov	r0, sl
  40654c:	f7fd f9ce 	bl	4038ec <__aeabi_dsub>
  406550:	9d04      	ldr	r5, [sp, #16]
  406552:	f108 0330 	add.w	r3, r8, #48	; 0x30
  406556:	702b      	strb	r3, [r5, #0]
  406558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40655a:	2b01      	cmp	r3, #1
  40655c:	4606      	mov	r6, r0
  40655e:	460f      	mov	r7, r1
  406560:	f105 0501 	add.w	r5, r5, #1
  406564:	d068      	beq.n	406638 <_dtoa_r+0x330>
  406566:	2200      	movs	r2, #0
  406568:	4b18      	ldr	r3, [pc, #96]	; (4065cc <_dtoa_r+0x2c4>)
  40656a:	f002 fb31 	bl	408bd0 <__aeabi_dmul>
  40656e:	2200      	movs	r2, #0
  406570:	2300      	movs	r3, #0
  406572:	4606      	mov	r6, r0
  406574:	460f      	mov	r7, r1
  406576:	f002 fd93 	bl	4090a0 <__aeabi_dcmpeq>
  40657a:	2800      	cmp	r0, #0
  40657c:	f040 8088 	bne.w	406690 <_dtoa_r+0x388>
  406580:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  406584:	f04f 0a00 	mov.w	sl, #0
  406588:	f8df b040 	ldr.w	fp, [pc, #64]	; 4065cc <_dtoa_r+0x2c4>
  40658c:	940c      	str	r4, [sp, #48]	; 0x30
  40658e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  406592:	e028      	b.n	4065e6 <_dtoa_r+0x2de>
  406594:	f3af 8000 	nop.w
  406598:	636f4361 	.word	0x636f4361
  40659c:	3fd287a7 	.word	0x3fd287a7
  4065a0:	8b60c8b3 	.word	0x8b60c8b3
  4065a4:	3fc68a28 	.word	0x3fc68a28
  4065a8:	509f79fb 	.word	0x509f79fb
  4065ac:	3fd34413 	.word	0x3fd34413
  4065b0:	7ff00000 	.word	0x7ff00000
  4065b4:	0040929d 	.word	0x0040929d
  4065b8:	004092c0 	.word	0x004092c0
  4065bc:	004092cc 	.word	0x004092cc
  4065c0:	3ff80000 	.word	0x3ff80000
  4065c4:	004092f8 	.word	0x004092f8
  4065c8:	0040929c 	.word	0x0040929c
  4065cc:	40240000 	.word	0x40240000
  4065d0:	f002 fafe 	bl	408bd0 <__aeabi_dmul>
  4065d4:	2200      	movs	r2, #0
  4065d6:	2300      	movs	r3, #0
  4065d8:	4606      	mov	r6, r0
  4065da:	460f      	mov	r7, r1
  4065dc:	f002 fd60 	bl	4090a0 <__aeabi_dcmpeq>
  4065e0:	2800      	cmp	r0, #0
  4065e2:	f040 83c1 	bne.w	406d68 <_dtoa_r+0xa60>
  4065e6:	4642      	mov	r2, r8
  4065e8:	464b      	mov	r3, r9
  4065ea:	4630      	mov	r0, r6
  4065ec:	4639      	mov	r1, r7
  4065ee:	f002 fc19 	bl	408e24 <__aeabi_ddiv>
  4065f2:	f002 fd9d 	bl	409130 <__aeabi_d2iz>
  4065f6:	4604      	mov	r4, r0
  4065f8:	f7fd fac6 	bl	403b88 <__aeabi_i2d>
  4065fc:	4642      	mov	r2, r8
  4065fe:	464b      	mov	r3, r9
  406600:	f002 fae6 	bl	408bd0 <__aeabi_dmul>
  406604:	4602      	mov	r2, r0
  406606:	460b      	mov	r3, r1
  406608:	4630      	mov	r0, r6
  40660a:	4639      	mov	r1, r7
  40660c:	f7fd f96e 	bl	4038ec <__aeabi_dsub>
  406610:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  406614:	9e04      	ldr	r6, [sp, #16]
  406616:	f805 eb01 	strb.w	lr, [r5], #1
  40661a:	eba5 0e06 	sub.w	lr, r5, r6
  40661e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406620:	45b6      	cmp	lr, r6
  406622:	e9cd 0106 	strd	r0, r1, [sp, #24]
  406626:	4652      	mov	r2, sl
  406628:	465b      	mov	r3, fp
  40662a:	d1d1      	bne.n	4065d0 <_dtoa_r+0x2c8>
  40662c:	46a0      	mov	r8, r4
  40662e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406632:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406634:	4606      	mov	r6, r0
  406636:	460f      	mov	r7, r1
  406638:	4632      	mov	r2, r6
  40663a:	463b      	mov	r3, r7
  40663c:	4630      	mov	r0, r6
  40663e:	4639      	mov	r1, r7
  406640:	f7fd f956 	bl	4038f0 <__adddf3>
  406644:	4606      	mov	r6, r0
  406646:	460f      	mov	r7, r1
  406648:	4602      	mov	r2, r0
  40664a:	460b      	mov	r3, r1
  40664c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406650:	f002 fd30 	bl	4090b4 <__aeabi_dcmplt>
  406654:	b948      	cbnz	r0, 40666a <_dtoa_r+0x362>
  406656:	4632      	mov	r2, r6
  406658:	463b      	mov	r3, r7
  40665a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40665e:	f002 fd1f 	bl	4090a0 <__aeabi_dcmpeq>
  406662:	b1a8      	cbz	r0, 406690 <_dtoa_r+0x388>
  406664:	f018 0f01 	tst.w	r8, #1
  406668:	d012      	beq.n	406690 <_dtoa_r+0x388>
  40666a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40666e:	9a04      	ldr	r2, [sp, #16]
  406670:	1e6b      	subs	r3, r5, #1
  406672:	e004      	b.n	40667e <_dtoa_r+0x376>
  406674:	429a      	cmp	r2, r3
  406676:	f000 8401 	beq.w	406e7c <_dtoa_r+0xb74>
  40667a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40667e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  406682:	f103 0501 	add.w	r5, r3, #1
  406686:	d0f5      	beq.n	406674 <_dtoa_r+0x36c>
  406688:	f108 0801 	add.w	r8, r8, #1
  40668c:	f883 8000 	strb.w	r8, [r3]
  406690:	4649      	mov	r1, r9
  406692:	4620      	mov	r0, r4
  406694:	f001 faee 	bl	407c74 <_Bfree>
  406698:	2200      	movs	r2, #0
  40669a:	9b02      	ldr	r3, [sp, #8]
  40669c:	702a      	strb	r2, [r5, #0]
  40669e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4066a0:	3301      	adds	r3, #1
  4066a2:	6013      	str	r3, [r2, #0]
  4066a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4066a6:	2b00      	cmp	r3, #0
  4066a8:	f000 839e 	beq.w	406de8 <_dtoa_r+0xae0>
  4066ac:	9804      	ldr	r0, [sp, #16]
  4066ae:	601d      	str	r5, [r3, #0]
  4066b0:	b01b      	add	sp, #108	; 0x6c
  4066b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4066b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4066b8:	2a00      	cmp	r2, #0
  4066ba:	d03e      	beq.n	40673a <_dtoa_r+0x432>
  4066bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4066be:	2a01      	cmp	r2, #1
  4066c0:	f340 8311 	ble.w	406ce6 <_dtoa_r+0x9de>
  4066c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4066c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4066c8:	1e5f      	subs	r7, r3, #1
  4066ca:	42ba      	cmp	r2, r7
  4066cc:	f2c0 838f 	blt.w	406dee <_dtoa_r+0xae6>
  4066d0:	1bd7      	subs	r7, r2, r7
  4066d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4066d4:	2b00      	cmp	r3, #0
  4066d6:	f2c0 848b 	blt.w	406ff0 <_dtoa_r+0xce8>
  4066da:	9d08      	ldr	r5, [sp, #32]
  4066dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4066de:	9a08      	ldr	r2, [sp, #32]
  4066e0:	441a      	add	r2, r3
  4066e2:	9208      	str	r2, [sp, #32]
  4066e4:	9a06      	ldr	r2, [sp, #24]
  4066e6:	2101      	movs	r1, #1
  4066e8:	441a      	add	r2, r3
  4066ea:	4620      	mov	r0, r4
  4066ec:	9206      	str	r2, [sp, #24]
  4066ee:	f001 fb5b 	bl	407da8 <__i2b>
  4066f2:	4606      	mov	r6, r0
  4066f4:	e024      	b.n	406740 <_dtoa_r+0x438>
  4066f6:	2301      	movs	r3, #1
  4066f8:	930e      	str	r3, [sp, #56]	; 0x38
  4066fa:	e6af      	b.n	40645c <_dtoa_r+0x154>
  4066fc:	9a08      	ldr	r2, [sp, #32]
  4066fe:	9b02      	ldr	r3, [sp, #8]
  406700:	1ad2      	subs	r2, r2, r3
  406702:	425b      	negs	r3, r3
  406704:	930c      	str	r3, [sp, #48]	; 0x30
  406706:	2300      	movs	r3, #0
  406708:	9208      	str	r2, [sp, #32]
  40670a:	930d      	str	r3, [sp, #52]	; 0x34
  40670c:	e6b8      	b.n	406480 <_dtoa_r+0x178>
  40670e:	f1c7 0301 	rsb	r3, r7, #1
  406712:	9308      	str	r3, [sp, #32]
  406714:	2300      	movs	r3, #0
  406716:	9306      	str	r3, [sp, #24]
  406718:	e6a7      	b.n	40646a <_dtoa_r+0x162>
  40671a:	9d02      	ldr	r5, [sp, #8]
  40671c:	4628      	mov	r0, r5
  40671e:	f7fd fa33 	bl	403b88 <__aeabi_i2d>
  406722:	4602      	mov	r2, r0
  406724:	460b      	mov	r3, r1
  406726:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40672a:	f002 fcb9 	bl	4090a0 <__aeabi_dcmpeq>
  40672e:	2800      	cmp	r0, #0
  406730:	f47f ae80 	bne.w	406434 <_dtoa_r+0x12c>
  406734:	1e6b      	subs	r3, r5, #1
  406736:	9302      	str	r3, [sp, #8]
  406738:	e67c      	b.n	406434 <_dtoa_r+0x12c>
  40673a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40673c:	9d08      	ldr	r5, [sp, #32]
  40673e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  406740:	2d00      	cmp	r5, #0
  406742:	dd0c      	ble.n	40675e <_dtoa_r+0x456>
  406744:	9906      	ldr	r1, [sp, #24]
  406746:	2900      	cmp	r1, #0
  406748:	460b      	mov	r3, r1
  40674a:	dd08      	ble.n	40675e <_dtoa_r+0x456>
  40674c:	42a9      	cmp	r1, r5
  40674e:	9a08      	ldr	r2, [sp, #32]
  406750:	bfa8      	it	ge
  406752:	462b      	movge	r3, r5
  406754:	1ad2      	subs	r2, r2, r3
  406756:	1aed      	subs	r5, r5, r3
  406758:	1acb      	subs	r3, r1, r3
  40675a:	9208      	str	r2, [sp, #32]
  40675c:	9306      	str	r3, [sp, #24]
  40675e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406760:	b1d3      	cbz	r3, 406798 <_dtoa_r+0x490>
  406762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406764:	2b00      	cmp	r3, #0
  406766:	f000 82b7 	beq.w	406cd8 <_dtoa_r+0x9d0>
  40676a:	2f00      	cmp	r7, #0
  40676c:	dd10      	ble.n	406790 <_dtoa_r+0x488>
  40676e:	4631      	mov	r1, r6
  406770:	463a      	mov	r2, r7
  406772:	4620      	mov	r0, r4
  406774:	f001 fbb4 	bl	407ee0 <__pow5mult>
  406778:	464a      	mov	r2, r9
  40677a:	4601      	mov	r1, r0
  40677c:	4606      	mov	r6, r0
  40677e:	4620      	mov	r0, r4
  406780:	f001 fb1c 	bl	407dbc <__multiply>
  406784:	4649      	mov	r1, r9
  406786:	4680      	mov	r8, r0
  406788:	4620      	mov	r0, r4
  40678a:	f001 fa73 	bl	407c74 <_Bfree>
  40678e:	46c1      	mov	r9, r8
  406790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406792:	1bda      	subs	r2, r3, r7
  406794:	f040 82a1 	bne.w	406cda <_dtoa_r+0x9d2>
  406798:	2101      	movs	r1, #1
  40679a:	4620      	mov	r0, r4
  40679c:	f001 fb04 	bl	407da8 <__i2b>
  4067a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4067a2:	2b00      	cmp	r3, #0
  4067a4:	4680      	mov	r8, r0
  4067a6:	dd1c      	ble.n	4067e2 <_dtoa_r+0x4da>
  4067a8:	4601      	mov	r1, r0
  4067aa:	461a      	mov	r2, r3
  4067ac:	4620      	mov	r0, r4
  4067ae:	f001 fb97 	bl	407ee0 <__pow5mult>
  4067b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4067b4:	2b01      	cmp	r3, #1
  4067b6:	4680      	mov	r8, r0
  4067b8:	f340 8254 	ble.w	406c64 <_dtoa_r+0x95c>
  4067bc:	2300      	movs	r3, #0
  4067be:	930c      	str	r3, [sp, #48]	; 0x30
  4067c0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4067c4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4067c8:	6918      	ldr	r0, [r3, #16]
  4067ca:	f001 fa9d 	bl	407d08 <__hi0bits>
  4067ce:	f1c0 0020 	rsb	r0, r0, #32
  4067d2:	e010      	b.n	4067f6 <_dtoa_r+0x4ee>
  4067d4:	f1c3 0520 	rsb	r5, r3, #32
  4067d8:	fa0a f005 	lsl.w	r0, sl, r5
  4067dc:	e674      	b.n	4064c8 <_dtoa_r+0x1c0>
  4067de:	900e      	str	r0, [sp, #56]	; 0x38
  4067e0:	e63c      	b.n	40645c <_dtoa_r+0x154>
  4067e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4067e4:	2b01      	cmp	r3, #1
  4067e6:	f340 8287 	ble.w	406cf8 <_dtoa_r+0x9f0>
  4067ea:	2300      	movs	r3, #0
  4067ec:	930c      	str	r3, [sp, #48]	; 0x30
  4067ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4067f0:	2001      	movs	r0, #1
  4067f2:	2b00      	cmp	r3, #0
  4067f4:	d1e4      	bne.n	4067c0 <_dtoa_r+0x4b8>
  4067f6:	9a06      	ldr	r2, [sp, #24]
  4067f8:	4410      	add	r0, r2
  4067fa:	f010 001f 	ands.w	r0, r0, #31
  4067fe:	f000 80a1 	beq.w	406944 <_dtoa_r+0x63c>
  406802:	f1c0 0320 	rsb	r3, r0, #32
  406806:	2b04      	cmp	r3, #4
  406808:	f340 849e 	ble.w	407148 <_dtoa_r+0xe40>
  40680c:	9b08      	ldr	r3, [sp, #32]
  40680e:	f1c0 001c 	rsb	r0, r0, #28
  406812:	4403      	add	r3, r0
  406814:	9308      	str	r3, [sp, #32]
  406816:	4613      	mov	r3, r2
  406818:	4403      	add	r3, r0
  40681a:	4405      	add	r5, r0
  40681c:	9306      	str	r3, [sp, #24]
  40681e:	9b08      	ldr	r3, [sp, #32]
  406820:	2b00      	cmp	r3, #0
  406822:	dd05      	ble.n	406830 <_dtoa_r+0x528>
  406824:	4649      	mov	r1, r9
  406826:	461a      	mov	r2, r3
  406828:	4620      	mov	r0, r4
  40682a:	f001 fba9 	bl	407f80 <__lshift>
  40682e:	4681      	mov	r9, r0
  406830:	9b06      	ldr	r3, [sp, #24]
  406832:	2b00      	cmp	r3, #0
  406834:	dd05      	ble.n	406842 <_dtoa_r+0x53a>
  406836:	4641      	mov	r1, r8
  406838:	461a      	mov	r2, r3
  40683a:	4620      	mov	r0, r4
  40683c:	f001 fba0 	bl	407f80 <__lshift>
  406840:	4680      	mov	r8, r0
  406842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406844:	2b00      	cmp	r3, #0
  406846:	f040 8086 	bne.w	406956 <_dtoa_r+0x64e>
  40684a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40684c:	2b00      	cmp	r3, #0
  40684e:	f340 8266 	ble.w	406d1e <_dtoa_r+0xa16>
  406852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406854:	2b00      	cmp	r3, #0
  406856:	f000 8098 	beq.w	40698a <_dtoa_r+0x682>
  40685a:	2d00      	cmp	r5, #0
  40685c:	dd05      	ble.n	40686a <_dtoa_r+0x562>
  40685e:	4631      	mov	r1, r6
  406860:	462a      	mov	r2, r5
  406862:	4620      	mov	r0, r4
  406864:	f001 fb8c 	bl	407f80 <__lshift>
  406868:	4606      	mov	r6, r0
  40686a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40686c:	2b00      	cmp	r3, #0
  40686e:	f040 8337 	bne.w	406ee0 <_dtoa_r+0xbd8>
  406872:	9606      	str	r6, [sp, #24]
  406874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406876:	9a04      	ldr	r2, [sp, #16]
  406878:	f8dd b018 	ldr.w	fp, [sp, #24]
  40687c:	3b01      	subs	r3, #1
  40687e:	18d3      	adds	r3, r2, r3
  406880:	930b      	str	r3, [sp, #44]	; 0x2c
  406882:	f00a 0301 	and.w	r3, sl, #1
  406886:	930c      	str	r3, [sp, #48]	; 0x30
  406888:	4617      	mov	r7, r2
  40688a:	46c2      	mov	sl, r8
  40688c:	4651      	mov	r1, sl
  40688e:	4648      	mov	r0, r9
  406890:	f7ff fca6 	bl	4061e0 <quorem>
  406894:	4631      	mov	r1, r6
  406896:	4605      	mov	r5, r0
  406898:	4648      	mov	r0, r9
  40689a:	f001 fbc3 	bl	408024 <__mcmp>
  40689e:	465a      	mov	r2, fp
  4068a0:	900a      	str	r0, [sp, #40]	; 0x28
  4068a2:	4651      	mov	r1, sl
  4068a4:	4620      	mov	r0, r4
  4068a6:	f001 fbd9 	bl	40805c <__mdiff>
  4068aa:	68c2      	ldr	r2, [r0, #12]
  4068ac:	4680      	mov	r8, r0
  4068ae:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4068b2:	2a00      	cmp	r2, #0
  4068b4:	f040 822b 	bne.w	406d0e <_dtoa_r+0xa06>
  4068b8:	4601      	mov	r1, r0
  4068ba:	4648      	mov	r0, r9
  4068bc:	9308      	str	r3, [sp, #32]
  4068be:	f001 fbb1 	bl	408024 <__mcmp>
  4068c2:	4641      	mov	r1, r8
  4068c4:	9006      	str	r0, [sp, #24]
  4068c6:	4620      	mov	r0, r4
  4068c8:	f001 f9d4 	bl	407c74 <_Bfree>
  4068cc:	9a06      	ldr	r2, [sp, #24]
  4068ce:	9b08      	ldr	r3, [sp, #32]
  4068d0:	b932      	cbnz	r2, 4068e0 <_dtoa_r+0x5d8>
  4068d2:	9924      	ldr	r1, [sp, #144]	; 0x90
  4068d4:	b921      	cbnz	r1, 4068e0 <_dtoa_r+0x5d8>
  4068d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4068d8:	2a00      	cmp	r2, #0
  4068da:	f000 83ef 	beq.w	4070bc <_dtoa_r+0xdb4>
  4068de:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4068e0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4068e2:	2900      	cmp	r1, #0
  4068e4:	f2c0 829f 	blt.w	406e26 <_dtoa_r+0xb1e>
  4068e8:	d105      	bne.n	4068f6 <_dtoa_r+0x5ee>
  4068ea:	9924      	ldr	r1, [sp, #144]	; 0x90
  4068ec:	b919      	cbnz	r1, 4068f6 <_dtoa_r+0x5ee>
  4068ee:	990c      	ldr	r1, [sp, #48]	; 0x30
  4068f0:	2900      	cmp	r1, #0
  4068f2:	f000 8298 	beq.w	406e26 <_dtoa_r+0xb1e>
  4068f6:	2a00      	cmp	r2, #0
  4068f8:	f300 8306 	bgt.w	406f08 <_dtoa_r+0xc00>
  4068fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4068fe:	703b      	strb	r3, [r7, #0]
  406900:	f107 0801 	add.w	r8, r7, #1
  406904:	4297      	cmp	r7, r2
  406906:	4645      	mov	r5, r8
  406908:	f000 830c 	beq.w	406f24 <_dtoa_r+0xc1c>
  40690c:	4649      	mov	r1, r9
  40690e:	2300      	movs	r3, #0
  406910:	220a      	movs	r2, #10
  406912:	4620      	mov	r0, r4
  406914:	f001 f9b8 	bl	407c88 <__multadd>
  406918:	455e      	cmp	r6, fp
  40691a:	4681      	mov	r9, r0
  40691c:	4631      	mov	r1, r6
  40691e:	f04f 0300 	mov.w	r3, #0
  406922:	f04f 020a 	mov.w	r2, #10
  406926:	4620      	mov	r0, r4
  406928:	f000 81eb 	beq.w	406d02 <_dtoa_r+0x9fa>
  40692c:	f001 f9ac 	bl	407c88 <__multadd>
  406930:	4659      	mov	r1, fp
  406932:	4606      	mov	r6, r0
  406934:	2300      	movs	r3, #0
  406936:	220a      	movs	r2, #10
  406938:	4620      	mov	r0, r4
  40693a:	f001 f9a5 	bl	407c88 <__multadd>
  40693e:	4647      	mov	r7, r8
  406940:	4683      	mov	fp, r0
  406942:	e7a3      	b.n	40688c <_dtoa_r+0x584>
  406944:	201c      	movs	r0, #28
  406946:	9b08      	ldr	r3, [sp, #32]
  406948:	4403      	add	r3, r0
  40694a:	9308      	str	r3, [sp, #32]
  40694c:	9b06      	ldr	r3, [sp, #24]
  40694e:	4403      	add	r3, r0
  406950:	4405      	add	r5, r0
  406952:	9306      	str	r3, [sp, #24]
  406954:	e763      	b.n	40681e <_dtoa_r+0x516>
  406956:	4641      	mov	r1, r8
  406958:	4648      	mov	r0, r9
  40695a:	f001 fb63 	bl	408024 <__mcmp>
  40695e:	2800      	cmp	r0, #0
  406960:	f6bf af73 	bge.w	40684a <_dtoa_r+0x542>
  406964:	9f02      	ldr	r7, [sp, #8]
  406966:	4649      	mov	r1, r9
  406968:	2300      	movs	r3, #0
  40696a:	220a      	movs	r2, #10
  40696c:	4620      	mov	r0, r4
  40696e:	3f01      	subs	r7, #1
  406970:	9702      	str	r7, [sp, #8]
  406972:	f001 f989 	bl	407c88 <__multadd>
  406976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406978:	4681      	mov	r9, r0
  40697a:	2b00      	cmp	r3, #0
  40697c:	f040 83b6 	bne.w	4070ec <_dtoa_r+0xde4>
  406980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406982:	2b00      	cmp	r3, #0
  406984:	f340 83bf 	ble.w	407106 <_dtoa_r+0xdfe>
  406988:	930a      	str	r3, [sp, #40]	; 0x28
  40698a:	f8dd b010 	ldr.w	fp, [sp, #16]
  40698e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406990:	465d      	mov	r5, fp
  406992:	e002      	b.n	40699a <_dtoa_r+0x692>
  406994:	f001 f978 	bl	407c88 <__multadd>
  406998:	4681      	mov	r9, r0
  40699a:	4641      	mov	r1, r8
  40699c:	4648      	mov	r0, r9
  40699e:	f7ff fc1f 	bl	4061e0 <quorem>
  4069a2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  4069a6:	f805 ab01 	strb.w	sl, [r5], #1
  4069aa:	eba5 030b 	sub.w	r3, r5, fp
  4069ae:	42bb      	cmp	r3, r7
  4069b0:	f04f 020a 	mov.w	r2, #10
  4069b4:	f04f 0300 	mov.w	r3, #0
  4069b8:	4649      	mov	r1, r9
  4069ba:	4620      	mov	r0, r4
  4069bc:	dbea      	blt.n	406994 <_dtoa_r+0x68c>
  4069be:	9b04      	ldr	r3, [sp, #16]
  4069c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4069c2:	2a01      	cmp	r2, #1
  4069c4:	bfac      	ite	ge
  4069c6:	189b      	addge	r3, r3, r2
  4069c8:	3301      	addlt	r3, #1
  4069ca:	461d      	mov	r5, r3
  4069cc:	f04f 0b00 	mov.w	fp, #0
  4069d0:	4649      	mov	r1, r9
  4069d2:	2201      	movs	r2, #1
  4069d4:	4620      	mov	r0, r4
  4069d6:	f001 fad3 	bl	407f80 <__lshift>
  4069da:	4641      	mov	r1, r8
  4069dc:	4681      	mov	r9, r0
  4069de:	f001 fb21 	bl	408024 <__mcmp>
  4069e2:	2800      	cmp	r0, #0
  4069e4:	f340 823d 	ble.w	406e62 <_dtoa_r+0xb5a>
  4069e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4069ec:	9904      	ldr	r1, [sp, #16]
  4069ee:	1e6b      	subs	r3, r5, #1
  4069f0:	e004      	b.n	4069fc <_dtoa_r+0x6f4>
  4069f2:	428b      	cmp	r3, r1
  4069f4:	f000 81ae 	beq.w	406d54 <_dtoa_r+0xa4c>
  4069f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4069fc:	2a39      	cmp	r2, #57	; 0x39
  4069fe:	f103 0501 	add.w	r5, r3, #1
  406a02:	d0f6      	beq.n	4069f2 <_dtoa_r+0x6ea>
  406a04:	3201      	adds	r2, #1
  406a06:	701a      	strb	r2, [r3, #0]
  406a08:	4641      	mov	r1, r8
  406a0a:	4620      	mov	r0, r4
  406a0c:	f001 f932 	bl	407c74 <_Bfree>
  406a10:	2e00      	cmp	r6, #0
  406a12:	f43f ae3d 	beq.w	406690 <_dtoa_r+0x388>
  406a16:	f1bb 0f00 	cmp.w	fp, #0
  406a1a:	d005      	beq.n	406a28 <_dtoa_r+0x720>
  406a1c:	45b3      	cmp	fp, r6
  406a1e:	d003      	beq.n	406a28 <_dtoa_r+0x720>
  406a20:	4659      	mov	r1, fp
  406a22:	4620      	mov	r0, r4
  406a24:	f001 f926 	bl	407c74 <_Bfree>
  406a28:	4631      	mov	r1, r6
  406a2a:	4620      	mov	r0, r4
  406a2c:	f001 f922 	bl	407c74 <_Bfree>
  406a30:	e62e      	b.n	406690 <_dtoa_r+0x388>
  406a32:	2300      	movs	r3, #0
  406a34:	930b      	str	r3, [sp, #44]	; 0x2c
  406a36:	9b02      	ldr	r3, [sp, #8]
  406a38:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406a3a:	4413      	add	r3, r2
  406a3c:	930f      	str	r3, [sp, #60]	; 0x3c
  406a3e:	3301      	adds	r3, #1
  406a40:	2b01      	cmp	r3, #1
  406a42:	461f      	mov	r7, r3
  406a44:	461e      	mov	r6, r3
  406a46:	930a      	str	r3, [sp, #40]	; 0x28
  406a48:	bfb8      	it	lt
  406a4a:	2701      	movlt	r7, #1
  406a4c:	2100      	movs	r1, #0
  406a4e:	2f17      	cmp	r7, #23
  406a50:	6461      	str	r1, [r4, #68]	; 0x44
  406a52:	d90a      	bls.n	406a6a <_dtoa_r+0x762>
  406a54:	2201      	movs	r2, #1
  406a56:	2304      	movs	r3, #4
  406a58:	005b      	lsls	r3, r3, #1
  406a5a:	f103 0014 	add.w	r0, r3, #20
  406a5e:	4287      	cmp	r7, r0
  406a60:	4611      	mov	r1, r2
  406a62:	f102 0201 	add.w	r2, r2, #1
  406a66:	d2f7      	bcs.n	406a58 <_dtoa_r+0x750>
  406a68:	6461      	str	r1, [r4, #68]	; 0x44
  406a6a:	4620      	mov	r0, r4
  406a6c:	f001 f8dc 	bl	407c28 <_Balloc>
  406a70:	2e0e      	cmp	r6, #14
  406a72:	9004      	str	r0, [sp, #16]
  406a74:	6420      	str	r0, [r4, #64]	; 0x40
  406a76:	f63f ad41 	bhi.w	4064fc <_dtoa_r+0x1f4>
  406a7a:	2d00      	cmp	r5, #0
  406a7c:	f43f ad3e 	beq.w	4064fc <_dtoa_r+0x1f4>
  406a80:	9902      	ldr	r1, [sp, #8]
  406a82:	2900      	cmp	r1, #0
  406a84:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  406a88:	f340 8202 	ble.w	406e90 <_dtoa_r+0xb88>
  406a8c:	4bb8      	ldr	r3, [pc, #736]	; (406d70 <_dtoa_r+0xa68>)
  406a8e:	f001 020f 	and.w	r2, r1, #15
  406a92:	110d      	asrs	r5, r1, #4
  406a94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406a98:	06e9      	lsls	r1, r5, #27
  406a9a:	e9d3 6700 	ldrd	r6, r7, [r3]
  406a9e:	f140 81ae 	bpl.w	406dfe <_dtoa_r+0xaf6>
  406aa2:	4bb4      	ldr	r3, [pc, #720]	; (406d74 <_dtoa_r+0xa6c>)
  406aa4:	4650      	mov	r0, sl
  406aa6:	4659      	mov	r1, fp
  406aa8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  406aac:	f002 f9ba 	bl	408e24 <__aeabi_ddiv>
  406ab0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  406ab4:	f005 050f 	and.w	r5, r5, #15
  406ab8:	f04f 0a03 	mov.w	sl, #3
  406abc:	b18d      	cbz	r5, 406ae2 <_dtoa_r+0x7da>
  406abe:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 406d74 <_dtoa_r+0xa6c>
  406ac2:	07ea      	lsls	r2, r5, #31
  406ac4:	d509      	bpl.n	406ada <_dtoa_r+0x7d2>
  406ac6:	4630      	mov	r0, r6
  406ac8:	4639      	mov	r1, r7
  406aca:	e9d8 2300 	ldrd	r2, r3, [r8]
  406ace:	f002 f87f 	bl	408bd0 <__aeabi_dmul>
  406ad2:	f10a 0a01 	add.w	sl, sl, #1
  406ad6:	4606      	mov	r6, r0
  406ad8:	460f      	mov	r7, r1
  406ada:	106d      	asrs	r5, r5, #1
  406adc:	f108 0808 	add.w	r8, r8, #8
  406ae0:	d1ef      	bne.n	406ac2 <_dtoa_r+0x7ba>
  406ae2:	463b      	mov	r3, r7
  406ae4:	4632      	mov	r2, r6
  406ae6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406aea:	f002 f99b 	bl	408e24 <__aeabi_ddiv>
  406aee:	4607      	mov	r7, r0
  406af0:	4688      	mov	r8, r1
  406af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406af4:	b143      	cbz	r3, 406b08 <_dtoa_r+0x800>
  406af6:	2200      	movs	r2, #0
  406af8:	4b9f      	ldr	r3, [pc, #636]	; (406d78 <_dtoa_r+0xa70>)
  406afa:	4638      	mov	r0, r7
  406afc:	4641      	mov	r1, r8
  406afe:	f002 fad9 	bl	4090b4 <__aeabi_dcmplt>
  406b02:	2800      	cmp	r0, #0
  406b04:	f040 8286 	bne.w	407014 <_dtoa_r+0xd0c>
  406b08:	4650      	mov	r0, sl
  406b0a:	f7fd f83d 	bl	403b88 <__aeabi_i2d>
  406b0e:	463a      	mov	r2, r7
  406b10:	4643      	mov	r3, r8
  406b12:	f002 f85d 	bl	408bd0 <__aeabi_dmul>
  406b16:	4b99      	ldr	r3, [pc, #612]	; (406d7c <_dtoa_r+0xa74>)
  406b18:	2200      	movs	r2, #0
  406b1a:	f7fc fee9 	bl	4038f0 <__adddf3>
  406b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406b20:	4605      	mov	r5, r0
  406b22:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406b26:	2b00      	cmp	r3, #0
  406b28:	f000 813e 	beq.w	406da8 <_dtoa_r+0xaa0>
  406b2c:	9b02      	ldr	r3, [sp, #8]
  406b2e:	9315      	str	r3, [sp, #84]	; 0x54
  406b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406b32:	9312      	str	r3, [sp, #72]	; 0x48
  406b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406b36:	2b00      	cmp	r3, #0
  406b38:	f000 81fa 	beq.w	406f30 <_dtoa_r+0xc28>
  406b3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406b3e:	4b8c      	ldr	r3, [pc, #560]	; (406d70 <_dtoa_r+0xa68>)
  406b40:	498f      	ldr	r1, [pc, #572]	; (406d80 <_dtoa_r+0xa78>)
  406b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406b46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  406b4a:	2000      	movs	r0, #0
  406b4c:	f002 f96a 	bl	408e24 <__aeabi_ddiv>
  406b50:	462a      	mov	r2, r5
  406b52:	4633      	mov	r3, r6
  406b54:	f7fc feca 	bl	4038ec <__aeabi_dsub>
  406b58:	4682      	mov	sl, r0
  406b5a:	468b      	mov	fp, r1
  406b5c:	4638      	mov	r0, r7
  406b5e:	4641      	mov	r1, r8
  406b60:	f002 fae6 	bl	409130 <__aeabi_d2iz>
  406b64:	4605      	mov	r5, r0
  406b66:	f7fd f80f 	bl	403b88 <__aeabi_i2d>
  406b6a:	4602      	mov	r2, r0
  406b6c:	460b      	mov	r3, r1
  406b6e:	4638      	mov	r0, r7
  406b70:	4641      	mov	r1, r8
  406b72:	f7fc febb 	bl	4038ec <__aeabi_dsub>
  406b76:	3530      	adds	r5, #48	; 0x30
  406b78:	fa5f f885 	uxtb.w	r8, r5
  406b7c:	9d04      	ldr	r5, [sp, #16]
  406b7e:	4606      	mov	r6, r0
  406b80:	460f      	mov	r7, r1
  406b82:	f885 8000 	strb.w	r8, [r5]
  406b86:	4602      	mov	r2, r0
  406b88:	460b      	mov	r3, r1
  406b8a:	4650      	mov	r0, sl
  406b8c:	4659      	mov	r1, fp
  406b8e:	3501      	adds	r5, #1
  406b90:	f002 faae 	bl	4090f0 <__aeabi_dcmpgt>
  406b94:	2800      	cmp	r0, #0
  406b96:	d154      	bne.n	406c42 <_dtoa_r+0x93a>
  406b98:	4632      	mov	r2, r6
  406b9a:	463b      	mov	r3, r7
  406b9c:	2000      	movs	r0, #0
  406b9e:	4976      	ldr	r1, [pc, #472]	; (406d78 <_dtoa_r+0xa70>)
  406ba0:	f7fc fea4 	bl	4038ec <__aeabi_dsub>
  406ba4:	4602      	mov	r2, r0
  406ba6:	460b      	mov	r3, r1
  406ba8:	4650      	mov	r0, sl
  406baa:	4659      	mov	r1, fp
  406bac:	f002 faa0 	bl	4090f0 <__aeabi_dcmpgt>
  406bb0:	2800      	cmp	r0, #0
  406bb2:	f040 8270 	bne.w	407096 <_dtoa_r+0xd8e>
  406bb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406bb8:	2a01      	cmp	r2, #1
  406bba:	f000 8111 	beq.w	406de0 <_dtoa_r+0xad8>
  406bbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406bc0:	9a04      	ldr	r2, [sp, #16]
  406bc2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406bc6:	4413      	add	r3, r2
  406bc8:	4699      	mov	r9, r3
  406bca:	e00d      	b.n	406be8 <_dtoa_r+0x8e0>
  406bcc:	2000      	movs	r0, #0
  406bce:	496a      	ldr	r1, [pc, #424]	; (406d78 <_dtoa_r+0xa70>)
  406bd0:	f7fc fe8c 	bl	4038ec <__aeabi_dsub>
  406bd4:	4652      	mov	r2, sl
  406bd6:	465b      	mov	r3, fp
  406bd8:	f002 fa6c 	bl	4090b4 <__aeabi_dcmplt>
  406bdc:	2800      	cmp	r0, #0
  406bde:	f040 8258 	bne.w	407092 <_dtoa_r+0xd8a>
  406be2:	454d      	cmp	r5, r9
  406be4:	f000 80fa 	beq.w	406ddc <_dtoa_r+0xad4>
  406be8:	4650      	mov	r0, sl
  406bea:	4659      	mov	r1, fp
  406bec:	2200      	movs	r2, #0
  406bee:	4b65      	ldr	r3, [pc, #404]	; (406d84 <_dtoa_r+0xa7c>)
  406bf0:	f001 ffee 	bl	408bd0 <__aeabi_dmul>
  406bf4:	2200      	movs	r2, #0
  406bf6:	4b63      	ldr	r3, [pc, #396]	; (406d84 <_dtoa_r+0xa7c>)
  406bf8:	4682      	mov	sl, r0
  406bfa:	468b      	mov	fp, r1
  406bfc:	4630      	mov	r0, r6
  406bfe:	4639      	mov	r1, r7
  406c00:	f001 ffe6 	bl	408bd0 <__aeabi_dmul>
  406c04:	460f      	mov	r7, r1
  406c06:	4606      	mov	r6, r0
  406c08:	f002 fa92 	bl	409130 <__aeabi_d2iz>
  406c0c:	4680      	mov	r8, r0
  406c0e:	f7fc ffbb 	bl	403b88 <__aeabi_i2d>
  406c12:	4602      	mov	r2, r0
  406c14:	460b      	mov	r3, r1
  406c16:	4630      	mov	r0, r6
  406c18:	4639      	mov	r1, r7
  406c1a:	f7fc fe67 	bl	4038ec <__aeabi_dsub>
  406c1e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406c22:	fa5f f888 	uxtb.w	r8, r8
  406c26:	4652      	mov	r2, sl
  406c28:	465b      	mov	r3, fp
  406c2a:	f805 8b01 	strb.w	r8, [r5], #1
  406c2e:	4606      	mov	r6, r0
  406c30:	460f      	mov	r7, r1
  406c32:	f002 fa3f 	bl	4090b4 <__aeabi_dcmplt>
  406c36:	4632      	mov	r2, r6
  406c38:	463b      	mov	r3, r7
  406c3a:	2800      	cmp	r0, #0
  406c3c:	d0c6      	beq.n	406bcc <_dtoa_r+0x8c4>
  406c3e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406c42:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406c44:	9302      	str	r3, [sp, #8]
  406c46:	e523      	b.n	406690 <_dtoa_r+0x388>
  406c48:	2300      	movs	r3, #0
  406c4a:	930b      	str	r3, [sp, #44]	; 0x2c
  406c4c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406c4e:	2b00      	cmp	r3, #0
  406c50:	f340 80dc 	ble.w	406e0c <_dtoa_r+0xb04>
  406c54:	461f      	mov	r7, r3
  406c56:	461e      	mov	r6, r3
  406c58:	930f      	str	r3, [sp, #60]	; 0x3c
  406c5a:	930a      	str	r3, [sp, #40]	; 0x28
  406c5c:	e6f6      	b.n	406a4c <_dtoa_r+0x744>
  406c5e:	2301      	movs	r3, #1
  406c60:	930b      	str	r3, [sp, #44]	; 0x2c
  406c62:	e7f3      	b.n	406c4c <_dtoa_r+0x944>
  406c64:	f1ba 0f00 	cmp.w	sl, #0
  406c68:	f47f ada8 	bne.w	4067bc <_dtoa_r+0x4b4>
  406c6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406c70:	2b00      	cmp	r3, #0
  406c72:	f47f adba 	bne.w	4067ea <_dtoa_r+0x4e2>
  406c76:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  406c7a:	0d3f      	lsrs	r7, r7, #20
  406c7c:	053f      	lsls	r7, r7, #20
  406c7e:	2f00      	cmp	r7, #0
  406c80:	f000 820d 	beq.w	40709e <_dtoa_r+0xd96>
  406c84:	9b08      	ldr	r3, [sp, #32]
  406c86:	3301      	adds	r3, #1
  406c88:	9308      	str	r3, [sp, #32]
  406c8a:	9b06      	ldr	r3, [sp, #24]
  406c8c:	3301      	adds	r3, #1
  406c8e:	9306      	str	r3, [sp, #24]
  406c90:	2301      	movs	r3, #1
  406c92:	930c      	str	r3, [sp, #48]	; 0x30
  406c94:	e5ab      	b.n	4067ee <_dtoa_r+0x4e6>
  406c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406c98:	2b00      	cmp	r3, #0
  406c9a:	f73f ac42 	bgt.w	406522 <_dtoa_r+0x21a>
  406c9e:	f040 8221 	bne.w	4070e4 <_dtoa_r+0xddc>
  406ca2:	2200      	movs	r2, #0
  406ca4:	4b38      	ldr	r3, [pc, #224]	; (406d88 <_dtoa_r+0xa80>)
  406ca6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406caa:	f001 ff91 	bl	408bd0 <__aeabi_dmul>
  406cae:	4652      	mov	r2, sl
  406cb0:	465b      	mov	r3, fp
  406cb2:	f002 fa13 	bl	4090dc <__aeabi_dcmpge>
  406cb6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  406cba:	4646      	mov	r6, r8
  406cbc:	2800      	cmp	r0, #0
  406cbe:	d041      	beq.n	406d44 <_dtoa_r+0xa3c>
  406cc0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406cc2:	9d04      	ldr	r5, [sp, #16]
  406cc4:	43db      	mvns	r3, r3
  406cc6:	9302      	str	r3, [sp, #8]
  406cc8:	4641      	mov	r1, r8
  406cca:	4620      	mov	r0, r4
  406ccc:	f000 ffd2 	bl	407c74 <_Bfree>
  406cd0:	2e00      	cmp	r6, #0
  406cd2:	f43f acdd 	beq.w	406690 <_dtoa_r+0x388>
  406cd6:	e6a7      	b.n	406a28 <_dtoa_r+0x720>
  406cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406cda:	4649      	mov	r1, r9
  406cdc:	4620      	mov	r0, r4
  406cde:	f001 f8ff 	bl	407ee0 <__pow5mult>
  406ce2:	4681      	mov	r9, r0
  406ce4:	e558      	b.n	406798 <_dtoa_r+0x490>
  406ce6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  406ce8:	2a00      	cmp	r2, #0
  406cea:	f000 8187 	beq.w	406ffc <_dtoa_r+0xcf4>
  406cee:	f203 4333 	addw	r3, r3, #1075	; 0x433
  406cf2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406cf4:	9d08      	ldr	r5, [sp, #32]
  406cf6:	e4f2      	b.n	4066de <_dtoa_r+0x3d6>
  406cf8:	f1ba 0f00 	cmp.w	sl, #0
  406cfc:	f47f ad75 	bne.w	4067ea <_dtoa_r+0x4e2>
  406d00:	e7b4      	b.n	406c6c <_dtoa_r+0x964>
  406d02:	f000 ffc1 	bl	407c88 <__multadd>
  406d06:	4647      	mov	r7, r8
  406d08:	4606      	mov	r6, r0
  406d0a:	4683      	mov	fp, r0
  406d0c:	e5be      	b.n	40688c <_dtoa_r+0x584>
  406d0e:	4601      	mov	r1, r0
  406d10:	4620      	mov	r0, r4
  406d12:	9306      	str	r3, [sp, #24]
  406d14:	f000 ffae 	bl	407c74 <_Bfree>
  406d18:	2201      	movs	r2, #1
  406d1a:	9b06      	ldr	r3, [sp, #24]
  406d1c:	e5e0      	b.n	4068e0 <_dtoa_r+0x5d8>
  406d1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406d20:	2b02      	cmp	r3, #2
  406d22:	f77f ad96 	ble.w	406852 <_dtoa_r+0x54a>
  406d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406d28:	2b00      	cmp	r3, #0
  406d2a:	d1c9      	bne.n	406cc0 <_dtoa_r+0x9b8>
  406d2c:	4641      	mov	r1, r8
  406d2e:	2205      	movs	r2, #5
  406d30:	4620      	mov	r0, r4
  406d32:	f000 ffa9 	bl	407c88 <__multadd>
  406d36:	4601      	mov	r1, r0
  406d38:	4680      	mov	r8, r0
  406d3a:	4648      	mov	r0, r9
  406d3c:	f001 f972 	bl	408024 <__mcmp>
  406d40:	2800      	cmp	r0, #0
  406d42:	ddbd      	ble.n	406cc0 <_dtoa_r+0x9b8>
  406d44:	9a02      	ldr	r2, [sp, #8]
  406d46:	9904      	ldr	r1, [sp, #16]
  406d48:	2331      	movs	r3, #49	; 0x31
  406d4a:	3201      	adds	r2, #1
  406d4c:	9202      	str	r2, [sp, #8]
  406d4e:	700b      	strb	r3, [r1, #0]
  406d50:	1c4d      	adds	r5, r1, #1
  406d52:	e7b9      	b.n	406cc8 <_dtoa_r+0x9c0>
  406d54:	9a02      	ldr	r2, [sp, #8]
  406d56:	3201      	adds	r2, #1
  406d58:	9202      	str	r2, [sp, #8]
  406d5a:	9a04      	ldr	r2, [sp, #16]
  406d5c:	2331      	movs	r3, #49	; 0x31
  406d5e:	7013      	strb	r3, [r2, #0]
  406d60:	e652      	b.n	406a08 <_dtoa_r+0x700>
  406d62:	2301      	movs	r3, #1
  406d64:	930b      	str	r3, [sp, #44]	; 0x2c
  406d66:	e666      	b.n	406a36 <_dtoa_r+0x72e>
  406d68:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406d6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406d6e:	e48f      	b.n	406690 <_dtoa_r+0x388>
  406d70:	004092f8 	.word	0x004092f8
  406d74:	004092d0 	.word	0x004092d0
  406d78:	3ff00000 	.word	0x3ff00000
  406d7c:	401c0000 	.word	0x401c0000
  406d80:	3fe00000 	.word	0x3fe00000
  406d84:	40240000 	.word	0x40240000
  406d88:	40140000 	.word	0x40140000
  406d8c:	4650      	mov	r0, sl
  406d8e:	f7fc fefb 	bl	403b88 <__aeabi_i2d>
  406d92:	463a      	mov	r2, r7
  406d94:	4643      	mov	r3, r8
  406d96:	f001 ff1b 	bl	408bd0 <__aeabi_dmul>
  406d9a:	2200      	movs	r2, #0
  406d9c:	4bc1      	ldr	r3, [pc, #772]	; (4070a4 <_dtoa_r+0xd9c>)
  406d9e:	f7fc fda7 	bl	4038f0 <__adddf3>
  406da2:	4605      	mov	r5, r0
  406da4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406da8:	4641      	mov	r1, r8
  406daa:	2200      	movs	r2, #0
  406dac:	4bbe      	ldr	r3, [pc, #760]	; (4070a8 <_dtoa_r+0xda0>)
  406dae:	4638      	mov	r0, r7
  406db0:	f7fc fd9c 	bl	4038ec <__aeabi_dsub>
  406db4:	462a      	mov	r2, r5
  406db6:	4633      	mov	r3, r6
  406db8:	4682      	mov	sl, r0
  406dba:	468b      	mov	fp, r1
  406dbc:	f002 f998 	bl	4090f0 <__aeabi_dcmpgt>
  406dc0:	4680      	mov	r8, r0
  406dc2:	2800      	cmp	r0, #0
  406dc4:	f040 8110 	bne.w	406fe8 <_dtoa_r+0xce0>
  406dc8:	462a      	mov	r2, r5
  406dca:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  406dce:	4650      	mov	r0, sl
  406dd0:	4659      	mov	r1, fp
  406dd2:	f002 f96f 	bl	4090b4 <__aeabi_dcmplt>
  406dd6:	b118      	cbz	r0, 406de0 <_dtoa_r+0xad8>
  406dd8:	4646      	mov	r6, r8
  406dda:	e771      	b.n	406cc0 <_dtoa_r+0x9b8>
  406ddc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406de0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  406de4:	f7ff bb8a 	b.w	4064fc <_dtoa_r+0x1f4>
  406de8:	9804      	ldr	r0, [sp, #16]
  406dea:	f7ff babb 	b.w	406364 <_dtoa_r+0x5c>
  406dee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  406df2:	970c      	str	r7, [sp, #48]	; 0x30
  406df4:	1afb      	subs	r3, r7, r3
  406df6:	441a      	add	r2, r3
  406df8:	920d      	str	r2, [sp, #52]	; 0x34
  406dfa:	2700      	movs	r7, #0
  406dfc:	e469      	b.n	4066d2 <_dtoa_r+0x3ca>
  406dfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  406e02:	f04f 0a02 	mov.w	sl, #2
  406e06:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  406e0a:	e657      	b.n	406abc <_dtoa_r+0x7b4>
  406e0c:	2100      	movs	r1, #0
  406e0e:	2301      	movs	r3, #1
  406e10:	6461      	str	r1, [r4, #68]	; 0x44
  406e12:	4620      	mov	r0, r4
  406e14:	9325      	str	r3, [sp, #148]	; 0x94
  406e16:	f000 ff07 	bl	407c28 <_Balloc>
  406e1a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406e1c:	9004      	str	r0, [sp, #16]
  406e1e:	6420      	str	r0, [r4, #64]	; 0x40
  406e20:	930a      	str	r3, [sp, #40]	; 0x28
  406e22:	930f      	str	r3, [sp, #60]	; 0x3c
  406e24:	e629      	b.n	406a7a <_dtoa_r+0x772>
  406e26:	2a00      	cmp	r2, #0
  406e28:	46d0      	mov	r8, sl
  406e2a:	f8cd b018 	str.w	fp, [sp, #24]
  406e2e:	469a      	mov	sl, r3
  406e30:	dd11      	ble.n	406e56 <_dtoa_r+0xb4e>
  406e32:	4649      	mov	r1, r9
  406e34:	2201      	movs	r2, #1
  406e36:	4620      	mov	r0, r4
  406e38:	f001 f8a2 	bl	407f80 <__lshift>
  406e3c:	4641      	mov	r1, r8
  406e3e:	4681      	mov	r9, r0
  406e40:	f001 f8f0 	bl	408024 <__mcmp>
  406e44:	2800      	cmp	r0, #0
  406e46:	f340 8146 	ble.w	4070d6 <_dtoa_r+0xdce>
  406e4a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  406e4e:	f000 8106 	beq.w	40705e <_dtoa_r+0xd56>
  406e52:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406e56:	46b3      	mov	fp, r6
  406e58:	f887 a000 	strb.w	sl, [r7]
  406e5c:	1c7d      	adds	r5, r7, #1
  406e5e:	9e06      	ldr	r6, [sp, #24]
  406e60:	e5d2      	b.n	406a08 <_dtoa_r+0x700>
  406e62:	d104      	bne.n	406e6e <_dtoa_r+0xb66>
  406e64:	f01a 0f01 	tst.w	sl, #1
  406e68:	d001      	beq.n	406e6e <_dtoa_r+0xb66>
  406e6a:	e5bd      	b.n	4069e8 <_dtoa_r+0x6e0>
  406e6c:	4615      	mov	r5, r2
  406e6e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406e72:	2b30      	cmp	r3, #48	; 0x30
  406e74:	f105 32ff 	add.w	r2, r5, #4294967295
  406e78:	d0f8      	beq.n	406e6c <_dtoa_r+0xb64>
  406e7a:	e5c5      	b.n	406a08 <_dtoa_r+0x700>
  406e7c:	9904      	ldr	r1, [sp, #16]
  406e7e:	2230      	movs	r2, #48	; 0x30
  406e80:	700a      	strb	r2, [r1, #0]
  406e82:	9a02      	ldr	r2, [sp, #8]
  406e84:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406e88:	3201      	adds	r2, #1
  406e8a:	9202      	str	r2, [sp, #8]
  406e8c:	f7ff bbfc 	b.w	406688 <_dtoa_r+0x380>
  406e90:	f000 80bb 	beq.w	40700a <_dtoa_r+0xd02>
  406e94:	9b02      	ldr	r3, [sp, #8]
  406e96:	425d      	negs	r5, r3
  406e98:	4b84      	ldr	r3, [pc, #528]	; (4070ac <_dtoa_r+0xda4>)
  406e9a:	f005 020f 	and.w	r2, r5, #15
  406e9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
  406ea6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  406eaa:	f001 fe91 	bl	408bd0 <__aeabi_dmul>
  406eae:	112d      	asrs	r5, r5, #4
  406eb0:	4607      	mov	r7, r0
  406eb2:	4688      	mov	r8, r1
  406eb4:	f000 812c 	beq.w	407110 <_dtoa_r+0xe08>
  406eb8:	4e7d      	ldr	r6, [pc, #500]	; (4070b0 <_dtoa_r+0xda8>)
  406eba:	f04f 0a02 	mov.w	sl, #2
  406ebe:	07eb      	lsls	r3, r5, #31
  406ec0:	d509      	bpl.n	406ed6 <_dtoa_r+0xbce>
  406ec2:	4638      	mov	r0, r7
  406ec4:	4641      	mov	r1, r8
  406ec6:	e9d6 2300 	ldrd	r2, r3, [r6]
  406eca:	f001 fe81 	bl	408bd0 <__aeabi_dmul>
  406ece:	f10a 0a01 	add.w	sl, sl, #1
  406ed2:	4607      	mov	r7, r0
  406ed4:	4688      	mov	r8, r1
  406ed6:	106d      	asrs	r5, r5, #1
  406ed8:	f106 0608 	add.w	r6, r6, #8
  406edc:	d1ef      	bne.n	406ebe <_dtoa_r+0xbb6>
  406ede:	e608      	b.n	406af2 <_dtoa_r+0x7ea>
  406ee0:	6871      	ldr	r1, [r6, #4]
  406ee2:	4620      	mov	r0, r4
  406ee4:	f000 fea0 	bl	407c28 <_Balloc>
  406ee8:	6933      	ldr	r3, [r6, #16]
  406eea:	3302      	adds	r3, #2
  406eec:	009a      	lsls	r2, r3, #2
  406eee:	4605      	mov	r5, r0
  406ef0:	f106 010c 	add.w	r1, r6, #12
  406ef4:	300c      	adds	r0, #12
  406ef6:	f7fd fb1d 	bl	404534 <memcpy>
  406efa:	4629      	mov	r1, r5
  406efc:	2201      	movs	r2, #1
  406efe:	4620      	mov	r0, r4
  406f00:	f001 f83e 	bl	407f80 <__lshift>
  406f04:	9006      	str	r0, [sp, #24]
  406f06:	e4b5      	b.n	406874 <_dtoa_r+0x56c>
  406f08:	2b39      	cmp	r3, #57	; 0x39
  406f0a:	f8cd b018 	str.w	fp, [sp, #24]
  406f0e:	46d0      	mov	r8, sl
  406f10:	f000 80a5 	beq.w	40705e <_dtoa_r+0xd56>
  406f14:	f103 0a01 	add.w	sl, r3, #1
  406f18:	46b3      	mov	fp, r6
  406f1a:	f887 a000 	strb.w	sl, [r7]
  406f1e:	1c7d      	adds	r5, r7, #1
  406f20:	9e06      	ldr	r6, [sp, #24]
  406f22:	e571      	b.n	406a08 <_dtoa_r+0x700>
  406f24:	465a      	mov	r2, fp
  406f26:	46d0      	mov	r8, sl
  406f28:	46b3      	mov	fp, r6
  406f2a:	469a      	mov	sl, r3
  406f2c:	4616      	mov	r6, r2
  406f2e:	e54f      	b.n	4069d0 <_dtoa_r+0x6c8>
  406f30:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406f32:	495e      	ldr	r1, [pc, #376]	; (4070ac <_dtoa_r+0xda4>)
  406f34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  406f38:	462a      	mov	r2, r5
  406f3a:	4633      	mov	r3, r6
  406f3c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  406f40:	f001 fe46 	bl	408bd0 <__aeabi_dmul>
  406f44:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  406f48:	4638      	mov	r0, r7
  406f4a:	4641      	mov	r1, r8
  406f4c:	f002 f8f0 	bl	409130 <__aeabi_d2iz>
  406f50:	4605      	mov	r5, r0
  406f52:	f7fc fe19 	bl	403b88 <__aeabi_i2d>
  406f56:	460b      	mov	r3, r1
  406f58:	4602      	mov	r2, r0
  406f5a:	4641      	mov	r1, r8
  406f5c:	4638      	mov	r0, r7
  406f5e:	f7fc fcc5 	bl	4038ec <__aeabi_dsub>
  406f62:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406f64:	460f      	mov	r7, r1
  406f66:	9904      	ldr	r1, [sp, #16]
  406f68:	3530      	adds	r5, #48	; 0x30
  406f6a:	2b01      	cmp	r3, #1
  406f6c:	700d      	strb	r5, [r1, #0]
  406f6e:	4606      	mov	r6, r0
  406f70:	f101 0501 	add.w	r5, r1, #1
  406f74:	d026      	beq.n	406fc4 <_dtoa_r+0xcbc>
  406f76:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406f78:	9a04      	ldr	r2, [sp, #16]
  406f7a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4070b8 <_dtoa_r+0xdb0>
  406f7e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406f82:	4413      	add	r3, r2
  406f84:	f04f 0a00 	mov.w	sl, #0
  406f88:	4699      	mov	r9, r3
  406f8a:	4652      	mov	r2, sl
  406f8c:	465b      	mov	r3, fp
  406f8e:	4630      	mov	r0, r6
  406f90:	4639      	mov	r1, r7
  406f92:	f001 fe1d 	bl	408bd0 <__aeabi_dmul>
  406f96:	460f      	mov	r7, r1
  406f98:	4606      	mov	r6, r0
  406f9a:	f002 f8c9 	bl	409130 <__aeabi_d2iz>
  406f9e:	4680      	mov	r8, r0
  406fa0:	f7fc fdf2 	bl	403b88 <__aeabi_i2d>
  406fa4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  406fa8:	4602      	mov	r2, r0
  406faa:	460b      	mov	r3, r1
  406fac:	4630      	mov	r0, r6
  406fae:	4639      	mov	r1, r7
  406fb0:	f7fc fc9c 	bl	4038ec <__aeabi_dsub>
  406fb4:	f805 8b01 	strb.w	r8, [r5], #1
  406fb8:	454d      	cmp	r5, r9
  406fba:	4606      	mov	r6, r0
  406fbc:	460f      	mov	r7, r1
  406fbe:	d1e4      	bne.n	406f8a <_dtoa_r+0xc82>
  406fc0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  406fc4:	4b3b      	ldr	r3, [pc, #236]	; (4070b4 <_dtoa_r+0xdac>)
  406fc6:	2200      	movs	r2, #0
  406fc8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  406fcc:	f7fc fc90 	bl	4038f0 <__adddf3>
  406fd0:	4632      	mov	r2, r6
  406fd2:	463b      	mov	r3, r7
  406fd4:	f002 f86e 	bl	4090b4 <__aeabi_dcmplt>
  406fd8:	2800      	cmp	r0, #0
  406fda:	d046      	beq.n	40706a <_dtoa_r+0xd62>
  406fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  406fde:	9302      	str	r3, [sp, #8]
  406fe0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406fe4:	f7ff bb43 	b.w	40666e <_dtoa_r+0x366>
  406fe8:	f04f 0800 	mov.w	r8, #0
  406fec:	4646      	mov	r6, r8
  406fee:	e6a9      	b.n	406d44 <_dtoa_r+0xa3c>
  406ff0:	9b08      	ldr	r3, [sp, #32]
  406ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406ff4:	1a9d      	subs	r5, r3, r2
  406ff6:	2300      	movs	r3, #0
  406ff8:	f7ff bb71 	b.w	4066de <_dtoa_r+0x3d6>
  406ffc:	9b18      	ldr	r3, [sp, #96]	; 0x60
  406ffe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407000:	9d08      	ldr	r5, [sp, #32]
  407002:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  407006:	f7ff bb6a 	b.w	4066de <_dtoa_r+0x3d6>
  40700a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40700e:	f04f 0a02 	mov.w	sl, #2
  407012:	e56e      	b.n	406af2 <_dtoa_r+0x7ea>
  407014:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407016:	2b00      	cmp	r3, #0
  407018:	f43f aeb8 	beq.w	406d8c <_dtoa_r+0xa84>
  40701c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40701e:	2b00      	cmp	r3, #0
  407020:	f77f aede 	ble.w	406de0 <_dtoa_r+0xad8>
  407024:	2200      	movs	r2, #0
  407026:	4b24      	ldr	r3, [pc, #144]	; (4070b8 <_dtoa_r+0xdb0>)
  407028:	4638      	mov	r0, r7
  40702a:	4641      	mov	r1, r8
  40702c:	f001 fdd0 	bl	408bd0 <__aeabi_dmul>
  407030:	4607      	mov	r7, r0
  407032:	4688      	mov	r8, r1
  407034:	f10a 0001 	add.w	r0, sl, #1
  407038:	f7fc fda6 	bl	403b88 <__aeabi_i2d>
  40703c:	463a      	mov	r2, r7
  40703e:	4643      	mov	r3, r8
  407040:	f001 fdc6 	bl	408bd0 <__aeabi_dmul>
  407044:	2200      	movs	r2, #0
  407046:	4b17      	ldr	r3, [pc, #92]	; (4070a4 <_dtoa_r+0xd9c>)
  407048:	f7fc fc52 	bl	4038f0 <__adddf3>
  40704c:	9a02      	ldr	r2, [sp, #8]
  40704e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407050:	9312      	str	r3, [sp, #72]	; 0x48
  407052:	3a01      	subs	r2, #1
  407054:	4605      	mov	r5, r0
  407056:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40705a:	9215      	str	r2, [sp, #84]	; 0x54
  40705c:	e56a      	b.n	406b34 <_dtoa_r+0x82c>
  40705e:	2239      	movs	r2, #57	; 0x39
  407060:	46b3      	mov	fp, r6
  407062:	703a      	strb	r2, [r7, #0]
  407064:	9e06      	ldr	r6, [sp, #24]
  407066:	1c7d      	adds	r5, r7, #1
  407068:	e4c0      	b.n	4069ec <_dtoa_r+0x6e4>
  40706a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40706e:	2000      	movs	r0, #0
  407070:	4910      	ldr	r1, [pc, #64]	; (4070b4 <_dtoa_r+0xdac>)
  407072:	f7fc fc3b 	bl	4038ec <__aeabi_dsub>
  407076:	4632      	mov	r2, r6
  407078:	463b      	mov	r3, r7
  40707a:	f002 f839 	bl	4090f0 <__aeabi_dcmpgt>
  40707e:	b908      	cbnz	r0, 407084 <_dtoa_r+0xd7c>
  407080:	e6ae      	b.n	406de0 <_dtoa_r+0xad8>
  407082:	4615      	mov	r5, r2
  407084:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407088:	2b30      	cmp	r3, #48	; 0x30
  40708a:	f105 32ff 	add.w	r2, r5, #4294967295
  40708e:	d0f8      	beq.n	407082 <_dtoa_r+0xd7a>
  407090:	e5d7      	b.n	406c42 <_dtoa_r+0x93a>
  407092:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  407096:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407098:	9302      	str	r3, [sp, #8]
  40709a:	f7ff bae8 	b.w	40666e <_dtoa_r+0x366>
  40709e:	970c      	str	r7, [sp, #48]	; 0x30
  4070a0:	f7ff bba5 	b.w	4067ee <_dtoa_r+0x4e6>
  4070a4:	401c0000 	.word	0x401c0000
  4070a8:	40140000 	.word	0x40140000
  4070ac:	004092f8 	.word	0x004092f8
  4070b0:	004092d0 	.word	0x004092d0
  4070b4:	3fe00000 	.word	0x3fe00000
  4070b8:	40240000 	.word	0x40240000
  4070bc:	2b39      	cmp	r3, #57	; 0x39
  4070be:	f8cd b018 	str.w	fp, [sp, #24]
  4070c2:	46d0      	mov	r8, sl
  4070c4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4070c8:	469a      	mov	sl, r3
  4070ca:	d0c8      	beq.n	40705e <_dtoa_r+0xd56>
  4070cc:	f1bb 0f00 	cmp.w	fp, #0
  4070d0:	f73f aebf 	bgt.w	406e52 <_dtoa_r+0xb4a>
  4070d4:	e6bf      	b.n	406e56 <_dtoa_r+0xb4e>
  4070d6:	f47f aebe 	bne.w	406e56 <_dtoa_r+0xb4e>
  4070da:	f01a 0f01 	tst.w	sl, #1
  4070de:	f43f aeba 	beq.w	406e56 <_dtoa_r+0xb4e>
  4070e2:	e6b2      	b.n	406e4a <_dtoa_r+0xb42>
  4070e4:	f04f 0800 	mov.w	r8, #0
  4070e8:	4646      	mov	r6, r8
  4070ea:	e5e9      	b.n	406cc0 <_dtoa_r+0x9b8>
  4070ec:	4631      	mov	r1, r6
  4070ee:	2300      	movs	r3, #0
  4070f0:	220a      	movs	r2, #10
  4070f2:	4620      	mov	r0, r4
  4070f4:	f000 fdc8 	bl	407c88 <__multadd>
  4070f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4070fa:	2b00      	cmp	r3, #0
  4070fc:	4606      	mov	r6, r0
  4070fe:	dd0a      	ble.n	407116 <_dtoa_r+0xe0e>
  407100:	930a      	str	r3, [sp, #40]	; 0x28
  407102:	f7ff bbaa 	b.w	40685a <_dtoa_r+0x552>
  407106:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407108:	2b02      	cmp	r3, #2
  40710a:	dc23      	bgt.n	407154 <_dtoa_r+0xe4c>
  40710c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40710e:	e43b      	b.n	406988 <_dtoa_r+0x680>
  407110:	f04f 0a02 	mov.w	sl, #2
  407114:	e4ed      	b.n	406af2 <_dtoa_r+0x7ea>
  407116:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407118:	2b02      	cmp	r3, #2
  40711a:	dc1b      	bgt.n	407154 <_dtoa_r+0xe4c>
  40711c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40711e:	e7ef      	b.n	407100 <_dtoa_r+0xdf8>
  407120:	2500      	movs	r5, #0
  407122:	6465      	str	r5, [r4, #68]	; 0x44
  407124:	4629      	mov	r1, r5
  407126:	4620      	mov	r0, r4
  407128:	f000 fd7e 	bl	407c28 <_Balloc>
  40712c:	f04f 33ff 	mov.w	r3, #4294967295
  407130:	930a      	str	r3, [sp, #40]	; 0x28
  407132:	930f      	str	r3, [sp, #60]	; 0x3c
  407134:	2301      	movs	r3, #1
  407136:	9004      	str	r0, [sp, #16]
  407138:	9525      	str	r5, [sp, #148]	; 0x94
  40713a:	6420      	str	r0, [r4, #64]	; 0x40
  40713c:	930b      	str	r3, [sp, #44]	; 0x2c
  40713e:	f7ff b9dd 	b.w	4064fc <_dtoa_r+0x1f4>
  407142:	2501      	movs	r5, #1
  407144:	f7ff b9a5 	b.w	406492 <_dtoa_r+0x18a>
  407148:	f43f ab69 	beq.w	40681e <_dtoa_r+0x516>
  40714c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  407150:	f7ff bbf9 	b.w	406946 <_dtoa_r+0x63e>
  407154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407156:	930a      	str	r3, [sp, #40]	; 0x28
  407158:	e5e5      	b.n	406d26 <_dtoa_r+0xa1e>
  40715a:	bf00      	nop

0040715c <__sflush_r>:
  40715c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407160:	b29a      	uxth	r2, r3
  407162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407166:	460d      	mov	r5, r1
  407168:	0711      	lsls	r1, r2, #28
  40716a:	4680      	mov	r8, r0
  40716c:	d43a      	bmi.n	4071e4 <__sflush_r+0x88>
  40716e:	686a      	ldr	r2, [r5, #4]
  407170:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407174:	2a00      	cmp	r2, #0
  407176:	81ab      	strh	r3, [r5, #12]
  407178:	dd6f      	ble.n	40725a <__sflush_r+0xfe>
  40717a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40717c:	2c00      	cmp	r4, #0
  40717e:	d049      	beq.n	407214 <__sflush_r+0xb8>
  407180:	2200      	movs	r2, #0
  407182:	b29b      	uxth	r3, r3
  407184:	f8d8 6000 	ldr.w	r6, [r8]
  407188:	f8c8 2000 	str.w	r2, [r8]
  40718c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  407190:	d067      	beq.n	407262 <__sflush_r+0x106>
  407192:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407194:	075f      	lsls	r7, r3, #29
  407196:	d505      	bpl.n	4071a4 <__sflush_r+0x48>
  407198:	6869      	ldr	r1, [r5, #4]
  40719a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40719c:	1a52      	subs	r2, r2, r1
  40719e:	b10b      	cbz	r3, 4071a4 <__sflush_r+0x48>
  4071a0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4071a2:	1ad2      	subs	r2, r2, r3
  4071a4:	2300      	movs	r3, #0
  4071a6:	69e9      	ldr	r1, [r5, #28]
  4071a8:	4640      	mov	r0, r8
  4071aa:	47a0      	blx	r4
  4071ac:	1c44      	adds	r4, r0, #1
  4071ae:	d03c      	beq.n	40722a <__sflush_r+0xce>
  4071b0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4071b4:	692a      	ldr	r2, [r5, #16]
  4071b6:	602a      	str	r2, [r5, #0]
  4071b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4071bc:	2200      	movs	r2, #0
  4071be:	81ab      	strh	r3, [r5, #12]
  4071c0:	04db      	lsls	r3, r3, #19
  4071c2:	606a      	str	r2, [r5, #4]
  4071c4:	d447      	bmi.n	407256 <__sflush_r+0xfa>
  4071c6:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4071c8:	f8c8 6000 	str.w	r6, [r8]
  4071cc:	b311      	cbz	r1, 407214 <__sflush_r+0xb8>
  4071ce:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4071d2:	4299      	cmp	r1, r3
  4071d4:	d002      	beq.n	4071dc <__sflush_r+0x80>
  4071d6:	4640      	mov	r0, r8
  4071d8:	f000 f95a 	bl	407490 <_free_r>
  4071dc:	2000      	movs	r0, #0
  4071de:	6328      	str	r0, [r5, #48]	; 0x30
  4071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4071e4:	692e      	ldr	r6, [r5, #16]
  4071e6:	b1ae      	cbz	r6, 407214 <__sflush_r+0xb8>
  4071e8:	682c      	ldr	r4, [r5, #0]
  4071ea:	602e      	str	r6, [r5, #0]
  4071ec:	0791      	lsls	r1, r2, #30
  4071ee:	bf0c      	ite	eq
  4071f0:	696b      	ldreq	r3, [r5, #20]
  4071f2:	2300      	movne	r3, #0
  4071f4:	1ba4      	subs	r4, r4, r6
  4071f6:	60ab      	str	r3, [r5, #8]
  4071f8:	e00a      	b.n	407210 <__sflush_r+0xb4>
  4071fa:	4623      	mov	r3, r4
  4071fc:	4632      	mov	r2, r6
  4071fe:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407200:	69e9      	ldr	r1, [r5, #28]
  407202:	4640      	mov	r0, r8
  407204:	47b8      	blx	r7
  407206:	2800      	cmp	r0, #0
  407208:	eba4 0400 	sub.w	r4, r4, r0
  40720c:	4406      	add	r6, r0
  40720e:	dd04      	ble.n	40721a <__sflush_r+0xbe>
  407210:	2c00      	cmp	r4, #0
  407212:	dcf2      	bgt.n	4071fa <__sflush_r+0x9e>
  407214:	2000      	movs	r0, #0
  407216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40721a:	89ab      	ldrh	r3, [r5, #12]
  40721c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407220:	81ab      	strh	r3, [r5, #12]
  407222:	f04f 30ff 	mov.w	r0, #4294967295
  407226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40722a:	f8d8 4000 	ldr.w	r4, [r8]
  40722e:	2c1d      	cmp	r4, #29
  407230:	d8f3      	bhi.n	40721a <__sflush_r+0xbe>
  407232:	4b19      	ldr	r3, [pc, #100]	; (407298 <__sflush_r+0x13c>)
  407234:	40e3      	lsrs	r3, r4
  407236:	43db      	mvns	r3, r3
  407238:	f013 0301 	ands.w	r3, r3, #1
  40723c:	d1ed      	bne.n	40721a <__sflush_r+0xbe>
  40723e:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  407242:	606b      	str	r3, [r5, #4]
  407244:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407248:	6929      	ldr	r1, [r5, #16]
  40724a:	81ab      	strh	r3, [r5, #12]
  40724c:	04da      	lsls	r2, r3, #19
  40724e:	6029      	str	r1, [r5, #0]
  407250:	d5b9      	bpl.n	4071c6 <__sflush_r+0x6a>
  407252:	2c00      	cmp	r4, #0
  407254:	d1b7      	bne.n	4071c6 <__sflush_r+0x6a>
  407256:	6528      	str	r0, [r5, #80]	; 0x50
  407258:	e7b5      	b.n	4071c6 <__sflush_r+0x6a>
  40725a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40725c:	2a00      	cmp	r2, #0
  40725e:	dc8c      	bgt.n	40717a <__sflush_r+0x1e>
  407260:	e7d8      	b.n	407214 <__sflush_r+0xb8>
  407262:	2301      	movs	r3, #1
  407264:	69e9      	ldr	r1, [r5, #28]
  407266:	4640      	mov	r0, r8
  407268:	47a0      	blx	r4
  40726a:	1c43      	adds	r3, r0, #1
  40726c:	4602      	mov	r2, r0
  40726e:	d002      	beq.n	407276 <__sflush_r+0x11a>
  407270:	89ab      	ldrh	r3, [r5, #12]
  407272:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407274:	e78e      	b.n	407194 <__sflush_r+0x38>
  407276:	f8d8 3000 	ldr.w	r3, [r8]
  40727a:	2b00      	cmp	r3, #0
  40727c:	d0f8      	beq.n	407270 <__sflush_r+0x114>
  40727e:	2b1d      	cmp	r3, #29
  407280:	d001      	beq.n	407286 <__sflush_r+0x12a>
  407282:	2b16      	cmp	r3, #22
  407284:	d102      	bne.n	40728c <__sflush_r+0x130>
  407286:	f8c8 6000 	str.w	r6, [r8]
  40728a:	e7c3      	b.n	407214 <__sflush_r+0xb8>
  40728c:	89ab      	ldrh	r3, [r5, #12]
  40728e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407292:	81ab      	strh	r3, [r5, #12]
  407294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407298:	20400001 	.word	0x20400001

0040729c <_fflush_r>:
  40729c:	b538      	push	{r3, r4, r5, lr}
  40729e:	460d      	mov	r5, r1
  4072a0:	4604      	mov	r4, r0
  4072a2:	b108      	cbz	r0, 4072a8 <_fflush_r+0xc>
  4072a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4072a6:	b1bb      	cbz	r3, 4072d8 <_fflush_r+0x3c>
  4072a8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4072ac:	b188      	cbz	r0, 4072d2 <_fflush_r+0x36>
  4072ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4072b0:	07db      	lsls	r3, r3, #31
  4072b2:	d401      	bmi.n	4072b8 <_fflush_r+0x1c>
  4072b4:	0581      	lsls	r1, r0, #22
  4072b6:	d517      	bpl.n	4072e8 <_fflush_r+0x4c>
  4072b8:	4620      	mov	r0, r4
  4072ba:	4629      	mov	r1, r5
  4072bc:	f7ff ff4e 	bl	40715c <__sflush_r>
  4072c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4072c2:	07da      	lsls	r2, r3, #31
  4072c4:	4604      	mov	r4, r0
  4072c6:	d402      	bmi.n	4072ce <_fflush_r+0x32>
  4072c8:	89ab      	ldrh	r3, [r5, #12]
  4072ca:	059b      	lsls	r3, r3, #22
  4072cc:	d507      	bpl.n	4072de <_fflush_r+0x42>
  4072ce:	4620      	mov	r0, r4
  4072d0:	bd38      	pop	{r3, r4, r5, pc}
  4072d2:	4604      	mov	r4, r0
  4072d4:	4620      	mov	r0, r4
  4072d6:	bd38      	pop	{r3, r4, r5, pc}
  4072d8:	f000 f838 	bl	40734c <__sinit>
  4072dc:	e7e4      	b.n	4072a8 <_fflush_r+0xc>
  4072de:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4072e0:	f000 fb72 	bl	4079c8 <__retarget_lock_release_recursive>
  4072e4:	4620      	mov	r0, r4
  4072e6:	bd38      	pop	{r3, r4, r5, pc}
  4072e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4072ea:	f000 fb6b 	bl	4079c4 <__retarget_lock_acquire_recursive>
  4072ee:	e7e3      	b.n	4072b8 <_fflush_r+0x1c>

004072f0 <_cleanup_r>:
  4072f0:	4901      	ldr	r1, [pc, #4]	; (4072f8 <_cleanup_r+0x8>)
  4072f2:	f000 bb2b 	b.w	40794c <_fwalk_reent>
  4072f6:	bf00      	nop
  4072f8:	004087f9 	.word	0x004087f9

004072fc <std.isra.0>:
  4072fc:	b510      	push	{r4, lr}
  4072fe:	2300      	movs	r3, #0
  407300:	4604      	mov	r4, r0
  407302:	8181      	strh	r1, [r0, #12]
  407304:	81c2      	strh	r2, [r0, #14]
  407306:	6003      	str	r3, [r0, #0]
  407308:	6043      	str	r3, [r0, #4]
  40730a:	6083      	str	r3, [r0, #8]
  40730c:	6643      	str	r3, [r0, #100]	; 0x64
  40730e:	6103      	str	r3, [r0, #16]
  407310:	6143      	str	r3, [r0, #20]
  407312:	6183      	str	r3, [r0, #24]
  407314:	4619      	mov	r1, r3
  407316:	2208      	movs	r2, #8
  407318:	305c      	adds	r0, #92	; 0x5c
  40731a:	f7fd f9a5 	bl	404668 <memset>
  40731e:	4807      	ldr	r0, [pc, #28]	; (40733c <std.isra.0+0x40>)
  407320:	4907      	ldr	r1, [pc, #28]	; (407340 <std.isra.0+0x44>)
  407322:	4a08      	ldr	r2, [pc, #32]	; (407344 <std.isra.0+0x48>)
  407324:	4b08      	ldr	r3, [pc, #32]	; (407348 <std.isra.0+0x4c>)
  407326:	6220      	str	r0, [r4, #32]
  407328:	61e4      	str	r4, [r4, #28]
  40732a:	6261      	str	r1, [r4, #36]	; 0x24
  40732c:	62a2      	str	r2, [r4, #40]	; 0x28
  40732e:	62e3      	str	r3, [r4, #44]	; 0x2c
  407330:	f104 0058 	add.w	r0, r4, #88	; 0x58
  407334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407338:	f000 bb40 	b.w	4079bc <__retarget_lock_init_recursive>
  40733c:	00408569 	.word	0x00408569
  407340:	0040858d 	.word	0x0040858d
  407344:	004085c9 	.word	0x004085c9
  407348:	004085e9 	.word	0x004085e9

0040734c <__sinit>:
  40734c:	b510      	push	{r4, lr}
  40734e:	4604      	mov	r4, r0
  407350:	4812      	ldr	r0, [pc, #72]	; (40739c <__sinit+0x50>)
  407352:	f000 fb37 	bl	4079c4 <__retarget_lock_acquire_recursive>
  407356:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407358:	b9d2      	cbnz	r2, 407390 <__sinit+0x44>
  40735a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40735e:	4810      	ldr	r0, [pc, #64]	; (4073a0 <__sinit+0x54>)
  407360:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  407364:	2103      	movs	r1, #3
  407366:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40736a:	63e0      	str	r0, [r4, #60]	; 0x3c
  40736c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  407370:	6860      	ldr	r0, [r4, #4]
  407372:	2104      	movs	r1, #4
  407374:	f7ff ffc2 	bl	4072fc <std.isra.0>
  407378:	2201      	movs	r2, #1
  40737a:	2109      	movs	r1, #9
  40737c:	68a0      	ldr	r0, [r4, #8]
  40737e:	f7ff ffbd 	bl	4072fc <std.isra.0>
  407382:	2202      	movs	r2, #2
  407384:	2112      	movs	r1, #18
  407386:	68e0      	ldr	r0, [r4, #12]
  407388:	f7ff ffb8 	bl	4072fc <std.isra.0>
  40738c:	2301      	movs	r3, #1
  40738e:	63a3      	str	r3, [r4, #56]	; 0x38
  407390:	4802      	ldr	r0, [pc, #8]	; (40739c <__sinit+0x50>)
  407392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407396:	f000 bb17 	b.w	4079c8 <__retarget_lock_release_recursive>
  40739a:	bf00      	nop
  40739c:	20400e34 	.word	0x20400e34
  4073a0:	004072f1 	.word	0x004072f1

004073a4 <__sfp_lock_acquire>:
  4073a4:	4801      	ldr	r0, [pc, #4]	; (4073ac <__sfp_lock_acquire+0x8>)
  4073a6:	f000 bb0d 	b.w	4079c4 <__retarget_lock_acquire_recursive>
  4073aa:	bf00      	nop
  4073ac:	20400e48 	.word	0x20400e48

004073b0 <__sfp_lock_release>:
  4073b0:	4801      	ldr	r0, [pc, #4]	; (4073b8 <__sfp_lock_release+0x8>)
  4073b2:	f000 bb09 	b.w	4079c8 <__retarget_lock_release_recursive>
  4073b6:	bf00      	nop
  4073b8:	20400e48 	.word	0x20400e48

004073bc <__libc_fini_array>:
  4073bc:	b538      	push	{r3, r4, r5, lr}
  4073be:	4c0a      	ldr	r4, [pc, #40]	; (4073e8 <__libc_fini_array+0x2c>)
  4073c0:	4d0a      	ldr	r5, [pc, #40]	; (4073ec <__libc_fini_array+0x30>)
  4073c2:	1b64      	subs	r4, r4, r5
  4073c4:	10a4      	asrs	r4, r4, #2
  4073c6:	d00a      	beq.n	4073de <__libc_fini_array+0x22>
  4073c8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4073cc:	3b01      	subs	r3, #1
  4073ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4073d2:	3c01      	subs	r4, #1
  4073d4:	f855 3904 	ldr.w	r3, [r5], #-4
  4073d8:	4798      	blx	r3
  4073da:	2c00      	cmp	r4, #0
  4073dc:	d1f9      	bne.n	4073d2 <__libc_fini_array+0x16>
  4073de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4073e2:	f002 b887 	b.w	4094f4 <_fini>
  4073e6:	bf00      	nop
  4073e8:	00409504 	.word	0x00409504
  4073ec:	00409500 	.word	0x00409500

004073f0 <_malloc_trim_r>:
  4073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4073f2:	4f24      	ldr	r7, [pc, #144]	; (407484 <_malloc_trim_r+0x94>)
  4073f4:	460c      	mov	r4, r1
  4073f6:	4606      	mov	r6, r0
  4073f8:	f7fd f984 	bl	404704 <__malloc_lock>
  4073fc:	68bb      	ldr	r3, [r7, #8]
  4073fe:	685d      	ldr	r5, [r3, #4]
  407400:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407404:	310f      	adds	r1, #15
  407406:	f025 0503 	bic.w	r5, r5, #3
  40740a:	4429      	add	r1, r5
  40740c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407410:	f021 010f 	bic.w	r1, r1, #15
  407414:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407418:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40741c:	db07      	blt.n	40742e <_malloc_trim_r+0x3e>
  40741e:	2100      	movs	r1, #0
  407420:	4630      	mov	r0, r6
  407422:	f7fd fa0f 	bl	404844 <_sbrk_r>
  407426:	68bb      	ldr	r3, [r7, #8]
  407428:	442b      	add	r3, r5
  40742a:	4298      	cmp	r0, r3
  40742c:	d004      	beq.n	407438 <_malloc_trim_r+0x48>
  40742e:	4630      	mov	r0, r6
  407430:	f7fd f96e 	bl	404710 <__malloc_unlock>
  407434:	2000      	movs	r0, #0
  407436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407438:	4261      	negs	r1, r4
  40743a:	4630      	mov	r0, r6
  40743c:	f7fd fa02 	bl	404844 <_sbrk_r>
  407440:	3001      	adds	r0, #1
  407442:	d00d      	beq.n	407460 <_malloc_trim_r+0x70>
  407444:	4b10      	ldr	r3, [pc, #64]	; (407488 <_malloc_trim_r+0x98>)
  407446:	68ba      	ldr	r2, [r7, #8]
  407448:	6819      	ldr	r1, [r3, #0]
  40744a:	1b2d      	subs	r5, r5, r4
  40744c:	f045 0501 	orr.w	r5, r5, #1
  407450:	4630      	mov	r0, r6
  407452:	1b09      	subs	r1, r1, r4
  407454:	6055      	str	r5, [r2, #4]
  407456:	6019      	str	r1, [r3, #0]
  407458:	f7fd f95a 	bl	404710 <__malloc_unlock>
  40745c:	2001      	movs	r0, #1
  40745e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407460:	2100      	movs	r1, #0
  407462:	4630      	mov	r0, r6
  407464:	f7fd f9ee 	bl	404844 <_sbrk_r>
  407468:	68ba      	ldr	r2, [r7, #8]
  40746a:	1a83      	subs	r3, r0, r2
  40746c:	2b0f      	cmp	r3, #15
  40746e:	ddde      	ble.n	40742e <_malloc_trim_r+0x3e>
  407470:	4c06      	ldr	r4, [pc, #24]	; (40748c <_malloc_trim_r+0x9c>)
  407472:	4905      	ldr	r1, [pc, #20]	; (407488 <_malloc_trim_r+0x98>)
  407474:	6824      	ldr	r4, [r4, #0]
  407476:	f043 0301 	orr.w	r3, r3, #1
  40747a:	1b00      	subs	r0, r0, r4
  40747c:	6053      	str	r3, [r2, #4]
  40747e:	6008      	str	r0, [r1, #0]
  407480:	e7d5      	b.n	40742e <_malloc_trim_r+0x3e>
  407482:	bf00      	nop
  407484:	20400440 	.word	0x20400440
  407488:	20400da0 	.word	0x20400da0
  40748c:	20400848 	.word	0x20400848

00407490 <_free_r>:
  407490:	2900      	cmp	r1, #0
  407492:	d044      	beq.n	40751e <_free_r+0x8e>
  407494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407498:	460d      	mov	r5, r1
  40749a:	4680      	mov	r8, r0
  40749c:	f7fd f932 	bl	404704 <__malloc_lock>
  4074a0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4074a4:	4969      	ldr	r1, [pc, #420]	; (40764c <_free_r+0x1bc>)
  4074a6:	f027 0301 	bic.w	r3, r7, #1
  4074aa:	f1a5 0408 	sub.w	r4, r5, #8
  4074ae:	18e2      	adds	r2, r4, r3
  4074b0:	688e      	ldr	r6, [r1, #8]
  4074b2:	6850      	ldr	r0, [r2, #4]
  4074b4:	42b2      	cmp	r2, r6
  4074b6:	f020 0003 	bic.w	r0, r0, #3
  4074ba:	d05e      	beq.n	40757a <_free_r+0xea>
  4074bc:	07fe      	lsls	r6, r7, #31
  4074be:	6050      	str	r0, [r2, #4]
  4074c0:	d40b      	bmi.n	4074da <_free_r+0x4a>
  4074c2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4074c6:	1be4      	subs	r4, r4, r7
  4074c8:	f101 0e08 	add.w	lr, r1, #8
  4074cc:	68a5      	ldr	r5, [r4, #8]
  4074ce:	4575      	cmp	r5, lr
  4074d0:	443b      	add	r3, r7
  4074d2:	d06d      	beq.n	4075b0 <_free_r+0x120>
  4074d4:	68e7      	ldr	r7, [r4, #12]
  4074d6:	60ef      	str	r7, [r5, #12]
  4074d8:	60bd      	str	r5, [r7, #8]
  4074da:	1815      	adds	r5, r2, r0
  4074dc:	686d      	ldr	r5, [r5, #4]
  4074de:	07ed      	lsls	r5, r5, #31
  4074e0:	d53e      	bpl.n	407560 <_free_r+0xd0>
  4074e2:	f043 0201 	orr.w	r2, r3, #1
  4074e6:	6062      	str	r2, [r4, #4]
  4074e8:	50e3      	str	r3, [r4, r3]
  4074ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4074ee:	d217      	bcs.n	407520 <_free_r+0x90>
  4074f0:	08db      	lsrs	r3, r3, #3
  4074f2:	1c58      	adds	r0, r3, #1
  4074f4:	109a      	asrs	r2, r3, #2
  4074f6:	684d      	ldr	r5, [r1, #4]
  4074f8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  4074fc:	60a7      	str	r7, [r4, #8]
  4074fe:	2301      	movs	r3, #1
  407500:	4093      	lsls	r3, r2
  407502:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407506:	432b      	orrs	r3, r5
  407508:	3a08      	subs	r2, #8
  40750a:	60e2      	str	r2, [r4, #12]
  40750c:	604b      	str	r3, [r1, #4]
  40750e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407512:	60fc      	str	r4, [r7, #12]
  407514:	4640      	mov	r0, r8
  407516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40751a:	f7fd b8f9 	b.w	404710 <__malloc_unlock>
  40751e:	4770      	bx	lr
  407520:	0a5a      	lsrs	r2, r3, #9
  407522:	2a04      	cmp	r2, #4
  407524:	d852      	bhi.n	4075cc <_free_r+0x13c>
  407526:	099a      	lsrs	r2, r3, #6
  407528:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40752c:	00ff      	lsls	r7, r7, #3
  40752e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407532:	19c8      	adds	r0, r1, r7
  407534:	59ca      	ldr	r2, [r1, r7]
  407536:	3808      	subs	r0, #8
  407538:	4290      	cmp	r0, r2
  40753a:	d04f      	beq.n	4075dc <_free_r+0x14c>
  40753c:	6851      	ldr	r1, [r2, #4]
  40753e:	f021 0103 	bic.w	r1, r1, #3
  407542:	428b      	cmp	r3, r1
  407544:	d232      	bcs.n	4075ac <_free_r+0x11c>
  407546:	6892      	ldr	r2, [r2, #8]
  407548:	4290      	cmp	r0, r2
  40754a:	d1f7      	bne.n	40753c <_free_r+0xac>
  40754c:	68c3      	ldr	r3, [r0, #12]
  40754e:	60a0      	str	r0, [r4, #8]
  407550:	60e3      	str	r3, [r4, #12]
  407552:	609c      	str	r4, [r3, #8]
  407554:	60c4      	str	r4, [r0, #12]
  407556:	4640      	mov	r0, r8
  407558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40755c:	f7fd b8d8 	b.w	404710 <__malloc_unlock>
  407560:	6895      	ldr	r5, [r2, #8]
  407562:	4f3b      	ldr	r7, [pc, #236]	; (407650 <_free_r+0x1c0>)
  407564:	42bd      	cmp	r5, r7
  407566:	4403      	add	r3, r0
  407568:	d040      	beq.n	4075ec <_free_r+0x15c>
  40756a:	68d0      	ldr	r0, [r2, #12]
  40756c:	60e8      	str	r0, [r5, #12]
  40756e:	f043 0201 	orr.w	r2, r3, #1
  407572:	6085      	str	r5, [r0, #8]
  407574:	6062      	str	r2, [r4, #4]
  407576:	50e3      	str	r3, [r4, r3]
  407578:	e7b7      	b.n	4074ea <_free_r+0x5a>
  40757a:	07ff      	lsls	r7, r7, #31
  40757c:	4403      	add	r3, r0
  40757e:	d407      	bmi.n	407590 <_free_r+0x100>
  407580:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407584:	1aa4      	subs	r4, r4, r2
  407586:	4413      	add	r3, r2
  407588:	68a0      	ldr	r0, [r4, #8]
  40758a:	68e2      	ldr	r2, [r4, #12]
  40758c:	60c2      	str	r2, [r0, #12]
  40758e:	6090      	str	r0, [r2, #8]
  407590:	4a30      	ldr	r2, [pc, #192]	; (407654 <_free_r+0x1c4>)
  407592:	6812      	ldr	r2, [r2, #0]
  407594:	f043 0001 	orr.w	r0, r3, #1
  407598:	4293      	cmp	r3, r2
  40759a:	6060      	str	r0, [r4, #4]
  40759c:	608c      	str	r4, [r1, #8]
  40759e:	d3b9      	bcc.n	407514 <_free_r+0x84>
  4075a0:	4b2d      	ldr	r3, [pc, #180]	; (407658 <_free_r+0x1c8>)
  4075a2:	4640      	mov	r0, r8
  4075a4:	6819      	ldr	r1, [r3, #0]
  4075a6:	f7ff ff23 	bl	4073f0 <_malloc_trim_r>
  4075aa:	e7b3      	b.n	407514 <_free_r+0x84>
  4075ac:	4610      	mov	r0, r2
  4075ae:	e7cd      	b.n	40754c <_free_r+0xbc>
  4075b0:	1811      	adds	r1, r2, r0
  4075b2:	6849      	ldr	r1, [r1, #4]
  4075b4:	07c9      	lsls	r1, r1, #31
  4075b6:	d444      	bmi.n	407642 <_free_r+0x1b2>
  4075b8:	6891      	ldr	r1, [r2, #8]
  4075ba:	68d2      	ldr	r2, [r2, #12]
  4075bc:	60ca      	str	r2, [r1, #12]
  4075be:	4403      	add	r3, r0
  4075c0:	f043 0001 	orr.w	r0, r3, #1
  4075c4:	6091      	str	r1, [r2, #8]
  4075c6:	6060      	str	r0, [r4, #4]
  4075c8:	50e3      	str	r3, [r4, r3]
  4075ca:	e7a3      	b.n	407514 <_free_r+0x84>
  4075cc:	2a14      	cmp	r2, #20
  4075ce:	d816      	bhi.n	4075fe <_free_r+0x16e>
  4075d0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4075d4:	00ff      	lsls	r7, r7, #3
  4075d6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4075da:	e7aa      	b.n	407532 <_free_r+0xa2>
  4075dc:	10aa      	asrs	r2, r5, #2
  4075de:	2301      	movs	r3, #1
  4075e0:	684d      	ldr	r5, [r1, #4]
  4075e2:	4093      	lsls	r3, r2
  4075e4:	432b      	orrs	r3, r5
  4075e6:	604b      	str	r3, [r1, #4]
  4075e8:	4603      	mov	r3, r0
  4075ea:	e7b0      	b.n	40754e <_free_r+0xbe>
  4075ec:	f043 0201 	orr.w	r2, r3, #1
  4075f0:	614c      	str	r4, [r1, #20]
  4075f2:	610c      	str	r4, [r1, #16]
  4075f4:	60e5      	str	r5, [r4, #12]
  4075f6:	60a5      	str	r5, [r4, #8]
  4075f8:	6062      	str	r2, [r4, #4]
  4075fa:	50e3      	str	r3, [r4, r3]
  4075fc:	e78a      	b.n	407514 <_free_r+0x84>
  4075fe:	2a54      	cmp	r2, #84	; 0x54
  407600:	d806      	bhi.n	407610 <_free_r+0x180>
  407602:	0b1a      	lsrs	r2, r3, #12
  407604:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407608:	00ff      	lsls	r7, r7, #3
  40760a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40760e:	e790      	b.n	407532 <_free_r+0xa2>
  407610:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407614:	d806      	bhi.n	407624 <_free_r+0x194>
  407616:	0bda      	lsrs	r2, r3, #15
  407618:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40761c:	00ff      	lsls	r7, r7, #3
  40761e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407622:	e786      	b.n	407532 <_free_r+0xa2>
  407624:	f240 5054 	movw	r0, #1364	; 0x554
  407628:	4282      	cmp	r2, r0
  40762a:	d806      	bhi.n	40763a <_free_r+0x1aa>
  40762c:	0c9a      	lsrs	r2, r3, #18
  40762e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407632:	00ff      	lsls	r7, r7, #3
  407634:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407638:	e77b      	b.n	407532 <_free_r+0xa2>
  40763a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40763e:	257e      	movs	r5, #126	; 0x7e
  407640:	e777      	b.n	407532 <_free_r+0xa2>
  407642:	f043 0101 	orr.w	r1, r3, #1
  407646:	6061      	str	r1, [r4, #4]
  407648:	6013      	str	r3, [r2, #0]
  40764a:	e763      	b.n	407514 <_free_r+0x84>
  40764c:	20400440 	.word	0x20400440
  407650:	20400448 	.word	0x20400448
  407654:	2040084c 	.word	0x2040084c
  407658:	20400dd0 	.word	0x20400dd0

0040765c <__sfvwrite_r>:
  40765c:	6893      	ldr	r3, [r2, #8]
  40765e:	2b00      	cmp	r3, #0
  407660:	d073      	beq.n	40774a <__sfvwrite_r+0xee>
  407662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407666:	898b      	ldrh	r3, [r1, #12]
  407668:	b083      	sub	sp, #12
  40766a:	460c      	mov	r4, r1
  40766c:	0719      	lsls	r1, r3, #28
  40766e:	9000      	str	r0, [sp, #0]
  407670:	4616      	mov	r6, r2
  407672:	d526      	bpl.n	4076c2 <__sfvwrite_r+0x66>
  407674:	6922      	ldr	r2, [r4, #16]
  407676:	b322      	cbz	r2, 4076c2 <__sfvwrite_r+0x66>
  407678:	f013 0002 	ands.w	r0, r3, #2
  40767c:	6835      	ldr	r5, [r6, #0]
  40767e:	d02c      	beq.n	4076da <__sfvwrite_r+0x7e>
  407680:	f04f 0900 	mov.w	r9, #0
  407684:	4fb0      	ldr	r7, [pc, #704]	; (407948 <__sfvwrite_r+0x2ec>)
  407686:	46c8      	mov	r8, r9
  407688:	46b2      	mov	sl, r6
  40768a:	45b8      	cmp	r8, r7
  40768c:	4643      	mov	r3, r8
  40768e:	464a      	mov	r2, r9
  407690:	bf28      	it	cs
  407692:	463b      	movcs	r3, r7
  407694:	9800      	ldr	r0, [sp, #0]
  407696:	f1b8 0f00 	cmp.w	r8, #0
  40769a:	d050      	beq.n	40773e <__sfvwrite_r+0xe2>
  40769c:	69e1      	ldr	r1, [r4, #28]
  40769e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4076a0:	47b0      	blx	r6
  4076a2:	2800      	cmp	r0, #0
  4076a4:	dd58      	ble.n	407758 <__sfvwrite_r+0xfc>
  4076a6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4076aa:	1a1b      	subs	r3, r3, r0
  4076ac:	4481      	add	r9, r0
  4076ae:	eba8 0800 	sub.w	r8, r8, r0
  4076b2:	f8ca 3008 	str.w	r3, [sl, #8]
  4076b6:	2b00      	cmp	r3, #0
  4076b8:	d1e7      	bne.n	40768a <__sfvwrite_r+0x2e>
  4076ba:	2000      	movs	r0, #0
  4076bc:	b003      	add	sp, #12
  4076be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4076c2:	4621      	mov	r1, r4
  4076c4:	9800      	ldr	r0, [sp, #0]
  4076c6:	f7fe fd17 	bl	4060f8 <__swsetup_r>
  4076ca:	2800      	cmp	r0, #0
  4076cc:	f040 8133 	bne.w	407936 <__sfvwrite_r+0x2da>
  4076d0:	89a3      	ldrh	r3, [r4, #12]
  4076d2:	6835      	ldr	r5, [r6, #0]
  4076d4:	f013 0002 	ands.w	r0, r3, #2
  4076d8:	d1d2      	bne.n	407680 <__sfvwrite_r+0x24>
  4076da:	f013 0901 	ands.w	r9, r3, #1
  4076de:	d145      	bne.n	40776c <__sfvwrite_r+0x110>
  4076e0:	464f      	mov	r7, r9
  4076e2:	9601      	str	r6, [sp, #4]
  4076e4:	b337      	cbz	r7, 407734 <__sfvwrite_r+0xd8>
  4076e6:	059a      	lsls	r2, r3, #22
  4076e8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4076ec:	f140 8083 	bpl.w	4077f6 <__sfvwrite_r+0x19a>
  4076f0:	4547      	cmp	r7, r8
  4076f2:	46c3      	mov	fp, r8
  4076f4:	f0c0 80ab 	bcc.w	40784e <__sfvwrite_r+0x1f2>
  4076f8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4076fc:	f040 80ac 	bne.w	407858 <__sfvwrite_r+0x1fc>
  407700:	6820      	ldr	r0, [r4, #0]
  407702:	46ba      	mov	sl, r7
  407704:	465a      	mov	r2, fp
  407706:	4649      	mov	r1, r9
  407708:	f000 fa2a 	bl	407b60 <memmove>
  40770c:	68a2      	ldr	r2, [r4, #8]
  40770e:	6823      	ldr	r3, [r4, #0]
  407710:	eba2 0208 	sub.w	r2, r2, r8
  407714:	445b      	add	r3, fp
  407716:	60a2      	str	r2, [r4, #8]
  407718:	6023      	str	r3, [r4, #0]
  40771a:	9a01      	ldr	r2, [sp, #4]
  40771c:	6893      	ldr	r3, [r2, #8]
  40771e:	eba3 030a 	sub.w	r3, r3, sl
  407722:	44d1      	add	r9, sl
  407724:	eba7 070a 	sub.w	r7, r7, sl
  407728:	6093      	str	r3, [r2, #8]
  40772a:	2b00      	cmp	r3, #0
  40772c:	d0c5      	beq.n	4076ba <__sfvwrite_r+0x5e>
  40772e:	89a3      	ldrh	r3, [r4, #12]
  407730:	2f00      	cmp	r7, #0
  407732:	d1d8      	bne.n	4076e6 <__sfvwrite_r+0x8a>
  407734:	f8d5 9000 	ldr.w	r9, [r5]
  407738:	686f      	ldr	r7, [r5, #4]
  40773a:	3508      	adds	r5, #8
  40773c:	e7d2      	b.n	4076e4 <__sfvwrite_r+0x88>
  40773e:	f8d5 9000 	ldr.w	r9, [r5]
  407742:	f8d5 8004 	ldr.w	r8, [r5, #4]
  407746:	3508      	adds	r5, #8
  407748:	e79f      	b.n	40768a <__sfvwrite_r+0x2e>
  40774a:	2000      	movs	r0, #0
  40774c:	4770      	bx	lr
  40774e:	4621      	mov	r1, r4
  407750:	9800      	ldr	r0, [sp, #0]
  407752:	f7ff fda3 	bl	40729c <_fflush_r>
  407756:	b370      	cbz	r0, 4077b6 <__sfvwrite_r+0x15a>
  407758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40775c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407760:	f04f 30ff 	mov.w	r0, #4294967295
  407764:	81a3      	strh	r3, [r4, #12]
  407766:	b003      	add	sp, #12
  407768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40776c:	4681      	mov	r9, r0
  40776e:	4633      	mov	r3, r6
  407770:	464e      	mov	r6, r9
  407772:	46a8      	mov	r8, r5
  407774:	469a      	mov	sl, r3
  407776:	464d      	mov	r5, r9
  407778:	b34e      	cbz	r6, 4077ce <__sfvwrite_r+0x172>
  40777a:	b380      	cbz	r0, 4077de <__sfvwrite_r+0x182>
  40777c:	6820      	ldr	r0, [r4, #0]
  40777e:	6923      	ldr	r3, [r4, #16]
  407780:	6962      	ldr	r2, [r4, #20]
  407782:	45b1      	cmp	r9, r6
  407784:	46cb      	mov	fp, r9
  407786:	bf28      	it	cs
  407788:	46b3      	movcs	fp, r6
  40778a:	4298      	cmp	r0, r3
  40778c:	465f      	mov	r7, fp
  40778e:	d904      	bls.n	40779a <__sfvwrite_r+0x13e>
  407790:	68a3      	ldr	r3, [r4, #8]
  407792:	4413      	add	r3, r2
  407794:	459b      	cmp	fp, r3
  407796:	f300 80a6 	bgt.w	4078e6 <__sfvwrite_r+0x28a>
  40779a:	4593      	cmp	fp, r2
  40779c:	db4b      	blt.n	407836 <__sfvwrite_r+0x1da>
  40779e:	4613      	mov	r3, r2
  4077a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4077a2:	69e1      	ldr	r1, [r4, #28]
  4077a4:	9800      	ldr	r0, [sp, #0]
  4077a6:	462a      	mov	r2, r5
  4077a8:	47b8      	blx	r7
  4077aa:	1e07      	subs	r7, r0, #0
  4077ac:	ddd4      	ble.n	407758 <__sfvwrite_r+0xfc>
  4077ae:	ebb9 0907 	subs.w	r9, r9, r7
  4077b2:	d0cc      	beq.n	40774e <__sfvwrite_r+0xf2>
  4077b4:	2001      	movs	r0, #1
  4077b6:	f8da 3008 	ldr.w	r3, [sl, #8]
  4077ba:	1bdb      	subs	r3, r3, r7
  4077bc:	443d      	add	r5, r7
  4077be:	1bf6      	subs	r6, r6, r7
  4077c0:	f8ca 3008 	str.w	r3, [sl, #8]
  4077c4:	2b00      	cmp	r3, #0
  4077c6:	f43f af78 	beq.w	4076ba <__sfvwrite_r+0x5e>
  4077ca:	2e00      	cmp	r6, #0
  4077cc:	d1d5      	bne.n	40777a <__sfvwrite_r+0x11e>
  4077ce:	f108 0308 	add.w	r3, r8, #8
  4077d2:	e913 0060 	ldmdb	r3, {r5, r6}
  4077d6:	4698      	mov	r8, r3
  4077d8:	3308      	adds	r3, #8
  4077da:	2e00      	cmp	r6, #0
  4077dc:	d0f9      	beq.n	4077d2 <__sfvwrite_r+0x176>
  4077de:	4632      	mov	r2, r6
  4077e0:	210a      	movs	r1, #10
  4077e2:	4628      	mov	r0, r5
  4077e4:	f000 f96c 	bl	407ac0 <memchr>
  4077e8:	2800      	cmp	r0, #0
  4077ea:	f000 80a1 	beq.w	407930 <__sfvwrite_r+0x2d4>
  4077ee:	3001      	adds	r0, #1
  4077f0:	eba0 0905 	sub.w	r9, r0, r5
  4077f4:	e7c2      	b.n	40777c <__sfvwrite_r+0x120>
  4077f6:	6820      	ldr	r0, [r4, #0]
  4077f8:	6923      	ldr	r3, [r4, #16]
  4077fa:	4298      	cmp	r0, r3
  4077fc:	d802      	bhi.n	407804 <__sfvwrite_r+0x1a8>
  4077fe:	6963      	ldr	r3, [r4, #20]
  407800:	429f      	cmp	r7, r3
  407802:	d25d      	bcs.n	4078c0 <__sfvwrite_r+0x264>
  407804:	45b8      	cmp	r8, r7
  407806:	bf28      	it	cs
  407808:	46b8      	movcs	r8, r7
  40780a:	4642      	mov	r2, r8
  40780c:	4649      	mov	r1, r9
  40780e:	f000 f9a7 	bl	407b60 <memmove>
  407812:	68a3      	ldr	r3, [r4, #8]
  407814:	6822      	ldr	r2, [r4, #0]
  407816:	eba3 0308 	sub.w	r3, r3, r8
  40781a:	4442      	add	r2, r8
  40781c:	60a3      	str	r3, [r4, #8]
  40781e:	6022      	str	r2, [r4, #0]
  407820:	b10b      	cbz	r3, 407826 <__sfvwrite_r+0x1ca>
  407822:	46c2      	mov	sl, r8
  407824:	e779      	b.n	40771a <__sfvwrite_r+0xbe>
  407826:	4621      	mov	r1, r4
  407828:	9800      	ldr	r0, [sp, #0]
  40782a:	f7ff fd37 	bl	40729c <_fflush_r>
  40782e:	2800      	cmp	r0, #0
  407830:	d192      	bne.n	407758 <__sfvwrite_r+0xfc>
  407832:	46c2      	mov	sl, r8
  407834:	e771      	b.n	40771a <__sfvwrite_r+0xbe>
  407836:	465a      	mov	r2, fp
  407838:	4629      	mov	r1, r5
  40783a:	f000 f991 	bl	407b60 <memmove>
  40783e:	68a2      	ldr	r2, [r4, #8]
  407840:	6823      	ldr	r3, [r4, #0]
  407842:	eba2 020b 	sub.w	r2, r2, fp
  407846:	445b      	add	r3, fp
  407848:	60a2      	str	r2, [r4, #8]
  40784a:	6023      	str	r3, [r4, #0]
  40784c:	e7af      	b.n	4077ae <__sfvwrite_r+0x152>
  40784e:	6820      	ldr	r0, [r4, #0]
  407850:	46b8      	mov	r8, r7
  407852:	46ba      	mov	sl, r7
  407854:	46bb      	mov	fp, r7
  407856:	e755      	b.n	407704 <__sfvwrite_r+0xa8>
  407858:	6962      	ldr	r2, [r4, #20]
  40785a:	6820      	ldr	r0, [r4, #0]
  40785c:	6921      	ldr	r1, [r4, #16]
  40785e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407862:	eba0 0a01 	sub.w	sl, r0, r1
  407866:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40786a:	f10a 0001 	add.w	r0, sl, #1
  40786e:	ea4f 0868 	mov.w	r8, r8, asr #1
  407872:	4438      	add	r0, r7
  407874:	4540      	cmp	r0, r8
  407876:	4642      	mov	r2, r8
  407878:	bf84      	itt	hi
  40787a:	4680      	movhi	r8, r0
  40787c:	4642      	movhi	r2, r8
  40787e:	055b      	lsls	r3, r3, #21
  407880:	d544      	bpl.n	40790c <__sfvwrite_r+0x2b0>
  407882:	4611      	mov	r1, r2
  407884:	9800      	ldr	r0, [sp, #0]
  407886:	f7fc fba5 	bl	403fd4 <_malloc_r>
  40788a:	4683      	mov	fp, r0
  40788c:	2800      	cmp	r0, #0
  40788e:	d055      	beq.n	40793c <__sfvwrite_r+0x2e0>
  407890:	4652      	mov	r2, sl
  407892:	6921      	ldr	r1, [r4, #16]
  407894:	f7fc fe4e 	bl	404534 <memcpy>
  407898:	89a3      	ldrh	r3, [r4, #12]
  40789a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40789e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4078a2:	81a3      	strh	r3, [r4, #12]
  4078a4:	eb0b 000a 	add.w	r0, fp, sl
  4078a8:	eba8 030a 	sub.w	r3, r8, sl
  4078ac:	f8c4 b010 	str.w	fp, [r4, #16]
  4078b0:	f8c4 8014 	str.w	r8, [r4, #20]
  4078b4:	6020      	str	r0, [r4, #0]
  4078b6:	60a3      	str	r3, [r4, #8]
  4078b8:	46b8      	mov	r8, r7
  4078ba:	46ba      	mov	sl, r7
  4078bc:	46bb      	mov	fp, r7
  4078be:	e721      	b.n	407704 <__sfvwrite_r+0xa8>
  4078c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4078c4:	42b9      	cmp	r1, r7
  4078c6:	bf28      	it	cs
  4078c8:	4639      	movcs	r1, r7
  4078ca:	464a      	mov	r2, r9
  4078cc:	fb91 f1f3 	sdiv	r1, r1, r3
  4078d0:	9800      	ldr	r0, [sp, #0]
  4078d2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4078d4:	fb03 f301 	mul.w	r3, r3, r1
  4078d8:	69e1      	ldr	r1, [r4, #28]
  4078da:	47b0      	blx	r6
  4078dc:	f1b0 0a00 	subs.w	sl, r0, #0
  4078e0:	f73f af1b 	bgt.w	40771a <__sfvwrite_r+0xbe>
  4078e4:	e738      	b.n	407758 <__sfvwrite_r+0xfc>
  4078e6:	461a      	mov	r2, r3
  4078e8:	4629      	mov	r1, r5
  4078ea:	9301      	str	r3, [sp, #4]
  4078ec:	f000 f938 	bl	407b60 <memmove>
  4078f0:	6822      	ldr	r2, [r4, #0]
  4078f2:	9b01      	ldr	r3, [sp, #4]
  4078f4:	9800      	ldr	r0, [sp, #0]
  4078f6:	441a      	add	r2, r3
  4078f8:	6022      	str	r2, [r4, #0]
  4078fa:	4621      	mov	r1, r4
  4078fc:	f7ff fcce 	bl	40729c <_fflush_r>
  407900:	9b01      	ldr	r3, [sp, #4]
  407902:	2800      	cmp	r0, #0
  407904:	f47f af28 	bne.w	407758 <__sfvwrite_r+0xfc>
  407908:	461f      	mov	r7, r3
  40790a:	e750      	b.n	4077ae <__sfvwrite_r+0x152>
  40790c:	9800      	ldr	r0, [sp, #0]
  40790e:	f000 fc85 	bl	40821c <_realloc_r>
  407912:	4683      	mov	fp, r0
  407914:	2800      	cmp	r0, #0
  407916:	d1c5      	bne.n	4078a4 <__sfvwrite_r+0x248>
  407918:	9d00      	ldr	r5, [sp, #0]
  40791a:	6921      	ldr	r1, [r4, #16]
  40791c:	4628      	mov	r0, r5
  40791e:	f7ff fdb7 	bl	407490 <_free_r>
  407922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407926:	220c      	movs	r2, #12
  407928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40792c:	602a      	str	r2, [r5, #0]
  40792e:	e715      	b.n	40775c <__sfvwrite_r+0x100>
  407930:	f106 0901 	add.w	r9, r6, #1
  407934:	e722      	b.n	40777c <__sfvwrite_r+0x120>
  407936:	f04f 30ff 	mov.w	r0, #4294967295
  40793a:	e6bf      	b.n	4076bc <__sfvwrite_r+0x60>
  40793c:	9a00      	ldr	r2, [sp, #0]
  40793e:	230c      	movs	r3, #12
  407940:	6013      	str	r3, [r2, #0]
  407942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407946:	e709      	b.n	40775c <__sfvwrite_r+0x100>
  407948:	7ffffc00 	.word	0x7ffffc00

0040794c <_fwalk_reent>:
  40794c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407950:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407954:	d01f      	beq.n	407996 <_fwalk_reent+0x4a>
  407956:	4688      	mov	r8, r1
  407958:	4606      	mov	r6, r0
  40795a:	f04f 0900 	mov.w	r9, #0
  40795e:	687d      	ldr	r5, [r7, #4]
  407960:	68bc      	ldr	r4, [r7, #8]
  407962:	3d01      	subs	r5, #1
  407964:	d411      	bmi.n	40798a <_fwalk_reent+0x3e>
  407966:	89a3      	ldrh	r3, [r4, #12]
  407968:	2b01      	cmp	r3, #1
  40796a:	f105 35ff 	add.w	r5, r5, #4294967295
  40796e:	d908      	bls.n	407982 <_fwalk_reent+0x36>
  407970:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407974:	3301      	adds	r3, #1
  407976:	4621      	mov	r1, r4
  407978:	4630      	mov	r0, r6
  40797a:	d002      	beq.n	407982 <_fwalk_reent+0x36>
  40797c:	47c0      	blx	r8
  40797e:	ea49 0900 	orr.w	r9, r9, r0
  407982:	1c6b      	adds	r3, r5, #1
  407984:	f104 0468 	add.w	r4, r4, #104	; 0x68
  407988:	d1ed      	bne.n	407966 <_fwalk_reent+0x1a>
  40798a:	683f      	ldr	r7, [r7, #0]
  40798c:	2f00      	cmp	r7, #0
  40798e:	d1e6      	bne.n	40795e <_fwalk_reent+0x12>
  407990:	4648      	mov	r0, r9
  407992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407996:	46b9      	mov	r9, r7
  407998:	4648      	mov	r0, r9
  40799a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40799e:	bf00      	nop

004079a0 <_localeconv_r>:
  4079a0:	4a04      	ldr	r2, [pc, #16]	; (4079b4 <_localeconv_r+0x14>)
  4079a2:	4b05      	ldr	r3, [pc, #20]	; (4079b8 <_localeconv_r+0x18>)
  4079a4:	6812      	ldr	r2, [r2, #0]
  4079a6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4079a8:	2800      	cmp	r0, #0
  4079aa:	bf08      	it	eq
  4079ac:	4618      	moveq	r0, r3
  4079ae:	30f0      	adds	r0, #240	; 0xf0
  4079b0:	4770      	bx	lr
  4079b2:	bf00      	nop
  4079b4:	20400014 	.word	0x20400014
  4079b8:	20400854 	.word	0x20400854

004079bc <__retarget_lock_init_recursive>:
  4079bc:	4770      	bx	lr
  4079be:	bf00      	nop

004079c0 <__retarget_lock_close_recursive>:
  4079c0:	4770      	bx	lr
  4079c2:	bf00      	nop

004079c4 <__retarget_lock_acquire_recursive>:
  4079c4:	4770      	bx	lr
  4079c6:	bf00      	nop

004079c8 <__retarget_lock_release_recursive>:
  4079c8:	4770      	bx	lr
  4079ca:	bf00      	nop

004079cc <__swhatbuf_r>:
  4079cc:	b570      	push	{r4, r5, r6, lr}
  4079ce:	460c      	mov	r4, r1
  4079d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4079d4:	2900      	cmp	r1, #0
  4079d6:	b090      	sub	sp, #64	; 0x40
  4079d8:	4615      	mov	r5, r2
  4079da:	461e      	mov	r6, r3
  4079dc:	db14      	blt.n	407a08 <__swhatbuf_r+0x3c>
  4079de:	aa01      	add	r2, sp, #4
  4079e0:	f000 fff0 	bl	4089c4 <_fstat_r>
  4079e4:	2800      	cmp	r0, #0
  4079e6:	db0f      	blt.n	407a08 <__swhatbuf_r+0x3c>
  4079e8:	9a02      	ldr	r2, [sp, #8]
  4079ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4079ee:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4079f2:	fab2 f282 	clz	r2, r2
  4079f6:	0952      	lsrs	r2, r2, #5
  4079f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4079fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
  407a00:	6032      	str	r2, [r6, #0]
  407a02:	602b      	str	r3, [r5, #0]
  407a04:	b010      	add	sp, #64	; 0x40
  407a06:	bd70      	pop	{r4, r5, r6, pc}
  407a08:	89a2      	ldrh	r2, [r4, #12]
  407a0a:	2300      	movs	r3, #0
  407a0c:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  407a10:	6033      	str	r3, [r6, #0]
  407a12:	d004      	beq.n	407a1e <__swhatbuf_r+0x52>
  407a14:	2240      	movs	r2, #64	; 0x40
  407a16:	4618      	mov	r0, r3
  407a18:	602a      	str	r2, [r5, #0]
  407a1a:	b010      	add	sp, #64	; 0x40
  407a1c:	bd70      	pop	{r4, r5, r6, pc}
  407a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407a22:	602b      	str	r3, [r5, #0]
  407a24:	b010      	add	sp, #64	; 0x40
  407a26:	bd70      	pop	{r4, r5, r6, pc}

00407a28 <__smakebuf_r>:
  407a28:	898a      	ldrh	r2, [r1, #12]
  407a2a:	0792      	lsls	r2, r2, #30
  407a2c:	460b      	mov	r3, r1
  407a2e:	d506      	bpl.n	407a3e <__smakebuf_r+0x16>
  407a30:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407a34:	2101      	movs	r1, #1
  407a36:	601a      	str	r2, [r3, #0]
  407a38:	611a      	str	r2, [r3, #16]
  407a3a:	6159      	str	r1, [r3, #20]
  407a3c:	4770      	bx	lr
  407a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
  407a40:	b083      	sub	sp, #12
  407a42:	ab01      	add	r3, sp, #4
  407a44:	466a      	mov	r2, sp
  407a46:	460c      	mov	r4, r1
  407a48:	4606      	mov	r6, r0
  407a4a:	f7ff ffbf 	bl	4079cc <__swhatbuf_r>
  407a4e:	9900      	ldr	r1, [sp, #0]
  407a50:	4605      	mov	r5, r0
  407a52:	4630      	mov	r0, r6
  407a54:	f7fc fabe 	bl	403fd4 <_malloc_r>
  407a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a5c:	b1d8      	cbz	r0, 407a96 <__smakebuf_r+0x6e>
  407a5e:	9a01      	ldr	r2, [sp, #4]
  407a60:	4f15      	ldr	r7, [pc, #84]	; (407ab8 <__smakebuf_r+0x90>)
  407a62:	9900      	ldr	r1, [sp, #0]
  407a64:	63f7      	str	r7, [r6, #60]	; 0x3c
  407a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407a6a:	81a3      	strh	r3, [r4, #12]
  407a6c:	6020      	str	r0, [r4, #0]
  407a6e:	6120      	str	r0, [r4, #16]
  407a70:	6161      	str	r1, [r4, #20]
  407a72:	b91a      	cbnz	r2, 407a7c <__smakebuf_r+0x54>
  407a74:	432b      	orrs	r3, r5
  407a76:	81a3      	strh	r3, [r4, #12]
  407a78:	b003      	add	sp, #12
  407a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407a7c:	4630      	mov	r0, r6
  407a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407a82:	f000 ffb3 	bl	4089ec <_isatty_r>
  407a86:	b1a0      	cbz	r0, 407ab2 <__smakebuf_r+0x8a>
  407a88:	89a3      	ldrh	r3, [r4, #12]
  407a8a:	f023 0303 	bic.w	r3, r3, #3
  407a8e:	f043 0301 	orr.w	r3, r3, #1
  407a92:	b21b      	sxth	r3, r3
  407a94:	e7ee      	b.n	407a74 <__smakebuf_r+0x4c>
  407a96:	059a      	lsls	r2, r3, #22
  407a98:	d4ee      	bmi.n	407a78 <__smakebuf_r+0x50>
  407a9a:	f023 0303 	bic.w	r3, r3, #3
  407a9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407aa2:	f043 0302 	orr.w	r3, r3, #2
  407aa6:	2101      	movs	r1, #1
  407aa8:	81a3      	strh	r3, [r4, #12]
  407aaa:	6022      	str	r2, [r4, #0]
  407aac:	6122      	str	r2, [r4, #16]
  407aae:	6161      	str	r1, [r4, #20]
  407ab0:	e7e2      	b.n	407a78 <__smakebuf_r+0x50>
  407ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407ab6:	e7dd      	b.n	407a74 <__smakebuf_r+0x4c>
  407ab8:	004072f1 	.word	0x004072f1
  407abc:	00000000 	.word	0x00000000

00407ac0 <memchr>:
  407ac0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407ac4:	2a10      	cmp	r2, #16
  407ac6:	db2b      	blt.n	407b20 <memchr+0x60>
  407ac8:	f010 0f07 	tst.w	r0, #7
  407acc:	d008      	beq.n	407ae0 <memchr+0x20>
  407ace:	f810 3b01 	ldrb.w	r3, [r0], #1
  407ad2:	3a01      	subs	r2, #1
  407ad4:	428b      	cmp	r3, r1
  407ad6:	d02d      	beq.n	407b34 <memchr+0x74>
  407ad8:	f010 0f07 	tst.w	r0, #7
  407adc:	b342      	cbz	r2, 407b30 <memchr+0x70>
  407ade:	d1f6      	bne.n	407ace <memchr+0xe>
  407ae0:	b4f0      	push	{r4, r5, r6, r7}
  407ae2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407ae6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  407aea:	f022 0407 	bic.w	r4, r2, #7
  407aee:	f07f 0700 	mvns.w	r7, #0
  407af2:	2300      	movs	r3, #0
  407af4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407af8:	3c08      	subs	r4, #8
  407afa:	ea85 0501 	eor.w	r5, r5, r1
  407afe:	ea86 0601 	eor.w	r6, r6, r1
  407b02:	fa85 f547 	uadd8	r5, r5, r7
  407b06:	faa3 f587 	sel	r5, r3, r7
  407b0a:	fa86 f647 	uadd8	r6, r6, r7
  407b0e:	faa5 f687 	sel	r6, r5, r7
  407b12:	b98e      	cbnz	r6, 407b38 <memchr+0x78>
  407b14:	d1ee      	bne.n	407af4 <memchr+0x34>
  407b16:	bcf0      	pop	{r4, r5, r6, r7}
  407b18:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407b1c:	f002 0207 	and.w	r2, r2, #7
  407b20:	b132      	cbz	r2, 407b30 <memchr+0x70>
  407b22:	f810 3b01 	ldrb.w	r3, [r0], #1
  407b26:	3a01      	subs	r2, #1
  407b28:	ea83 0301 	eor.w	r3, r3, r1
  407b2c:	b113      	cbz	r3, 407b34 <memchr+0x74>
  407b2e:	d1f8      	bne.n	407b22 <memchr+0x62>
  407b30:	2000      	movs	r0, #0
  407b32:	4770      	bx	lr
  407b34:	3801      	subs	r0, #1
  407b36:	4770      	bx	lr
  407b38:	2d00      	cmp	r5, #0
  407b3a:	bf06      	itte	eq
  407b3c:	4635      	moveq	r5, r6
  407b3e:	3803      	subeq	r0, #3
  407b40:	3807      	subne	r0, #7
  407b42:	f015 0f01 	tst.w	r5, #1
  407b46:	d107      	bne.n	407b58 <memchr+0x98>
  407b48:	3001      	adds	r0, #1
  407b4a:	f415 7f80 	tst.w	r5, #256	; 0x100
  407b4e:	bf02      	ittt	eq
  407b50:	3001      	addeq	r0, #1
  407b52:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407b56:	3001      	addeq	r0, #1
  407b58:	bcf0      	pop	{r4, r5, r6, r7}
  407b5a:	3801      	subs	r0, #1
  407b5c:	4770      	bx	lr
  407b5e:	bf00      	nop

00407b60 <memmove>:
  407b60:	4288      	cmp	r0, r1
  407b62:	b5f0      	push	{r4, r5, r6, r7, lr}
  407b64:	d90d      	bls.n	407b82 <memmove+0x22>
  407b66:	188b      	adds	r3, r1, r2
  407b68:	4298      	cmp	r0, r3
  407b6a:	d20a      	bcs.n	407b82 <memmove+0x22>
  407b6c:	1884      	adds	r4, r0, r2
  407b6e:	2a00      	cmp	r2, #0
  407b70:	d051      	beq.n	407c16 <memmove+0xb6>
  407b72:	4622      	mov	r2, r4
  407b74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407b78:	f802 4d01 	strb.w	r4, [r2, #-1]!
  407b7c:	4299      	cmp	r1, r3
  407b7e:	d1f9      	bne.n	407b74 <memmove+0x14>
  407b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407b82:	2a0f      	cmp	r2, #15
  407b84:	d948      	bls.n	407c18 <memmove+0xb8>
  407b86:	ea41 0300 	orr.w	r3, r1, r0
  407b8a:	079b      	lsls	r3, r3, #30
  407b8c:	d146      	bne.n	407c1c <memmove+0xbc>
  407b8e:	f100 0410 	add.w	r4, r0, #16
  407b92:	f101 0310 	add.w	r3, r1, #16
  407b96:	4615      	mov	r5, r2
  407b98:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407b9c:	f844 6c10 	str.w	r6, [r4, #-16]
  407ba0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407ba4:	f844 6c0c 	str.w	r6, [r4, #-12]
  407ba8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407bac:	f844 6c08 	str.w	r6, [r4, #-8]
  407bb0:	3d10      	subs	r5, #16
  407bb2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407bb6:	f844 6c04 	str.w	r6, [r4, #-4]
  407bba:	2d0f      	cmp	r5, #15
  407bbc:	f103 0310 	add.w	r3, r3, #16
  407bc0:	f104 0410 	add.w	r4, r4, #16
  407bc4:	d8e8      	bhi.n	407b98 <memmove+0x38>
  407bc6:	f1a2 0310 	sub.w	r3, r2, #16
  407bca:	f023 030f 	bic.w	r3, r3, #15
  407bce:	f002 0e0f 	and.w	lr, r2, #15
  407bd2:	3310      	adds	r3, #16
  407bd4:	f1be 0f03 	cmp.w	lr, #3
  407bd8:	4419      	add	r1, r3
  407bda:	4403      	add	r3, r0
  407bdc:	d921      	bls.n	407c22 <memmove+0xc2>
  407bde:	1f1e      	subs	r6, r3, #4
  407be0:	460d      	mov	r5, r1
  407be2:	4674      	mov	r4, lr
  407be4:	3c04      	subs	r4, #4
  407be6:	f855 7b04 	ldr.w	r7, [r5], #4
  407bea:	f846 7f04 	str.w	r7, [r6, #4]!
  407bee:	2c03      	cmp	r4, #3
  407bf0:	d8f8      	bhi.n	407be4 <memmove+0x84>
  407bf2:	f1ae 0404 	sub.w	r4, lr, #4
  407bf6:	f024 0403 	bic.w	r4, r4, #3
  407bfa:	3404      	adds	r4, #4
  407bfc:	4421      	add	r1, r4
  407bfe:	4423      	add	r3, r4
  407c00:	f002 0203 	and.w	r2, r2, #3
  407c04:	b162      	cbz	r2, 407c20 <memmove+0xc0>
  407c06:	3b01      	subs	r3, #1
  407c08:	440a      	add	r2, r1
  407c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
  407c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
  407c12:	428a      	cmp	r2, r1
  407c14:	d1f9      	bne.n	407c0a <memmove+0xaa>
  407c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407c18:	4603      	mov	r3, r0
  407c1a:	e7f3      	b.n	407c04 <memmove+0xa4>
  407c1c:	4603      	mov	r3, r0
  407c1e:	e7f2      	b.n	407c06 <memmove+0xa6>
  407c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407c22:	4672      	mov	r2, lr
  407c24:	e7ee      	b.n	407c04 <memmove+0xa4>
  407c26:	bf00      	nop

00407c28 <_Balloc>:
  407c28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407c2a:	b570      	push	{r4, r5, r6, lr}
  407c2c:	4605      	mov	r5, r0
  407c2e:	460c      	mov	r4, r1
  407c30:	b14b      	cbz	r3, 407c46 <_Balloc+0x1e>
  407c32:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  407c36:	b180      	cbz	r0, 407c5a <_Balloc+0x32>
  407c38:	6802      	ldr	r2, [r0, #0]
  407c3a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  407c3e:	2300      	movs	r3, #0
  407c40:	6103      	str	r3, [r0, #16]
  407c42:	60c3      	str	r3, [r0, #12]
  407c44:	bd70      	pop	{r4, r5, r6, pc}
  407c46:	2221      	movs	r2, #33	; 0x21
  407c48:	2104      	movs	r1, #4
  407c4a:	f000 fd93 	bl	408774 <_calloc_r>
  407c4e:	64e8      	str	r0, [r5, #76]	; 0x4c
  407c50:	4603      	mov	r3, r0
  407c52:	2800      	cmp	r0, #0
  407c54:	d1ed      	bne.n	407c32 <_Balloc+0xa>
  407c56:	2000      	movs	r0, #0
  407c58:	bd70      	pop	{r4, r5, r6, pc}
  407c5a:	2101      	movs	r1, #1
  407c5c:	fa01 f604 	lsl.w	r6, r1, r4
  407c60:	1d72      	adds	r2, r6, #5
  407c62:	4628      	mov	r0, r5
  407c64:	0092      	lsls	r2, r2, #2
  407c66:	f000 fd85 	bl	408774 <_calloc_r>
  407c6a:	2800      	cmp	r0, #0
  407c6c:	d0f3      	beq.n	407c56 <_Balloc+0x2e>
  407c6e:	6044      	str	r4, [r0, #4]
  407c70:	6086      	str	r6, [r0, #8]
  407c72:	e7e4      	b.n	407c3e <_Balloc+0x16>

00407c74 <_Bfree>:
  407c74:	b131      	cbz	r1, 407c84 <_Bfree+0x10>
  407c76:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407c78:	684a      	ldr	r2, [r1, #4]
  407c7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  407c7e:	6008      	str	r0, [r1, #0]
  407c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407c84:	4770      	bx	lr
  407c86:	bf00      	nop

00407c88 <__multadd>:
  407c88:	b5f0      	push	{r4, r5, r6, r7, lr}
  407c8a:	690c      	ldr	r4, [r1, #16]
  407c8c:	b083      	sub	sp, #12
  407c8e:	460d      	mov	r5, r1
  407c90:	4606      	mov	r6, r0
  407c92:	f101 0e14 	add.w	lr, r1, #20
  407c96:	2700      	movs	r7, #0
  407c98:	f8de 0000 	ldr.w	r0, [lr]
  407c9c:	b281      	uxth	r1, r0
  407c9e:	fb02 3301 	mla	r3, r2, r1, r3
  407ca2:	0c01      	lsrs	r1, r0, #16
  407ca4:	0c18      	lsrs	r0, r3, #16
  407ca6:	fb02 0101 	mla	r1, r2, r1, r0
  407caa:	b29b      	uxth	r3, r3
  407cac:	3701      	adds	r7, #1
  407cae:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  407cb2:	42bc      	cmp	r4, r7
  407cb4:	f84e 3b04 	str.w	r3, [lr], #4
  407cb8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  407cbc:	dcec      	bgt.n	407c98 <__multadd+0x10>
  407cbe:	b13b      	cbz	r3, 407cd0 <__multadd+0x48>
  407cc0:	68aa      	ldr	r2, [r5, #8]
  407cc2:	4294      	cmp	r4, r2
  407cc4:	da07      	bge.n	407cd6 <__multadd+0x4e>
  407cc6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  407cca:	3401      	adds	r4, #1
  407ccc:	6153      	str	r3, [r2, #20]
  407cce:	612c      	str	r4, [r5, #16]
  407cd0:	4628      	mov	r0, r5
  407cd2:	b003      	add	sp, #12
  407cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407cd6:	6869      	ldr	r1, [r5, #4]
  407cd8:	9301      	str	r3, [sp, #4]
  407cda:	3101      	adds	r1, #1
  407cdc:	4630      	mov	r0, r6
  407cde:	f7ff ffa3 	bl	407c28 <_Balloc>
  407ce2:	692a      	ldr	r2, [r5, #16]
  407ce4:	3202      	adds	r2, #2
  407ce6:	f105 010c 	add.w	r1, r5, #12
  407cea:	4607      	mov	r7, r0
  407cec:	0092      	lsls	r2, r2, #2
  407cee:	300c      	adds	r0, #12
  407cf0:	f7fc fc20 	bl	404534 <memcpy>
  407cf4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407cf6:	6869      	ldr	r1, [r5, #4]
  407cf8:	9b01      	ldr	r3, [sp, #4]
  407cfa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407cfe:	6028      	str	r0, [r5, #0]
  407d00:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  407d04:	463d      	mov	r5, r7
  407d06:	e7de      	b.n	407cc6 <__multadd+0x3e>

00407d08 <__hi0bits>:
  407d08:	0c02      	lsrs	r2, r0, #16
  407d0a:	0412      	lsls	r2, r2, #16
  407d0c:	4603      	mov	r3, r0
  407d0e:	b9b2      	cbnz	r2, 407d3e <__hi0bits+0x36>
  407d10:	0403      	lsls	r3, r0, #16
  407d12:	2010      	movs	r0, #16
  407d14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  407d18:	bf04      	itt	eq
  407d1a:	021b      	lsleq	r3, r3, #8
  407d1c:	3008      	addeq	r0, #8
  407d1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  407d22:	bf04      	itt	eq
  407d24:	011b      	lsleq	r3, r3, #4
  407d26:	3004      	addeq	r0, #4
  407d28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  407d2c:	bf04      	itt	eq
  407d2e:	009b      	lsleq	r3, r3, #2
  407d30:	3002      	addeq	r0, #2
  407d32:	2b00      	cmp	r3, #0
  407d34:	db02      	blt.n	407d3c <__hi0bits+0x34>
  407d36:	005b      	lsls	r3, r3, #1
  407d38:	d403      	bmi.n	407d42 <__hi0bits+0x3a>
  407d3a:	2020      	movs	r0, #32
  407d3c:	4770      	bx	lr
  407d3e:	2000      	movs	r0, #0
  407d40:	e7e8      	b.n	407d14 <__hi0bits+0xc>
  407d42:	3001      	adds	r0, #1
  407d44:	4770      	bx	lr
  407d46:	bf00      	nop

00407d48 <__lo0bits>:
  407d48:	6803      	ldr	r3, [r0, #0]
  407d4a:	f013 0207 	ands.w	r2, r3, #7
  407d4e:	4601      	mov	r1, r0
  407d50:	d007      	beq.n	407d62 <__lo0bits+0x1a>
  407d52:	07da      	lsls	r2, r3, #31
  407d54:	d421      	bmi.n	407d9a <__lo0bits+0x52>
  407d56:	0798      	lsls	r0, r3, #30
  407d58:	d421      	bmi.n	407d9e <__lo0bits+0x56>
  407d5a:	089b      	lsrs	r3, r3, #2
  407d5c:	600b      	str	r3, [r1, #0]
  407d5e:	2002      	movs	r0, #2
  407d60:	4770      	bx	lr
  407d62:	b298      	uxth	r0, r3
  407d64:	b198      	cbz	r0, 407d8e <__lo0bits+0x46>
  407d66:	4610      	mov	r0, r2
  407d68:	f013 0fff 	tst.w	r3, #255	; 0xff
  407d6c:	bf04      	itt	eq
  407d6e:	0a1b      	lsreq	r3, r3, #8
  407d70:	3008      	addeq	r0, #8
  407d72:	071a      	lsls	r2, r3, #28
  407d74:	bf04      	itt	eq
  407d76:	091b      	lsreq	r3, r3, #4
  407d78:	3004      	addeq	r0, #4
  407d7a:	079a      	lsls	r2, r3, #30
  407d7c:	bf04      	itt	eq
  407d7e:	089b      	lsreq	r3, r3, #2
  407d80:	3002      	addeq	r0, #2
  407d82:	07da      	lsls	r2, r3, #31
  407d84:	d407      	bmi.n	407d96 <__lo0bits+0x4e>
  407d86:	085b      	lsrs	r3, r3, #1
  407d88:	d104      	bne.n	407d94 <__lo0bits+0x4c>
  407d8a:	2020      	movs	r0, #32
  407d8c:	4770      	bx	lr
  407d8e:	0c1b      	lsrs	r3, r3, #16
  407d90:	2010      	movs	r0, #16
  407d92:	e7e9      	b.n	407d68 <__lo0bits+0x20>
  407d94:	3001      	adds	r0, #1
  407d96:	600b      	str	r3, [r1, #0]
  407d98:	4770      	bx	lr
  407d9a:	2000      	movs	r0, #0
  407d9c:	4770      	bx	lr
  407d9e:	085b      	lsrs	r3, r3, #1
  407da0:	600b      	str	r3, [r1, #0]
  407da2:	2001      	movs	r0, #1
  407da4:	4770      	bx	lr
  407da6:	bf00      	nop

00407da8 <__i2b>:
  407da8:	b510      	push	{r4, lr}
  407daa:	460c      	mov	r4, r1
  407dac:	2101      	movs	r1, #1
  407dae:	f7ff ff3b 	bl	407c28 <_Balloc>
  407db2:	2201      	movs	r2, #1
  407db4:	6144      	str	r4, [r0, #20]
  407db6:	6102      	str	r2, [r0, #16]
  407db8:	bd10      	pop	{r4, pc}
  407dba:	bf00      	nop

00407dbc <__multiply>:
  407dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407dc0:	690c      	ldr	r4, [r1, #16]
  407dc2:	6915      	ldr	r5, [r2, #16]
  407dc4:	42ac      	cmp	r4, r5
  407dc6:	b083      	sub	sp, #12
  407dc8:	468b      	mov	fp, r1
  407dca:	4616      	mov	r6, r2
  407dcc:	da04      	bge.n	407dd8 <__multiply+0x1c>
  407dce:	4622      	mov	r2, r4
  407dd0:	46b3      	mov	fp, r6
  407dd2:	462c      	mov	r4, r5
  407dd4:	460e      	mov	r6, r1
  407dd6:	4615      	mov	r5, r2
  407dd8:	f8db 3008 	ldr.w	r3, [fp, #8]
  407ddc:	f8db 1004 	ldr.w	r1, [fp, #4]
  407de0:	eb04 0805 	add.w	r8, r4, r5
  407de4:	4598      	cmp	r8, r3
  407de6:	bfc8      	it	gt
  407de8:	3101      	addgt	r1, #1
  407dea:	f7ff ff1d 	bl	407c28 <_Balloc>
  407dee:	f100 0914 	add.w	r9, r0, #20
  407df2:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  407df6:	45d1      	cmp	r9, sl
  407df8:	9000      	str	r0, [sp, #0]
  407dfa:	d205      	bcs.n	407e08 <__multiply+0x4c>
  407dfc:	464b      	mov	r3, r9
  407dfe:	2100      	movs	r1, #0
  407e00:	f843 1b04 	str.w	r1, [r3], #4
  407e04:	459a      	cmp	sl, r3
  407e06:	d8fb      	bhi.n	407e00 <__multiply+0x44>
  407e08:	f106 0c14 	add.w	ip, r6, #20
  407e0c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  407e10:	f10b 0b14 	add.w	fp, fp, #20
  407e14:	459c      	cmp	ip, r3
  407e16:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  407e1a:	d24c      	bcs.n	407eb6 <__multiply+0xfa>
  407e1c:	f8cd a004 	str.w	sl, [sp, #4]
  407e20:	469a      	mov	sl, r3
  407e22:	f8dc 5000 	ldr.w	r5, [ip]
  407e26:	b2af      	uxth	r7, r5
  407e28:	b1ef      	cbz	r7, 407e66 <__multiply+0xaa>
  407e2a:	2100      	movs	r1, #0
  407e2c:	464d      	mov	r5, r9
  407e2e:	465e      	mov	r6, fp
  407e30:	460c      	mov	r4, r1
  407e32:	f856 2b04 	ldr.w	r2, [r6], #4
  407e36:	6828      	ldr	r0, [r5, #0]
  407e38:	b293      	uxth	r3, r2
  407e3a:	b281      	uxth	r1, r0
  407e3c:	fb07 1303 	mla	r3, r7, r3, r1
  407e40:	0c12      	lsrs	r2, r2, #16
  407e42:	0c01      	lsrs	r1, r0, #16
  407e44:	4423      	add	r3, r4
  407e46:	fb07 1102 	mla	r1, r7, r2, r1
  407e4a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  407e4e:	b29b      	uxth	r3, r3
  407e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  407e54:	45b6      	cmp	lr, r6
  407e56:	f845 3b04 	str.w	r3, [r5], #4
  407e5a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  407e5e:	d8e8      	bhi.n	407e32 <__multiply+0x76>
  407e60:	602c      	str	r4, [r5, #0]
  407e62:	f8dc 5000 	ldr.w	r5, [ip]
  407e66:	0c2d      	lsrs	r5, r5, #16
  407e68:	d01d      	beq.n	407ea6 <__multiply+0xea>
  407e6a:	f8d9 3000 	ldr.w	r3, [r9]
  407e6e:	4648      	mov	r0, r9
  407e70:	461c      	mov	r4, r3
  407e72:	4659      	mov	r1, fp
  407e74:	2200      	movs	r2, #0
  407e76:	880e      	ldrh	r6, [r1, #0]
  407e78:	0c24      	lsrs	r4, r4, #16
  407e7a:	fb05 4406 	mla	r4, r5, r6, r4
  407e7e:	4422      	add	r2, r4
  407e80:	b29b      	uxth	r3, r3
  407e82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  407e86:	f840 3b04 	str.w	r3, [r0], #4
  407e8a:	f851 3b04 	ldr.w	r3, [r1], #4
  407e8e:	6804      	ldr	r4, [r0, #0]
  407e90:	0c1b      	lsrs	r3, r3, #16
  407e92:	b2a6      	uxth	r6, r4
  407e94:	fb05 6303 	mla	r3, r5, r3, r6
  407e98:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  407e9c:	458e      	cmp	lr, r1
  407e9e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  407ea2:	d8e8      	bhi.n	407e76 <__multiply+0xba>
  407ea4:	6003      	str	r3, [r0, #0]
  407ea6:	f10c 0c04 	add.w	ip, ip, #4
  407eaa:	45e2      	cmp	sl, ip
  407eac:	f109 0904 	add.w	r9, r9, #4
  407eb0:	d8b7      	bhi.n	407e22 <__multiply+0x66>
  407eb2:	f8dd a004 	ldr.w	sl, [sp, #4]
  407eb6:	f1b8 0f00 	cmp.w	r8, #0
  407eba:	dd0b      	ble.n	407ed4 <__multiply+0x118>
  407ebc:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  407ec0:	f1aa 0a04 	sub.w	sl, sl, #4
  407ec4:	b11b      	cbz	r3, 407ece <__multiply+0x112>
  407ec6:	e005      	b.n	407ed4 <__multiply+0x118>
  407ec8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  407ecc:	b913      	cbnz	r3, 407ed4 <__multiply+0x118>
  407ece:	f1b8 0801 	subs.w	r8, r8, #1
  407ed2:	d1f9      	bne.n	407ec8 <__multiply+0x10c>
  407ed4:	9800      	ldr	r0, [sp, #0]
  407ed6:	f8c0 8010 	str.w	r8, [r0, #16]
  407eda:	b003      	add	sp, #12
  407edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407ee0 <__pow5mult>:
  407ee0:	f012 0303 	ands.w	r3, r2, #3
  407ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407ee8:	4614      	mov	r4, r2
  407eea:	4607      	mov	r7, r0
  407eec:	d12e      	bne.n	407f4c <__pow5mult+0x6c>
  407eee:	460d      	mov	r5, r1
  407ef0:	10a4      	asrs	r4, r4, #2
  407ef2:	d01c      	beq.n	407f2e <__pow5mult+0x4e>
  407ef4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  407ef6:	b396      	cbz	r6, 407f5e <__pow5mult+0x7e>
  407ef8:	07e3      	lsls	r3, r4, #31
  407efa:	f04f 0800 	mov.w	r8, #0
  407efe:	d406      	bmi.n	407f0e <__pow5mult+0x2e>
  407f00:	1064      	asrs	r4, r4, #1
  407f02:	d014      	beq.n	407f2e <__pow5mult+0x4e>
  407f04:	6830      	ldr	r0, [r6, #0]
  407f06:	b1a8      	cbz	r0, 407f34 <__pow5mult+0x54>
  407f08:	4606      	mov	r6, r0
  407f0a:	07e3      	lsls	r3, r4, #31
  407f0c:	d5f8      	bpl.n	407f00 <__pow5mult+0x20>
  407f0e:	4632      	mov	r2, r6
  407f10:	4629      	mov	r1, r5
  407f12:	4638      	mov	r0, r7
  407f14:	f7ff ff52 	bl	407dbc <__multiply>
  407f18:	b1b5      	cbz	r5, 407f48 <__pow5mult+0x68>
  407f1a:	686a      	ldr	r2, [r5, #4]
  407f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407f1e:	1064      	asrs	r4, r4, #1
  407f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407f24:	6029      	str	r1, [r5, #0]
  407f26:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  407f2a:	4605      	mov	r5, r0
  407f2c:	d1ea      	bne.n	407f04 <__pow5mult+0x24>
  407f2e:	4628      	mov	r0, r5
  407f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407f34:	4632      	mov	r2, r6
  407f36:	4631      	mov	r1, r6
  407f38:	4638      	mov	r0, r7
  407f3a:	f7ff ff3f 	bl	407dbc <__multiply>
  407f3e:	6030      	str	r0, [r6, #0]
  407f40:	f8c0 8000 	str.w	r8, [r0]
  407f44:	4606      	mov	r6, r0
  407f46:	e7e0      	b.n	407f0a <__pow5mult+0x2a>
  407f48:	4605      	mov	r5, r0
  407f4a:	e7d9      	b.n	407f00 <__pow5mult+0x20>
  407f4c:	1e5a      	subs	r2, r3, #1
  407f4e:	4d0b      	ldr	r5, [pc, #44]	; (407f7c <__pow5mult+0x9c>)
  407f50:	2300      	movs	r3, #0
  407f52:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  407f56:	f7ff fe97 	bl	407c88 <__multadd>
  407f5a:	4605      	mov	r5, r0
  407f5c:	e7c8      	b.n	407ef0 <__pow5mult+0x10>
  407f5e:	2101      	movs	r1, #1
  407f60:	4638      	mov	r0, r7
  407f62:	f7ff fe61 	bl	407c28 <_Balloc>
  407f66:	f240 2171 	movw	r1, #625	; 0x271
  407f6a:	2201      	movs	r2, #1
  407f6c:	2300      	movs	r3, #0
  407f6e:	6141      	str	r1, [r0, #20]
  407f70:	6102      	str	r2, [r0, #16]
  407f72:	4606      	mov	r6, r0
  407f74:	64b8      	str	r0, [r7, #72]	; 0x48
  407f76:	6003      	str	r3, [r0, #0]
  407f78:	e7be      	b.n	407ef8 <__pow5mult+0x18>
  407f7a:	bf00      	nop
  407f7c:	004093c0 	.word	0x004093c0

00407f80 <__lshift>:
  407f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407f84:	4691      	mov	r9, r2
  407f86:	690a      	ldr	r2, [r1, #16]
  407f88:	688b      	ldr	r3, [r1, #8]
  407f8a:	ea4f 1469 	mov.w	r4, r9, asr #5
  407f8e:	eb04 0802 	add.w	r8, r4, r2
  407f92:	f108 0501 	add.w	r5, r8, #1
  407f96:	429d      	cmp	r5, r3
  407f98:	460e      	mov	r6, r1
  407f9a:	4607      	mov	r7, r0
  407f9c:	6849      	ldr	r1, [r1, #4]
  407f9e:	dd04      	ble.n	407faa <__lshift+0x2a>
  407fa0:	005b      	lsls	r3, r3, #1
  407fa2:	429d      	cmp	r5, r3
  407fa4:	f101 0101 	add.w	r1, r1, #1
  407fa8:	dcfa      	bgt.n	407fa0 <__lshift+0x20>
  407faa:	4638      	mov	r0, r7
  407fac:	f7ff fe3c 	bl	407c28 <_Balloc>
  407fb0:	2c00      	cmp	r4, #0
  407fb2:	f100 0314 	add.w	r3, r0, #20
  407fb6:	dd06      	ble.n	407fc6 <__lshift+0x46>
  407fb8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  407fbc:	2100      	movs	r1, #0
  407fbe:	f843 1b04 	str.w	r1, [r3], #4
  407fc2:	429a      	cmp	r2, r3
  407fc4:	d1fb      	bne.n	407fbe <__lshift+0x3e>
  407fc6:	6934      	ldr	r4, [r6, #16]
  407fc8:	f106 0114 	add.w	r1, r6, #20
  407fcc:	f019 091f 	ands.w	r9, r9, #31
  407fd0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407fd4:	d01d      	beq.n	408012 <__lshift+0x92>
  407fd6:	f1c9 0c20 	rsb	ip, r9, #32
  407fda:	2200      	movs	r2, #0
  407fdc:	680c      	ldr	r4, [r1, #0]
  407fde:	fa04 f409 	lsl.w	r4, r4, r9
  407fe2:	4314      	orrs	r4, r2
  407fe4:	f843 4b04 	str.w	r4, [r3], #4
  407fe8:	f851 2b04 	ldr.w	r2, [r1], #4
  407fec:	458e      	cmp	lr, r1
  407fee:	fa22 f20c 	lsr.w	r2, r2, ip
  407ff2:	d8f3      	bhi.n	407fdc <__lshift+0x5c>
  407ff4:	601a      	str	r2, [r3, #0]
  407ff6:	b10a      	cbz	r2, 407ffc <__lshift+0x7c>
  407ff8:	f108 0502 	add.w	r5, r8, #2
  407ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407ffe:	6872      	ldr	r2, [r6, #4]
  408000:	3d01      	subs	r5, #1
  408002:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408006:	6105      	str	r5, [r0, #16]
  408008:	6031      	str	r1, [r6, #0]
  40800a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40800e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408012:	3b04      	subs	r3, #4
  408014:	f851 2b04 	ldr.w	r2, [r1], #4
  408018:	f843 2f04 	str.w	r2, [r3, #4]!
  40801c:	458e      	cmp	lr, r1
  40801e:	d8f9      	bhi.n	408014 <__lshift+0x94>
  408020:	e7ec      	b.n	407ffc <__lshift+0x7c>
  408022:	bf00      	nop

00408024 <__mcmp>:
  408024:	b430      	push	{r4, r5}
  408026:	690b      	ldr	r3, [r1, #16]
  408028:	4605      	mov	r5, r0
  40802a:	6900      	ldr	r0, [r0, #16]
  40802c:	1ac0      	subs	r0, r0, r3
  40802e:	d10f      	bne.n	408050 <__mcmp+0x2c>
  408030:	009b      	lsls	r3, r3, #2
  408032:	3514      	adds	r5, #20
  408034:	3114      	adds	r1, #20
  408036:	4419      	add	r1, r3
  408038:	442b      	add	r3, r5
  40803a:	e001      	b.n	408040 <__mcmp+0x1c>
  40803c:	429d      	cmp	r5, r3
  40803e:	d207      	bcs.n	408050 <__mcmp+0x2c>
  408040:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  408044:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  408048:	4294      	cmp	r4, r2
  40804a:	d0f7      	beq.n	40803c <__mcmp+0x18>
  40804c:	d302      	bcc.n	408054 <__mcmp+0x30>
  40804e:	2001      	movs	r0, #1
  408050:	bc30      	pop	{r4, r5}
  408052:	4770      	bx	lr
  408054:	f04f 30ff 	mov.w	r0, #4294967295
  408058:	e7fa      	b.n	408050 <__mcmp+0x2c>
  40805a:	bf00      	nop

0040805c <__mdiff>:
  40805c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408060:	690f      	ldr	r7, [r1, #16]
  408062:	460e      	mov	r6, r1
  408064:	6911      	ldr	r1, [r2, #16]
  408066:	1a7f      	subs	r7, r7, r1
  408068:	2f00      	cmp	r7, #0
  40806a:	4690      	mov	r8, r2
  40806c:	d117      	bne.n	40809e <__mdiff+0x42>
  40806e:	0089      	lsls	r1, r1, #2
  408070:	f106 0514 	add.w	r5, r6, #20
  408074:	f102 0e14 	add.w	lr, r2, #20
  408078:	186b      	adds	r3, r5, r1
  40807a:	4471      	add	r1, lr
  40807c:	e001      	b.n	408082 <__mdiff+0x26>
  40807e:	429d      	cmp	r5, r3
  408080:	d25c      	bcs.n	40813c <__mdiff+0xe0>
  408082:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  408086:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40808a:	42a2      	cmp	r2, r4
  40808c:	d0f7      	beq.n	40807e <__mdiff+0x22>
  40808e:	d25e      	bcs.n	40814e <__mdiff+0xf2>
  408090:	4633      	mov	r3, r6
  408092:	462c      	mov	r4, r5
  408094:	4646      	mov	r6, r8
  408096:	4675      	mov	r5, lr
  408098:	4698      	mov	r8, r3
  40809a:	2701      	movs	r7, #1
  40809c:	e005      	b.n	4080aa <__mdiff+0x4e>
  40809e:	db58      	blt.n	408152 <__mdiff+0xf6>
  4080a0:	f106 0514 	add.w	r5, r6, #20
  4080a4:	f108 0414 	add.w	r4, r8, #20
  4080a8:	2700      	movs	r7, #0
  4080aa:	6871      	ldr	r1, [r6, #4]
  4080ac:	f7ff fdbc 	bl	407c28 <_Balloc>
  4080b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4080b4:	6936      	ldr	r6, [r6, #16]
  4080b6:	60c7      	str	r7, [r0, #12]
  4080b8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4080bc:	46a6      	mov	lr, r4
  4080be:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4080c2:	f100 0414 	add.w	r4, r0, #20
  4080c6:	2300      	movs	r3, #0
  4080c8:	f85e 1b04 	ldr.w	r1, [lr], #4
  4080cc:	f855 8b04 	ldr.w	r8, [r5], #4
  4080d0:	b28a      	uxth	r2, r1
  4080d2:	fa13 f388 	uxtah	r3, r3, r8
  4080d6:	0c09      	lsrs	r1, r1, #16
  4080d8:	1a9a      	subs	r2, r3, r2
  4080da:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4080de:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4080e2:	b292      	uxth	r2, r2
  4080e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4080e8:	45f4      	cmp	ip, lr
  4080ea:	f844 2b04 	str.w	r2, [r4], #4
  4080ee:	ea4f 4323 	mov.w	r3, r3, asr #16
  4080f2:	d8e9      	bhi.n	4080c8 <__mdiff+0x6c>
  4080f4:	42af      	cmp	r7, r5
  4080f6:	d917      	bls.n	408128 <__mdiff+0xcc>
  4080f8:	46a4      	mov	ip, r4
  4080fa:	46ae      	mov	lr, r5
  4080fc:	f85e 2b04 	ldr.w	r2, [lr], #4
  408100:	fa13 f382 	uxtah	r3, r3, r2
  408104:	1419      	asrs	r1, r3, #16
  408106:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40810a:	b29b      	uxth	r3, r3
  40810c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  408110:	4577      	cmp	r7, lr
  408112:	f84c 2b04 	str.w	r2, [ip], #4
  408116:	ea4f 4321 	mov.w	r3, r1, asr #16
  40811a:	d8ef      	bhi.n	4080fc <__mdiff+0xa0>
  40811c:	43ed      	mvns	r5, r5
  40811e:	442f      	add	r7, r5
  408120:	f027 0703 	bic.w	r7, r7, #3
  408124:	3704      	adds	r7, #4
  408126:	443c      	add	r4, r7
  408128:	3c04      	subs	r4, #4
  40812a:	b922      	cbnz	r2, 408136 <__mdiff+0xda>
  40812c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  408130:	3e01      	subs	r6, #1
  408132:	2b00      	cmp	r3, #0
  408134:	d0fa      	beq.n	40812c <__mdiff+0xd0>
  408136:	6106      	str	r6, [r0, #16]
  408138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40813c:	2100      	movs	r1, #0
  40813e:	f7ff fd73 	bl	407c28 <_Balloc>
  408142:	2201      	movs	r2, #1
  408144:	2300      	movs	r3, #0
  408146:	6102      	str	r2, [r0, #16]
  408148:	6143      	str	r3, [r0, #20]
  40814a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40814e:	4674      	mov	r4, lr
  408150:	e7ab      	b.n	4080aa <__mdiff+0x4e>
  408152:	4633      	mov	r3, r6
  408154:	f106 0414 	add.w	r4, r6, #20
  408158:	f102 0514 	add.w	r5, r2, #20
  40815c:	4616      	mov	r6, r2
  40815e:	2701      	movs	r7, #1
  408160:	4698      	mov	r8, r3
  408162:	e7a2      	b.n	4080aa <__mdiff+0x4e>

00408164 <__d2b>:
  408164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408168:	b082      	sub	sp, #8
  40816a:	2101      	movs	r1, #1
  40816c:	461c      	mov	r4, r3
  40816e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  408172:	4615      	mov	r5, r2
  408174:	9e08      	ldr	r6, [sp, #32]
  408176:	f7ff fd57 	bl	407c28 <_Balloc>
  40817a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40817e:	4680      	mov	r8, r0
  408180:	b10f      	cbz	r7, 408186 <__d2b+0x22>
  408182:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  408186:	9401      	str	r4, [sp, #4]
  408188:	b31d      	cbz	r5, 4081d2 <__d2b+0x6e>
  40818a:	a802      	add	r0, sp, #8
  40818c:	f840 5d08 	str.w	r5, [r0, #-8]!
  408190:	f7ff fdda 	bl	407d48 <__lo0bits>
  408194:	2800      	cmp	r0, #0
  408196:	d134      	bne.n	408202 <__d2b+0x9e>
  408198:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40819c:	f8c8 2014 	str.w	r2, [r8, #20]
  4081a0:	2b00      	cmp	r3, #0
  4081a2:	bf0c      	ite	eq
  4081a4:	2101      	moveq	r1, #1
  4081a6:	2102      	movne	r1, #2
  4081a8:	f8c8 3018 	str.w	r3, [r8, #24]
  4081ac:	f8c8 1010 	str.w	r1, [r8, #16]
  4081b0:	b9df      	cbnz	r7, 4081ea <__d2b+0x86>
  4081b2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4081b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4081ba:	6030      	str	r0, [r6, #0]
  4081bc:	6918      	ldr	r0, [r3, #16]
  4081be:	f7ff fda3 	bl	407d08 <__hi0bits>
  4081c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4081c4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4081c8:	6018      	str	r0, [r3, #0]
  4081ca:	4640      	mov	r0, r8
  4081cc:	b002      	add	sp, #8
  4081ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4081d2:	a801      	add	r0, sp, #4
  4081d4:	f7ff fdb8 	bl	407d48 <__lo0bits>
  4081d8:	9b01      	ldr	r3, [sp, #4]
  4081da:	f8c8 3014 	str.w	r3, [r8, #20]
  4081de:	2101      	movs	r1, #1
  4081e0:	3020      	adds	r0, #32
  4081e2:	f8c8 1010 	str.w	r1, [r8, #16]
  4081e6:	2f00      	cmp	r7, #0
  4081e8:	d0e3      	beq.n	4081b2 <__d2b+0x4e>
  4081ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4081ec:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4081f0:	4407      	add	r7, r0
  4081f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4081f6:	6037      	str	r7, [r6, #0]
  4081f8:	6018      	str	r0, [r3, #0]
  4081fa:	4640      	mov	r0, r8
  4081fc:	b002      	add	sp, #8
  4081fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408202:	e89d 000a 	ldmia.w	sp, {r1, r3}
  408206:	f1c0 0220 	rsb	r2, r0, #32
  40820a:	fa03 f202 	lsl.w	r2, r3, r2
  40820e:	430a      	orrs	r2, r1
  408210:	40c3      	lsrs	r3, r0
  408212:	9301      	str	r3, [sp, #4]
  408214:	f8c8 2014 	str.w	r2, [r8, #20]
  408218:	e7c2      	b.n	4081a0 <__d2b+0x3c>
  40821a:	bf00      	nop

0040821c <_realloc_r>:
  40821c:	2900      	cmp	r1, #0
  40821e:	f000 8095 	beq.w	40834c <_realloc_r+0x130>
  408222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408226:	460d      	mov	r5, r1
  408228:	4616      	mov	r6, r2
  40822a:	b083      	sub	sp, #12
  40822c:	4680      	mov	r8, r0
  40822e:	f106 070b 	add.w	r7, r6, #11
  408232:	f7fc fa67 	bl	404704 <__malloc_lock>
  408236:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40823a:	2f16      	cmp	r7, #22
  40823c:	f02e 0403 	bic.w	r4, lr, #3
  408240:	f1a5 0908 	sub.w	r9, r5, #8
  408244:	d83c      	bhi.n	4082c0 <_realloc_r+0xa4>
  408246:	2210      	movs	r2, #16
  408248:	4617      	mov	r7, r2
  40824a:	42be      	cmp	r6, r7
  40824c:	d83d      	bhi.n	4082ca <_realloc_r+0xae>
  40824e:	4294      	cmp	r4, r2
  408250:	da43      	bge.n	4082da <_realloc_r+0xbe>
  408252:	4bc4      	ldr	r3, [pc, #784]	; (408564 <_realloc_r+0x348>)
  408254:	6899      	ldr	r1, [r3, #8]
  408256:	eb09 0004 	add.w	r0, r9, r4
  40825a:	4288      	cmp	r0, r1
  40825c:	f000 80b4 	beq.w	4083c8 <_realloc_r+0x1ac>
  408260:	6843      	ldr	r3, [r0, #4]
  408262:	f023 0101 	bic.w	r1, r3, #1
  408266:	4401      	add	r1, r0
  408268:	6849      	ldr	r1, [r1, #4]
  40826a:	07c9      	lsls	r1, r1, #31
  40826c:	d54c      	bpl.n	408308 <_realloc_r+0xec>
  40826e:	f01e 0f01 	tst.w	lr, #1
  408272:	f000 809b 	beq.w	4083ac <_realloc_r+0x190>
  408276:	4631      	mov	r1, r6
  408278:	4640      	mov	r0, r8
  40827a:	f7fb feab 	bl	403fd4 <_malloc_r>
  40827e:	4606      	mov	r6, r0
  408280:	2800      	cmp	r0, #0
  408282:	d03a      	beq.n	4082fa <_realloc_r+0xde>
  408284:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408288:	f023 0301 	bic.w	r3, r3, #1
  40828c:	444b      	add	r3, r9
  40828e:	f1a0 0208 	sub.w	r2, r0, #8
  408292:	429a      	cmp	r2, r3
  408294:	f000 8121 	beq.w	4084da <_realloc_r+0x2be>
  408298:	1f22      	subs	r2, r4, #4
  40829a:	2a24      	cmp	r2, #36	; 0x24
  40829c:	f200 8107 	bhi.w	4084ae <_realloc_r+0x292>
  4082a0:	2a13      	cmp	r2, #19
  4082a2:	f200 80db 	bhi.w	40845c <_realloc_r+0x240>
  4082a6:	4603      	mov	r3, r0
  4082a8:	462a      	mov	r2, r5
  4082aa:	6811      	ldr	r1, [r2, #0]
  4082ac:	6019      	str	r1, [r3, #0]
  4082ae:	6851      	ldr	r1, [r2, #4]
  4082b0:	6059      	str	r1, [r3, #4]
  4082b2:	6892      	ldr	r2, [r2, #8]
  4082b4:	609a      	str	r2, [r3, #8]
  4082b6:	4629      	mov	r1, r5
  4082b8:	4640      	mov	r0, r8
  4082ba:	f7ff f8e9 	bl	407490 <_free_r>
  4082be:	e01c      	b.n	4082fa <_realloc_r+0xde>
  4082c0:	f027 0707 	bic.w	r7, r7, #7
  4082c4:	2f00      	cmp	r7, #0
  4082c6:	463a      	mov	r2, r7
  4082c8:	dabf      	bge.n	40824a <_realloc_r+0x2e>
  4082ca:	2600      	movs	r6, #0
  4082cc:	230c      	movs	r3, #12
  4082ce:	4630      	mov	r0, r6
  4082d0:	f8c8 3000 	str.w	r3, [r8]
  4082d4:	b003      	add	sp, #12
  4082d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4082da:	462e      	mov	r6, r5
  4082dc:	1be3      	subs	r3, r4, r7
  4082de:	2b0f      	cmp	r3, #15
  4082e0:	d81e      	bhi.n	408320 <_realloc_r+0x104>
  4082e2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4082e6:	f003 0301 	and.w	r3, r3, #1
  4082ea:	4323      	orrs	r3, r4
  4082ec:	444c      	add	r4, r9
  4082ee:	f8c9 3004 	str.w	r3, [r9, #4]
  4082f2:	6863      	ldr	r3, [r4, #4]
  4082f4:	f043 0301 	orr.w	r3, r3, #1
  4082f8:	6063      	str	r3, [r4, #4]
  4082fa:	4640      	mov	r0, r8
  4082fc:	f7fc fa08 	bl	404710 <__malloc_unlock>
  408300:	4630      	mov	r0, r6
  408302:	b003      	add	sp, #12
  408304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408308:	f023 0303 	bic.w	r3, r3, #3
  40830c:	18e1      	adds	r1, r4, r3
  40830e:	4291      	cmp	r1, r2
  408310:	db1f      	blt.n	408352 <_realloc_r+0x136>
  408312:	68c3      	ldr	r3, [r0, #12]
  408314:	6882      	ldr	r2, [r0, #8]
  408316:	462e      	mov	r6, r5
  408318:	60d3      	str	r3, [r2, #12]
  40831a:	460c      	mov	r4, r1
  40831c:	609a      	str	r2, [r3, #8]
  40831e:	e7dd      	b.n	4082dc <_realloc_r+0xc0>
  408320:	f8d9 2004 	ldr.w	r2, [r9, #4]
  408324:	eb09 0107 	add.w	r1, r9, r7
  408328:	f002 0201 	and.w	r2, r2, #1
  40832c:	444c      	add	r4, r9
  40832e:	f043 0301 	orr.w	r3, r3, #1
  408332:	4317      	orrs	r7, r2
  408334:	f8c9 7004 	str.w	r7, [r9, #4]
  408338:	604b      	str	r3, [r1, #4]
  40833a:	6863      	ldr	r3, [r4, #4]
  40833c:	f043 0301 	orr.w	r3, r3, #1
  408340:	3108      	adds	r1, #8
  408342:	6063      	str	r3, [r4, #4]
  408344:	4640      	mov	r0, r8
  408346:	f7ff f8a3 	bl	407490 <_free_r>
  40834a:	e7d6      	b.n	4082fa <_realloc_r+0xde>
  40834c:	4611      	mov	r1, r2
  40834e:	f7fb be41 	b.w	403fd4 <_malloc_r>
  408352:	f01e 0f01 	tst.w	lr, #1
  408356:	d18e      	bne.n	408276 <_realloc_r+0x5a>
  408358:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40835c:	eba9 0a01 	sub.w	sl, r9, r1
  408360:	f8da 1004 	ldr.w	r1, [sl, #4]
  408364:	f021 0103 	bic.w	r1, r1, #3
  408368:	440b      	add	r3, r1
  40836a:	4423      	add	r3, r4
  40836c:	4293      	cmp	r3, r2
  40836e:	db25      	blt.n	4083bc <_realloc_r+0x1a0>
  408370:	68c2      	ldr	r2, [r0, #12]
  408372:	6881      	ldr	r1, [r0, #8]
  408374:	4656      	mov	r6, sl
  408376:	60ca      	str	r2, [r1, #12]
  408378:	6091      	str	r1, [r2, #8]
  40837a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40837e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408382:	1f22      	subs	r2, r4, #4
  408384:	2a24      	cmp	r2, #36	; 0x24
  408386:	60c1      	str	r1, [r0, #12]
  408388:	6088      	str	r0, [r1, #8]
  40838a:	f200 8094 	bhi.w	4084b6 <_realloc_r+0x29a>
  40838e:	2a13      	cmp	r2, #19
  408390:	d96f      	bls.n	408472 <_realloc_r+0x256>
  408392:	6829      	ldr	r1, [r5, #0]
  408394:	f8ca 1008 	str.w	r1, [sl, #8]
  408398:	6869      	ldr	r1, [r5, #4]
  40839a:	f8ca 100c 	str.w	r1, [sl, #12]
  40839e:	2a1b      	cmp	r2, #27
  4083a0:	f200 80a2 	bhi.w	4084e8 <_realloc_r+0x2cc>
  4083a4:	3508      	adds	r5, #8
  4083a6:	f10a 0210 	add.w	r2, sl, #16
  4083aa:	e063      	b.n	408474 <_realloc_r+0x258>
  4083ac:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4083b0:	eba9 0a03 	sub.w	sl, r9, r3
  4083b4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4083b8:	f021 0103 	bic.w	r1, r1, #3
  4083bc:	1863      	adds	r3, r4, r1
  4083be:	4293      	cmp	r3, r2
  4083c0:	f6ff af59 	blt.w	408276 <_realloc_r+0x5a>
  4083c4:	4656      	mov	r6, sl
  4083c6:	e7d8      	b.n	40837a <_realloc_r+0x15e>
  4083c8:	6841      	ldr	r1, [r0, #4]
  4083ca:	f021 0b03 	bic.w	fp, r1, #3
  4083ce:	44a3      	add	fp, r4
  4083d0:	f107 0010 	add.w	r0, r7, #16
  4083d4:	4583      	cmp	fp, r0
  4083d6:	da56      	bge.n	408486 <_realloc_r+0x26a>
  4083d8:	f01e 0f01 	tst.w	lr, #1
  4083dc:	f47f af4b 	bne.w	408276 <_realloc_r+0x5a>
  4083e0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4083e4:	eba9 0a01 	sub.w	sl, r9, r1
  4083e8:	f8da 1004 	ldr.w	r1, [sl, #4]
  4083ec:	f021 0103 	bic.w	r1, r1, #3
  4083f0:	448b      	add	fp, r1
  4083f2:	4558      	cmp	r0, fp
  4083f4:	dce2      	bgt.n	4083bc <_realloc_r+0x1a0>
  4083f6:	4656      	mov	r6, sl
  4083f8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4083fc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408400:	1f22      	subs	r2, r4, #4
  408402:	2a24      	cmp	r2, #36	; 0x24
  408404:	60c1      	str	r1, [r0, #12]
  408406:	6088      	str	r0, [r1, #8]
  408408:	f200 808f 	bhi.w	40852a <_realloc_r+0x30e>
  40840c:	2a13      	cmp	r2, #19
  40840e:	f240 808a 	bls.w	408526 <_realloc_r+0x30a>
  408412:	6829      	ldr	r1, [r5, #0]
  408414:	f8ca 1008 	str.w	r1, [sl, #8]
  408418:	6869      	ldr	r1, [r5, #4]
  40841a:	f8ca 100c 	str.w	r1, [sl, #12]
  40841e:	2a1b      	cmp	r2, #27
  408420:	f200 808a 	bhi.w	408538 <_realloc_r+0x31c>
  408424:	3508      	adds	r5, #8
  408426:	f10a 0210 	add.w	r2, sl, #16
  40842a:	6829      	ldr	r1, [r5, #0]
  40842c:	6011      	str	r1, [r2, #0]
  40842e:	6869      	ldr	r1, [r5, #4]
  408430:	6051      	str	r1, [r2, #4]
  408432:	68a9      	ldr	r1, [r5, #8]
  408434:	6091      	str	r1, [r2, #8]
  408436:	eb0a 0107 	add.w	r1, sl, r7
  40843a:	ebab 0207 	sub.w	r2, fp, r7
  40843e:	f042 0201 	orr.w	r2, r2, #1
  408442:	6099      	str	r1, [r3, #8]
  408444:	604a      	str	r2, [r1, #4]
  408446:	f8da 3004 	ldr.w	r3, [sl, #4]
  40844a:	f003 0301 	and.w	r3, r3, #1
  40844e:	431f      	orrs	r7, r3
  408450:	4640      	mov	r0, r8
  408452:	f8ca 7004 	str.w	r7, [sl, #4]
  408456:	f7fc f95b 	bl	404710 <__malloc_unlock>
  40845a:	e751      	b.n	408300 <_realloc_r+0xe4>
  40845c:	682b      	ldr	r3, [r5, #0]
  40845e:	6003      	str	r3, [r0, #0]
  408460:	686b      	ldr	r3, [r5, #4]
  408462:	6043      	str	r3, [r0, #4]
  408464:	2a1b      	cmp	r2, #27
  408466:	d82d      	bhi.n	4084c4 <_realloc_r+0x2a8>
  408468:	f100 0308 	add.w	r3, r0, #8
  40846c:	f105 0208 	add.w	r2, r5, #8
  408470:	e71b      	b.n	4082aa <_realloc_r+0x8e>
  408472:	4632      	mov	r2, r6
  408474:	6829      	ldr	r1, [r5, #0]
  408476:	6011      	str	r1, [r2, #0]
  408478:	6869      	ldr	r1, [r5, #4]
  40847a:	6051      	str	r1, [r2, #4]
  40847c:	68a9      	ldr	r1, [r5, #8]
  40847e:	6091      	str	r1, [r2, #8]
  408480:	461c      	mov	r4, r3
  408482:	46d1      	mov	r9, sl
  408484:	e72a      	b.n	4082dc <_realloc_r+0xc0>
  408486:	eb09 0107 	add.w	r1, r9, r7
  40848a:	ebab 0b07 	sub.w	fp, fp, r7
  40848e:	f04b 0201 	orr.w	r2, fp, #1
  408492:	6099      	str	r1, [r3, #8]
  408494:	604a      	str	r2, [r1, #4]
  408496:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40849a:	f003 0301 	and.w	r3, r3, #1
  40849e:	431f      	orrs	r7, r3
  4084a0:	4640      	mov	r0, r8
  4084a2:	f845 7c04 	str.w	r7, [r5, #-4]
  4084a6:	f7fc f933 	bl	404710 <__malloc_unlock>
  4084aa:	462e      	mov	r6, r5
  4084ac:	e728      	b.n	408300 <_realloc_r+0xe4>
  4084ae:	4629      	mov	r1, r5
  4084b0:	f7ff fb56 	bl	407b60 <memmove>
  4084b4:	e6ff      	b.n	4082b6 <_realloc_r+0x9a>
  4084b6:	4629      	mov	r1, r5
  4084b8:	4630      	mov	r0, r6
  4084ba:	461c      	mov	r4, r3
  4084bc:	46d1      	mov	r9, sl
  4084be:	f7ff fb4f 	bl	407b60 <memmove>
  4084c2:	e70b      	b.n	4082dc <_realloc_r+0xc0>
  4084c4:	68ab      	ldr	r3, [r5, #8]
  4084c6:	6083      	str	r3, [r0, #8]
  4084c8:	68eb      	ldr	r3, [r5, #12]
  4084ca:	60c3      	str	r3, [r0, #12]
  4084cc:	2a24      	cmp	r2, #36	; 0x24
  4084ce:	d017      	beq.n	408500 <_realloc_r+0x2e4>
  4084d0:	f100 0310 	add.w	r3, r0, #16
  4084d4:	f105 0210 	add.w	r2, r5, #16
  4084d8:	e6e7      	b.n	4082aa <_realloc_r+0x8e>
  4084da:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4084de:	f023 0303 	bic.w	r3, r3, #3
  4084e2:	441c      	add	r4, r3
  4084e4:	462e      	mov	r6, r5
  4084e6:	e6f9      	b.n	4082dc <_realloc_r+0xc0>
  4084e8:	68a9      	ldr	r1, [r5, #8]
  4084ea:	f8ca 1010 	str.w	r1, [sl, #16]
  4084ee:	68e9      	ldr	r1, [r5, #12]
  4084f0:	f8ca 1014 	str.w	r1, [sl, #20]
  4084f4:	2a24      	cmp	r2, #36	; 0x24
  4084f6:	d00c      	beq.n	408512 <_realloc_r+0x2f6>
  4084f8:	3510      	adds	r5, #16
  4084fa:	f10a 0218 	add.w	r2, sl, #24
  4084fe:	e7b9      	b.n	408474 <_realloc_r+0x258>
  408500:	692b      	ldr	r3, [r5, #16]
  408502:	6103      	str	r3, [r0, #16]
  408504:	696b      	ldr	r3, [r5, #20]
  408506:	6143      	str	r3, [r0, #20]
  408508:	f105 0218 	add.w	r2, r5, #24
  40850c:	f100 0318 	add.w	r3, r0, #24
  408510:	e6cb      	b.n	4082aa <_realloc_r+0x8e>
  408512:	692a      	ldr	r2, [r5, #16]
  408514:	f8ca 2018 	str.w	r2, [sl, #24]
  408518:	696a      	ldr	r2, [r5, #20]
  40851a:	f8ca 201c 	str.w	r2, [sl, #28]
  40851e:	3518      	adds	r5, #24
  408520:	f10a 0220 	add.w	r2, sl, #32
  408524:	e7a6      	b.n	408474 <_realloc_r+0x258>
  408526:	4632      	mov	r2, r6
  408528:	e77f      	b.n	40842a <_realloc_r+0x20e>
  40852a:	4629      	mov	r1, r5
  40852c:	4630      	mov	r0, r6
  40852e:	9301      	str	r3, [sp, #4]
  408530:	f7ff fb16 	bl	407b60 <memmove>
  408534:	9b01      	ldr	r3, [sp, #4]
  408536:	e77e      	b.n	408436 <_realloc_r+0x21a>
  408538:	68a9      	ldr	r1, [r5, #8]
  40853a:	f8ca 1010 	str.w	r1, [sl, #16]
  40853e:	68e9      	ldr	r1, [r5, #12]
  408540:	f8ca 1014 	str.w	r1, [sl, #20]
  408544:	2a24      	cmp	r2, #36	; 0x24
  408546:	d003      	beq.n	408550 <_realloc_r+0x334>
  408548:	3510      	adds	r5, #16
  40854a:	f10a 0218 	add.w	r2, sl, #24
  40854e:	e76c      	b.n	40842a <_realloc_r+0x20e>
  408550:	692a      	ldr	r2, [r5, #16]
  408552:	f8ca 2018 	str.w	r2, [sl, #24]
  408556:	696a      	ldr	r2, [r5, #20]
  408558:	f8ca 201c 	str.w	r2, [sl, #28]
  40855c:	3518      	adds	r5, #24
  40855e:	f10a 0220 	add.w	r2, sl, #32
  408562:	e762      	b.n	40842a <_realloc_r+0x20e>
  408564:	20400440 	.word	0x20400440

00408568 <__sread>:
  408568:	b510      	push	{r4, lr}
  40856a:	460c      	mov	r4, r1
  40856c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408570:	f000 fa88 	bl	408a84 <_read_r>
  408574:	2800      	cmp	r0, #0
  408576:	db03      	blt.n	408580 <__sread+0x18>
  408578:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40857a:	4403      	add	r3, r0
  40857c:	6523      	str	r3, [r4, #80]	; 0x50
  40857e:	bd10      	pop	{r4, pc}
  408580:	89a3      	ldrh	r3, [r4, #12]
  408582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408586:	81a3      	strh	r3, [r4, #12]
  408588:	bd10      	pop	{r4, pc}
  40858a:	bf00      	nop

0040858c <__swrite>:
  40858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408590:	4616      	mov	r6, r2
  408592:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  408596:	461f      	mov	r7, r3
  408598:	05d3      	lsls	r3, r2, #23
  40859a:	460c      	mov	r4, r1
  40859c:	4605      	mov	r5, r0
  40859e:	d507      	bpl.n	4085b0 <__swrite+0x24>
  4085a0:	2200      	movs	r2, #0
  4085a2:	2302      	movs	r3, #2
  4085a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4085a8:	f000 fa40 	bl	408a2c <_lseek_r>
  4085ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4085b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4085b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4085b8:	81a2      	strh	r2, [r4, #12]
  4085ba:	463b      	mov	r3, r7
  4085bc:	4632      	mov	r2, r6
  4085be:	4628      	mov	r0, r5
  4085c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4085c4:	f000 b85e 	b.w	408684 <_write_r>

004085c8 <__sseek>:
  4085c8:	b510      	push	{r4, lr}
  4085ca:	460c      	mov	r4, r1
  4085cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4085d0:	f000 fa2c 	bl	408a2c <_lseek_r>
  4085d4:	89a3      	ldrh	r3, [r4, #12]
  4085d6:	1c42      	adds	r2, r0, #1
  4085d8:	bf0e      	itee	eq
  4085da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4085de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4085e2:	6520      	strne	r0, [r4, #80]	; 0x50
  4085e4:	81a3      	strh	r3, [r4, #12]
  4085e6:	bd10      	pop	{r4, pc}

004085e8 <__sclose>:
  4085e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4085ec:	f000 b8f2 	b.w	4087d4 <_close_r>

004085f0 <__sprint_r.part.0>:
  4085f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4085f4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4085f6:	049c      	lsls	r4, r3, #18
  4085f8:	4693      	mov	fp, r2
  4085fa:	d52f      	bpl.n	40865c <__sprint_r.part.0+0x6c>
  4085fc:	6893      	ldr	r3, [r2, #8]
  4085fe:	6812      	ldr	r2, [r2, #0]
  408600:	b353      	cbz	r3, 408658 <__sprint_r.part.0+0x68>
  408602:	460e      	mov	r6, r1
  408604:	4607      	mov	r7, r0
  408606:	f102 0908 	add.w	r9, r2, #8
  40860a:	e919 0420 	ldmdb	r9, {r5, sl}
  40860e:	ea5f 089a 	movs.w	r8, sl, lsr #2
  408612:	d017      	beq.n	408644 <__sprint_r.part.0+0x54>
  408614:	3d04      	subs	r5, #4
  408616:	2400      	movs	r4, #0
  408618:	e001      	b.n	40861e <__sprint_r.part.0+0x2e>
  40861a:	45a0      	cmp	r8, r4
  40861c:	d010      	beq.n	408640 <__sprint_r.part.0+0x50>
  40861e:	4632      	mov	r2, r6
  408620:	f855 1f04 	ldr.w	r1, [r5, #4]!
  408624:	4638      	mov	r0, r7
  408626:	f000 f999 	bl	40895c <_fputwc_r>
  40862a:	1c43      	adds	r3, r0, #1
  40862c:	f104 0401 	add.w	r4, r4, #1
  408630:	d1f3      	bne.n	40861a <__sprint_r.part.0+0x2a>
  408632:	2300      	movs	r3, #0
  408634:	f8cb 3008 	str.w	r3, [fp, #8]
  408638:	f8cb 3004 	str.w	r3, [fp, #4]
  40863c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408640:	f8db 3008 	ldr.w	r3, [fp, #8]
  408644:	f02a 0a03 	bic.w	sl, sl, #3
  408648:	eba3 030a 	sub.w	r3, r3, sl
  40864c:	f8cb 3008 	str.w	r3, [fp, #8]
  408650:	f109 0908 	add.w	r9, r9, #8
  408654:	2b00      	cmp	r3, #0
  408656:	d1d8      	bne.n	40860a <__sprint_r.part.0+0x1a>
  408658:	2000      	movs	r0, #0
  40865a:	e7ea      	b.n	408632 <__sprint_r.part.0+0x42>
  40865c:	f7fe fffe 	bl	40765c <__sfvwrite_r>
  408660:	2300      	movs	r3, #0
  408662:	f8cb 3008 	str.w	r3, [fp, #8]
  408666:	f8cb 3004 	str.w	r3, [fp, #4]
  40866a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40866e:	bf00      	nop

00408670 <__sprint_r>:
  408670:	6893      	ldr	r3, [r2, #8]
  408672:	b10b      	cbz	r3, 408678 <__sprint_r+0x8>
  408674:	f7ff bfbc 	b.w	4085f0 <__sprint_r.part.0>
  408678:	b410      	push	{r4}
  40867a:	4618      	mov	r0, r3
  40867c:	6053      	str	r3, [r2, #4]
  40867e:	bc10      	pop	{r4}
  408680:	4770      	bx	lr
  408682:	bf00      	nop

00408684 <_write_r>:
  408684:	b570      	push	{r4, r5, r6, lr}
  408686:	460d      	mov	r5, r1
  408688:	4c08      	ldr	r4, [pc, #32]	; (4086ac <_write_r+0x28>)
  40868a:	4611      	mov	r1, r2
  40868c:	4606      	mov	r6, r0
  40868e:	461a      	mov	r2, r3
  408690:	4628      	mov	r0, r5
  408692:	2300      	movs	r3, #0
  408694:	6023      	str	r3, [r4, #0]
  408696:	f7f8 f9af 	bl	4009f8 <_write>
  40869a:	1c43      	adds	r3, r0, #1
  40869c:	d000      	beq.n	4086a0 <_write_r+0x1c>
  40869e:	bd70      	pop	{r4, r5, r6, pc}
  4086a0:	6823      	ldr	r3, [r4, #0]
  4086a2:	2b00      	cmp	r3, #0
  4086a4:	d0fb      	beq.n	40869e <_write_r+0x1a>
  4086a6:	6033      	str	r3, [r6, #0]
  4086a8:	bd70      	pop	{r4, r5, r6, pc}
  4086aa:	bf00      	nop
  4086ac:	20400e4c 	.word	0x20400e4c

004086b0 <__register_exitproc>:
  4086b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4086b4:	4d2c      	ldr	r5, [pc, #176]	; (408768 <__register_exitproc+0xb8>)
  4086b6:	4606      	mov	r6, r0
  4086b8:	6828      	ldr	r0, [r5, #0]
  4086ba:	4698      	mov	r8, r3
  4086bc:	460f      	mov	r7, r1
  4086be:	4691      	mov	r9, r2
  4086c0:	f7ff f980 	bl	4079c4 <__retarget_lock_acquire_recursive>
  4086c4:	4b29      	ldr	r3, [pc, #164]	; (40876c <__register_exitproc+0xbc>)
  4086c6:	681c      	ldr	r4, [r3, #0]
  4086c8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4086cc:	2b00      	cmp	r3, #0
  4086ce:	d03e      	beq.n	40874e <__register_exitproc+0x9e>
  4086d0:	685a      	ldr	r2, [r3, #4]
  4086d2:	2a1f      	cmp	r2, #31
  4086d4:	dc1c      	bgt.n	408710 <__register_exitproc+0x60>
  4086d6:	f102 0e01 	add.w	lr, r2, #1
  4086da:	b176      	cbz	r6, 4086fa <__register_exitproc+0x4a>
  4086dc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4086e0:	2401      	movs	r4, #1
  4086e2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4086e6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4086ea:	4094      	lsls	r4, r2
  4086ec:	4320      	orrs	r0, r4
  4086ee:	2e02      	cmp	r6, #2
  4086f0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4086f4:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4086f8:	d023      	beq.n	408742 <__register_exitproc+0x92>
  4086fa:	3202      	adds	r2, #2
  4086fc:	f8c3 e004 	str.w	lr, [r3, #4]
  408700:	6828      	ldr	r0, [r5, #0]
  408702:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  408706:	f7ff f95f 	bl	4079c8 <__retarget_lock_release_recursive>
  40870a:	2000      	movs	r0, #0
  40870c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408710:	4b17      	ldr	r3, [pc, #92]	; (408770 <__register_exitproc+0xc0>)
  408712:	b30b      	cbz	r3, 408758 <__register_exitproc+0xa8>
  408714:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408718:	f7fb fc4c 	bl	403fb4 <malloc>
  40871c:	4603      	mov	r3, r0
  40871e:	b1d8      	cbz	r0, 408758 <__register_exitproc+0xa8>
  408720:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  408724:	6002      	str	r2, [r0, #0]
  408726:	2100      	movs	r1, #0
  408728:	6041      	str	r1, [r0, #4]
  40872a:	460a      	mov	r2, r1
  40872c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  408730:	f04f 0e01 	mov.w	lr, #1
  408734:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  408738:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40873c:	2e00      	cmp	r6, #0
  40873e:	d0dc      	beq.n	4086fa <__register_exitproc+0x4a>
  408740:	e7cc      	b.n	4086dc <__register_exitproc+0x2c>
  408742:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  408746:	430c      	orrs	r4, r1
  408748:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40874c:	e7d5      	b.n	4086fa <__register_exitproc+0x4a>
  40874e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  408752:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  408756:	e7bb      	b.n	4086d0 <__register_exitproc+0x20>
  408758:	6828      	ldr	r0, [r5, #0]
  40875a:	f7ff f935 	bl	4079c8 <__retarget_lock_release_recursive>
  40875e:	f04f 30ff 	mov.w	r0, #4294967295
  408762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408766:	bf00      	nop
  408768:	20400850 	.word	0x20400850
  40876c:	00409254 	.word	0x00409254
  408770:	00403fb5 	.word	0x00403fb5

00408774 <_calloc_r>:
  408774:	b510      	push	{r4, lr}
  408776:	fb02 f101 	mul.w	r1, r2, r1
  40877a:	f7fb fc2b 	bl	403fd4 <_malloc_r>
  40877e:	4604      	mov	r4, r0
  408780:	b1d8      	cbz	r0, 4087ba <_calloc_r+0x46>
  408782:	f850 2c04 	ldr.w	r2, [r0, #-4]
  408786:	f022 0203 	bic.w	r2, r2, #3
  40878a:	3a04      	subs	r2, #4
  40878c:	2a24      	cmp	r2, #36	; 0x24
  40878e:	d818      	bhi.n	4087c2 <_calloc_r+0x4e>
  408790:	2a13      	cmp	r2, #19
  408792:	d914      	bls.n	4087be <_calloc_r+0x4a>
  408794:	2300      	movs	r3, #0
  408796:	2a1b      	cmp	r2, #27
  408798:	6003      	str	r3, [r0, #0]
  40879a:	6043      	str	r3, [r0, #4]
  40879c:	d916      	bls.n	4087cc <_calloc_r+0x58>
  40879e:	2a24      	cmp	r2, #36	; 0x24
  4087a0:	6083      	str	r3, [r0, #8]
  4087a2:	60c3      	str	r3, [r0, #12]
  4087a4:	bf11      	iteee	ne
  4087a6:	f100 0210 	addne.w	r2, r0, #16
  4087aa:	6103      	streq	r3, [r0, #16]
  4087ac:	6143      	streq	r3, [r0, #20]
  4087ae:	f100 0218 	addeq.w	r2, r0, #24
  4087b2:	2300      	movs	r3, #0
  4087b4:	6013      	str	r3, [r2, #0]
  4087b6:	6053      	str	r3, [r2, #4]
  4087b8:	6093      	str	r3, [r2, #8]
  4087ba:	4620      	mov	r0, r4
  4087bc:	bd10      	pop	{r4, pc}
  4087be:	4602      	mov	r2, r0
  4087c0:	e7f7      	b.n	4087b2 <_calloc_r+0x3e>
  4087c2:	2100      	movs	r1, #0
  4087c4:	f7fb ff50 	bl	404668 <memset>
  4087c8:	4620      	mov	r0, r4
  4087ca:	bd10      	pop	{r4, pc}
  4087cc:	f100 0208 	add.w	r2, r0, #8
  4087d0:	e7ef      	b.n	4087b2 <_calloc_r+0x3e>
  4087d2:	bf00      	nop

004087d4 <_close_r>:
  4087d4:	b538      	push	{r3, r4, r5, lr}
  4087d6:	4c07      	ldr	r4, [pc, #28]	; (4087f4 <_close_r+0x20>)
  4087d8:	2300      	movs	r3, #0
  4087da:	4605      	mov	r5, r0
  4087dc:	4608      	mov	r0, r1
  4087de:	6023      	str	r3, [r4, #0]
  4087e0:	f7f8 fe24 	bl	40142c <_close>
  4087e4:	1c43      	adds	r3, r0, #1
  4087e6:	d000      	beq.n	4087ea <_close_r+0x16>
  4087e8:	bd38      	pop	{r3, r4, r5, pc}
  4087ea:	6823      	ldr	r3, [r4, #0]
  4087ec:	2b00      	cmp	r3, #0
  4087ee:	d0fb      	beq.n	4087e8 <_close_r+0x14>
  4087f0:	602b      	str	r3, [r5, #0]
  4087f2:	bd38      	pop	{r3, r4, r5, pc}
  4087f4:	20400e4c 	.word	0x20400e4c

004087f8 <_fclose_r>:
  4087f8:	b570      	push	{r4, r5, r6, lr}
  4087fa:	b159      	cbz	r1, 408814 <_fclose_r+0x1c>
  4087fc:	4605      	mov	r5, r0
  4087fe:	460c      	mov	r4, r1
  408800:	b110      	cbz	r0, 408808 <_fclose_r+0x10>
  408802:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408804:	2b00      	cmp	r3, #0
  408806:	d03c      	beq.n	408882 <_fclose_r+0x8a>
  408808:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40880a:	07d8      	lsls	r0, r3, #31
  40880c:	d505      	bpl.n	40881a <_fclose_r+0x22>
  40880e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408812:	b92b      	cbnz	r3, 408820 <_fclose_r+0x28>
  408814:	2600      	movs	r6, #0
  408816:	4630      	mov	r0, r6
  408818:	bd70      	pop	{r4, r5, r6, pc}
  40881a:	89a3      	ldrh	r3, [r4, #12]
  40881c:	0599      	lsls	r1, r3, #22
  40881e:	d53c      	bpl.n	40889a <_fclose_r+0xa2>
  408820:	4621      	mov	r1, r4
  408822:	4628      	mov	r0, r5
  408824:	f7fe fc9a 	bl	40715c <__sflush_r>
  408828:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40882a:	4606      	mov	r6, r0
  40882c:	b133      	cbz	r3, 40883c <_fclose_r+0x44>
  40882e:	69e1      	ldr	r1, [r4, #28]
  408830:	4628      	mov	r0, r5
  408832:	4798      	blx	r3
  408834:	2800      	cmp	r0, #0
  408836:	bfb8      	it	lt
  408838:	f04f 36ff 	movlt.w	r6, #4294967295
  40883c:	89a3      	ldrh	r3, [r4, #12]
  40883e:	061a      	lsls	r2, r3, #24
  408840:	d422      	bmi.n	408888 <_fclose_r+0x90>
  408842:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408844:	b141      	cbz	r1, 408858 <_fclose_r+0x60>
  408846:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40884a:	4299      	cmp	r1, r3
  40884c:	d002      	beq.n	408854 <_fclose_r+0x5c>
  40884e:	4628      	mov	r0, r5
  408850:	f7fe fe1e 	bl	407490 <_free_r>
  408854:	2300      	movs	r3, #0
  408856:	6323      	str	r3, [r4, #48]	; 0x30
  408858:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40885a:	b121      	cbz	r1, 408866 <_fclose_r+0x6e>
  40885c:	4628      	mov	r0, r5
  40885e:	f7fe fe17 	bl	407490 <_free_r>
  408862:	2300      	movs	r3, #0
  408864:	6463      	str	r3, [r4, #68]	; 0x44
  408866:	f7fe fd9d 	bl	4073a4 <__sfp_lock_acquire>
  40886a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40886c:	2200      	movs	r2, #0
  40886e:	07db      	lsls	r3, r3, #31
  408870:	81a2      	strh	r2, [r4, #12]
  408872:	d50e      	bpl.n	408892 <_fclose_r+0x9a>
  408874:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408876:	f7ff f8a3 	bl	4079c0 <__retarget_lock_close_recursive>
  40887a:	f7fe fd99 	bl	4073b0 <__sfp_lock_release>
  40887e:	4630      	mov	r0, r6
  408880:	bd70      	pop	{r4, r5, r6, pc}
  408882:	f7fe fd63 	bl	40734c <__sinit>
  408886:	e7bf      	b.n	408808 <_fclose_r+0x10>
  408888:	6921      	ldr	r1, [r4, #16]
  40888a:	4628      	mov	r0, r5
  40888c:	f7fe fe00 	bl	407490 <_free_r>
  408890:	e7d7      	b.n	408842 <_fclose_r+0x4a>
  408892:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408894:	f7ff f898 	bl	4079c8 <__retarget_lock_release_recursive>
  408898:	e7ec      	b.n	408874 <_fclose_r+0x7c>
  40889a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40889c:	f7ff f892 	bl	4079c4 <__retarget_lock_acquire_recursive>
  4088a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4088a4:	2b00      	cmp	r3, #0
  4088a6:	d1bb      	bne.n	408820 <_fclose_r+0x28>
  4088a8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4088aa:	f016 0601 	ands.w	r6, r6, #1
  4088ae:	d1b1      	bne.n	408814 <_fclose_r+0x1c>
  4088b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4088b2:	f7ff f889 	bl	4079c8 <__retarget_lock_release_recursive>
  4088b6:	4630      	mov	r0, r6
  4088b8:	bd70      	pop	{r4, r5, r6, pc}
  4088ba:	bf00      	nop

004088bc <__fputwc>:
  4088bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4088c0:	b082      	sub	sp, #8
  4088c2:	4680      	mov	r8, r0
  4088c4:	4689      	mov	r9, r1
  4088c6:	4614      	mov	r4, r2
  4088c8:	f000 f8a2 	bl	408a10 <__locale_mb_cur_max>
  4088cc:	2801      	cmp	r0, #1
  4088ce:	d036      	beq.n	40893e <__fputwc+0x82>
  4088d0:	464a      	mov	r2, r9
  4088d2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  4088d6:	a901      	add	r1, sp, #4
  4088d8:	4640      	mov	r0, r8
  4088da:	f000 f941 	bl	408b60 <_wcrtomb_r>
  4088de:	1c42      	adds	r2, r0, #1
  4088e0:	4606      	mov	r6, r0
  4088e2:	d025      	beq.n	408930 <__fputwc+0x74>
  4088e4:	b3a8      	cbz	r0, 408952 <__fputwc+0x96>
  4088e6:	f89d e004 	ldrb.w	lr, [sp, #4]
  4088ea:	2500      	movs	r5, #0
  4088ec:	f10d 0a04 	add.w	sl, sp, #4
  4088f0:	e009      	b.n	408906 <__fputwc+0x4a>
  4088f2:	6823      	ldr	r3, [r4, #0]
  4088f4:	1c5a      	adds	r2, r3, #1
  4088f6:	6022      	str	r2, [r4, #0]
  4088f8:	f883 e000 	strb.w	lr, [r3]
  4088fc:	3501      	adds	r5, #1
  4088fe:	42b5      	cmp	r5, r6
  408900:	d227      	bcs.n	408952 <__fputwc+0x96>
  408902:	f815 e00a 	ldrb.w	lr, [r5, sl]
  408906:	68a3      	ldr	r3, [r4, #8]
  408908:	3b01      	subs	r3, #1
  40890a:	2b00      	cmp	r3, #0
  40890c:	60a3      	str	r3, [r4, #8]
  40890e:	daf0      	bge.n	4088f2 <__fputwc+0x36>
  408910:	69a7      	ldr	r7, [r4, #24]
  408912:	42bb      	cmp	r3, r7
  408914:	4671      	mov	r1, lr
  408916:	4622      	mov	r2, r4
  408918:	4640      	mov	r0, r8
  40891a:	db02      	blt.n	408922 <__fputwc+0x66>
  40891c:	f1be 0f0a 	cmp.w	lr, #10
  408920:	d1e7      	bne.n	4088f2 <__fputwc+0x36>
  408922:	f000 f8c5 	bl	408ab0 <__swbuf_r>
  408926:	1c43      	adds	r3, r0, #1
  408928:	d1e8      	bne.n	4088fc <__fputwc+0x40>
  40892a:	b002      	add	sp, #8
  40892c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408930:	89a3      	ldrh	r3, [r4, #12]
  408932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408936:	81a3      	strh	r3, [r4, #12]
  408938:	b002      	add	sp, #8
  40893a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40893e:	f109 33ff 	add.w	r3, r9, #4294967295
  408942:	2bfe      	cmp	r3, #254	; 0xfe
  408944:	d8c4      	bhi.n	4088d0 <__fputwc+0x14>
  408946:	fa5f fe89 	uxtb.w	lr, r9
  40894a:	4606      	mov	r6, r0
  40894c:	f88d e004 	strb.w	lr, [sp, #4]
  408950:	e7cb      	b.n	4088ea <__fputwc+0x2e>
  408952:	4648      	mov	r0, r9
  408954:	b002      	add	sp, #8
  408956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40895a:	bf00      	nop

0040895c <_fputwc_r>:
  40895c:	b530      	push	{r4, r5, lr}
  40895e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  408960:	f013 0f01 	tst.w	r3, #1
  408964:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  408968:	4614      	mov	r4, r2
  40896a:	b083      	sub	sp, #12
  40896c:	4605      	mov	r5, r0
  40896e:	b29a      	uxth	r2, r3
  408970:	d101      	bne.n	408976 <_fputwc_r+0x1a>
  408972:	0590      	lsls	r0, r2, #22
  408974:	d51c      	bpl.n	4089b0 <_fputwc_r+0x54>
  408976:	0490      	lsls	r0, r2, #18
  408978:	d406      	bmi.n	408988 <_fputwc_r+0x2c>
  40897a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40897c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  408980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408984:	81a3      	strh	r3, [r4, #12]
  408986:	6662      	str	r2, [r4, #100]	; 0x64
  408988:	4628      	mov	r0, r5
  40898a:	4622      	mov	r2, r4
  40898c:	f7ff ff96 	bl	4088bc <__fputwc>
  408990:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408992:	07da      	lsls	r2, r3, #31
  408994:	4605      	mov	r5, r0
  408996:	d402      	bmi.n	40899e <_fputwc_r+0x42>
  408998:	89a3      	ldrh	r3, [r4, #12]
  40899a:	059b      	lsls	r3, r3, #22
  40899c:	d502      	bpl.n	4089a4 <_fputwc_r+0x48>
  40899e:	4628      	mov	r0, r5
  4089a0:	b003      	add	sp, #12
  4089a2:	bd30      	pop	{r4, r5, pc}
  4089a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4089a6:	f7ff f80f 	bl	4079c8 <__retarget_lock_release_recursive>
  4089aa:	4628      	mov	r0, r5
  4089ac:	b003      	add	sp, #12
  4089ae:	bd30      	pop	{r4, r5, pc}
  4089b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4089b2:	9101      	str	r1, [sp, #4]
  4089b4:	f7ff f806 	bl	4079c4 <__retarget_lock_acquire_recursive>
  4089b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4089bc:	9901      	ldr	r1, [sp, #4]
  4089be:	b29a      	uxth	r2, r3
  4089c0:	e7d9      	b.n	408976 <_fputwc_r+0x1a>
  4089c2:	bf00      	nop

004089c4 <_fstat_r>:
  4089c4:	b538      	push	{r3, r4, r5, lr}
  4089c6:	460b      	mov	r3, r1
  4089c8:	4c07      	ldr	r4, [pc, #28]	; (4089e8 <_fstat_r+0x24>)
  4089ca:	4605      	mov	r5, r0
  4089cc:	4611      	mov	r1, r2
  4089ce:	4618      	mov	r0, r3
  4089d0:	2300      	movs	r3, #0
  4089d2:	6023      	str	r3, [r4, #0]
  4089d4:	f7f8 fd2d 	bl	401432 <_fstat>
  4089d8:	1c43      	adds	r3, r0, #1
  4089da:	d000      	beq.n	4089de <_fstat_r+0x1a>
  4089dc:	bd38      	pop	{r3, r4, r5, pc}
  4089de:	6823      	ldr	r3, [r4, #0]
  4089e0:	2b00      	cmp	r3, #0
  4089e2:	d0fb      	beq.n	4089dc <_fstat_r+0x18>
  4089e4:	602b      	str	r3, [r5, #0]
  4089e6:	bd38      	pop	{r3, r4, r5, pc}
  4089e8:	20400e4c 	.word	0x20400e4c

004089ec <_isatty_r>:
  4089ec:	b538      	push	{r3, r4, r5, lr}
  4089ee:	4c07      	ldr	r4, [pc, #28]	; (408a0c <_isatty_r+0x20>)
  4089f0:	2300      	movs	r3, #0
  4089f2:	4605      	mov	r5, r0
  4089f4:	4608      	mov	r0, r1
  4089f6:	6023      	str	r3, [r4, #0]
  4089f8:	f7f8 fd20 	bl	40143c <_isatty>
  4089fc:	1c43      	adds	r3, r0, #1
  4089fe:	d000      	beq.n	408a02 <_isatty_r+0x16>
  408a00:	bd38      	pop	{r3, r4, r5, pc}
  408a02:	6823      	ldr	r3, [r4, #0]
  408a04:	2b00      	cmp	r3, #0
  408a06:	d0fb      	beq.n	408a00 <_isatty_r+0x14>
  408a08:	602b      	str	r3, [r5, #0]
  408a0a:	bd38      	pop	{r3, r4, r5, pc}
  408a0c:	20400e4c 	.word	0x20400e4c

00408a10 <__locale_mb_cur_max>:
  408a10:	4b04      	ldr	r3, [pc, #16]	; (408a24 <__locale_mb_cur_max+0x14>)
  408a12:	4a05      	ldr	r2, [pc, #20]	; (408a28 <__locale_mb_cur_max+0x18>)
  408a14:	681b      	ldr	r3, [r3, #0]
  408a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408a18:	2b00      	cmp	r3, #0
  408a1a:	bf08      	it	eq
  408a1c:	4613      	moveq	r3, r2
  408a1e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408a22:	4770      	bx	lr
  408a24:	20400014 	.word	0x20400014
  408a28:	20400854 	.word	0x20400854

00408a2c <_lseek_r>:
  408a2c:	b570      	push	{r4, r5, r6, lr}
  408a2e:	460d      	mov	r5, r1
  408a30:	4c08      	ldr	r4, [pc, #32]	; (408a54 <_lseek_r+0x28>)
  408a32:	4611      	mov	r1, r2
  408a34:	4606      	mov	r6, r0
  408a36:	461a      	mov	r2, r3
  408a38:	4628      	mov	r0, r5
  408a3a:	2300      	movs	r3, #0
  408a3c:	6023      	str	r3, [r4, #0]
  408a3e:	f7f8 fcff 	bl	401440 <_lseek>
  408a42:	1c43      	adds	r3, r0, #1
  408a44:	d000      	beq.n	408a48 <_lseek_r+0x1c>
  408a46:	bd70      	pop	{r4, r5, r6, pc}
  408a48:	6823      	ldr	r3, [r4, #0]
  408a4a:	2b00      	cmp	r3, #0
  408a4c:	d0fb      	beq.n	408a46 <_lseek_r+0x1a>
  408a4e:	6033      	str	r3, [r6, #0]
  408a50:	bd70      	pop	{r4, r5, r6, pc}
  408a52:	bf00      	nop
  408a54:	20400e4c 	.word	0x20400e4c

00408a58 <__ascii_mbtowc>:
  408a58:	b082      	sub	sp, #8
  408a5a:	b149      	cbz	r1, 408a70 <__ascii_mbtowc+0x18>
  408a5c:	b15a      	cbz	r2, 408a76 <__ascii_mbtowc+0x1e>
  408a5e:	b16b      	cbz	r3, 408a7c <__ascii_mbtowc+0x24>
  408a60:	7813      	ldrb	r3, [r2, #0]
  408a62:	600b      	str	r3, [r1, #0]
  408a64:	7812      	ldrb	r2, [r2, #0]
  408a66:	1c10      	adds	r0, r2, #0
  408a68:	bf18      	it	ne
  408a6a:	2001      	movne	r0, #1
  408a6c:	b002      	add	sp, #8
  408a6e:	4770      	bx	lr
  408a70:	a901      	add	r1, sp, #4
  408a72:	2a00      	cmp	r2, #0
  408a74:	d1f3      	bne.n	408a5e <__ascii_mbtowc+0x6>
  408a76:	4610      	mov	r0, r2
  408a78:	b002      	add	sp, #8
  408a7a:	4770      	bx	lr
  408a7c:	f06f 0001 	mvn.w	r0, #1
  408a80:	e7f4      	b.n	408a6c <__ascii_mbtowc+0x14>
  408a82:	bf00      	nop

00408a84 <_read_r>:
  408a84:	b570      	push	{r4, r5, r6, lr}
  408a86:	460d      	mov	r5, r1
  408a88:	4c08      	ldr	r4, [pc, #32]	; (408aac <_read_r+0x28>)
  408a8a:	4611      	mov	r1, r2
  408a8c:	4606      	mov	r6, r0
  408a8e:	461a      	mov	r2, r3
  408a90:	4628      	mov	r0, r5
  408a92:	2300      	movs	r3, #0
  408a94:	6023      	str	r3, [r4, #0]
  408a96:	f7f7 ff91 	bl	4009bc <_read>
  408a9a:	1c43      	adds	r3, r0, #1
  408a9c:	d000      	beq.n	408aa0 <_read_r+0x1c>
  408a9e:	bd70      	pop	{r4, r5, r6, pc}
  408aa0:	6823      	ldr	r3, [r4, #0]
  408aa2:	2b00      	cmp	r3, #0
  408aa4:	d0fb      	beq.n	408a9e <_read_r+0x1a>
  408aa6:	6033      	str	r3, [r6, #0]
  408aa8:	bd70      	pop	{r4, r5, r6, pc}
  408aaa:	bf00      	nop
  408aac:	20400e4c 	.word	0x20400e4c

00408ab0 <__swbuf_r>:
  408ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408ab2:	460d      	mov	r5, r1
  408ab4:	4614      	mov	r4, r2
  408ab6:	4606      	mov	r6, r0
  408ab8:	b110      	cbz	r0, 408ac0 <__swbuf_r+0x10>
  408aba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408abc:	2b00      	cmp	r3, #0
  408abe:	d04b      	beq.n	408b58 <__swbuf_r+0xa8>
  408ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408ac4:	69a3      	ldr	r3, [r4, #24]
  408ac6:	60a3      	str	r3, [r4, #8]
  408ac8:	b291      	uxth	r1, r2
  408aca:	0708      	lsls	r0, r1, #28
  408acc:	d539      	bpl.n	408b42 <__swbuf_r+0x92>
  408ace:	6923      	ldr	r3, [r4, #16]
  408ad0:	2b00      	cmp	r3, #0
  408ad2:	d036      	beq.n	408b42 <__swbuf_r+0x92>
  408ad4:	b2ed      	uxtb	r5, r5
  408ad6:	0489      	lsls	r1, r1, #18
  408ad8:	462f      	mov	r7, r5
  408ada:	d515      	bpl.n	408b08 <__swbuf_r+0x58>
  408adc:	6822      	ldr	r2, [r4, #0]
  408ade:	6961      	ldr	r1, [r4, #20]
  408ae0:	1ad3      	subs	r3, r2, r3
  408ae2:	428b      	cmp	r3, r1
  408ae4:	da1c      	bge.n	408b20 <__swbuf_r+0x70>
  408ae6:	3301      	adds	r3, #1
  408ae8:	68a1      	ldr	r1, [r4, #8]
  408aea:	1c50      	adds	r0, r2, #1
  408aec:	3901      	subs	r1, #1
  408aee:	60a1      	str	r1, [r4, #8]
  408af0:	6020      	str	r0, [r4, #0]
  408af2:	7015      	strb	r5, [r2, #0]
  408af4:	6962      	ldr	r2, [r4, #20]
  408af6:	429a      	cmp	r2, r3
  408af8:	d01a      	beq.n	408b30 <__swbuf_r+0x80>
  408afa:	89a3      	ldrh	r3, [r4, #12]
  408afc:	07db      	lsls	r3, r3, #31
  408afe:	d501      	bpl.n	408b04 <__swbuf_r+0x54>
  408b00:	2d0a      	cmp	r5, #10
  408b02:	d015      	beq.n	408b30 <__swbuf_r+0x80>
  408b04:	4638      	mov	r0, r7
  408b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408b08:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408b0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408b0e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  408b12:	81a2      	strh	r2, [r4, #12]
  408b14:	6822      	ldr	r2, [r4, #0]
  408b16:	6661      	str	r1, [r4, #100]	; 0x64
  408b18:	6961      	ldr	r1, [r4, #20]
  408b1a:	1ad3      	subs	r3, r2, r3
  408b1c:	428b      	cmp	r3, r1
  408b1e:	dbe2      	blt.n	408ae6 <__swbuf_r+0x36>
  408b20:	4621      	mov	r1, r4
  408b22:	4630      	mov	r0, r6
  408b24:	f7fe fbba 	bl	40729c <_fflush_r>
  408b28:	b940      	cbnz	r0, 408b3c <__swbuf_r+0x8c>
  408b2a:	6822      	ldr	r2, [r4, #0]
  408b2c:	2301      	movs	r3, #1
  408b2e:	e7db      	b.n	408ae8 <__swbuf_r+0x38>
  408b30:	4621      	mov	r1, r4
  408b32:	4630      	mov	r0, r6
  408b34:	f7fe fbb2 	bl	40729c <_fflush_r>
  408b38:	2800      	cmp	r0, #0
  408b3a:	d0e3      	beq.n	408b04 <__swbuf_r+0x54>
  408b3c:	f04f 37ff 	mov.w	r7, #4294967295
  408b40:	e7e0      	b.n	408b04 <__swbuf_r+0x54>
  408b42:	4621      	mov	r1, r4
  408b44:	4630      	mov	r0, r6
  408b46:	f7fd fad7 	bl	4060f8 <__swsetup_r>
  408b4a:	2800      	cmp	r0, #0
  408b4c:	d1f6      	bne.n	408b3c <__swbuf_r+0x8c>
  408b4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408b52:	6923      	ldr	r3, [r4, #16]
  408b54:	b291      	uxth	r1, r2
  408b56:	e7bd      	b.n	408ad4 <__swbuf_r+0x24>
  408b58:	f7fe fbf8 	bl	40734c <__sinit>
  408b5c:	e7b0      	b.n	408ac0 <__swbuf_r+0x10>
  408b5e:	bf00      	nop

00408b60 <_wcrtomb_r>:
  408b60:	b5f0      	push	{r4, r5, r6, r7, lr}
  408b62:	4606      	mov	r6, r0
  408b64:	b085      	sub	sp, #20
  408b66:	461f      	mov	r7, r3
  408b68:	b189      	cbz	r1, 408b8e <_wcrtomb_r+0x2e>
  408b6a:	4c10      	ldr	r4, [pc, #64]	; (408bac <_wcrtomb_r+0x4c>)
  408b6c:	4d10      	ldr	r5, [pc, #64]	; (408bb0 <_wcrtomb_r+0x50>)
  408b6e:	6824      	ldr	r4, [r4, #0]
  408b70:	6b64      	ldr	r4, [r4, #52]	; 0x34
  408b72:	2c00      	cmp	r4, #0
  408b74:	bf08      	it	eq
  408b76:	462c      	moveq	r4, r5
  408b78:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  408b7c:	47a0      	blx	r4
  408b7e:	1c43      	adds	r3, r0, #1
  408b80:	d103      	bne.n	408b8a <_wcrtomb_r+0x2a>
  408b82:	2200      	movs	r2, #0
  408b84:	238a      	movs	r3, #138	; 0x8a
  408b86:	603a      	str	r2, [r7, #0]
  408b88:	6033      	str	r3, [r6, #0]
  408b8a:	b005      	add	sp, #20
  408b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408b8e:	460c      	mov	r4, r1
  408b90:	4906      	ldr	r1, [pc, #24]	; (408bac <_wcrtomb_r+0x4c>)
  408b92:	4a07      	ldr	r2, [pc, #28]	; (408bb0 <_wcrtomb_r+0x50>)
  408b94:	6809      	ldr	r1, [r1, #0]
  408b96:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408b98:	2900      	cmp	r1, #0
  408b9a:	bf08      	it	eq
  408b9c:	4611      	moveq	r1, r2
  408b9e:	4622      	mov	r2, r4
  408ba0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  408ba4:	a901      	add	r1, sp, #4
  408ba6:	47a0      	blx	r4
  408ba8:	e7e9      	b.n	408b7e <_wcrtomb_r+0x1e>
  408baa:	bf00      	nop
  408bac:	20400014 	.word	0x20400014
  408bb0:	20400854 	.word	0x20400854

00408bb4 <__ascii_wctomb>:
  408bb4:	b121      	cbz	r1, 408bc0 <__ascii_wctomb+0xc>
  408bb6:	2aff      	cmp	r2, #255	; 0xff
  408bb8:	d804      	bhi.n	408bc4 <__ascii_wctomb+0x10>
  408bba:	700a      	strb	r2, [r1, #0]
  408bbc:	2001      	movs	r0, #1
  408bbe:	4770      	bx	lr
  408bc0:	4608      	mov	r0, r1
  408bc2:	4770      	bx	lr
  408bc4:	238a      	movs	r3, #138	; 0x8a
  408bc6:	6003      	str	r3, [r0, #0]
  408bc8:	f04f 30ff 	mov.w	r0, #4294967295
  408bcc:	4770      	bx	lr
  408bce:	bf00      	nop

00408bd0 <__aeabi_dmul>:
  408bd0:	b570      	push	{r4, r5, r6, lr}
  408bd2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408bd6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408bda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408bde:	bf1d      	ittte	ne
  408be0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408be4:	ea94 0f0c 	teqne	r4, ip
  408be8:	ea95 0f0c 	teqne	r5, ip
  408bec:	f000 f8de 	bleq	408dac <__aeabi_dmul+0x1dc>
  408bf0:	442c      	add	r4, r5
  408bf2:	ea81 0603 	eor.w	r6, r1, r3
  408bf6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  408bfa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  408bfe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  408c02:	bf18      	it	ne
  408c04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  408c08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  408c10:	d038      	beq.n	408c84 <__aeabi_dmul+0xb4>
  408c12:	fba0 ce02 	umull	ip, lr, r0, r2
  408c16:	f04f 0500 	mov.w	r5, #0
  408c1a:	fbe1 e502 	umlal	lr, r5, r1, r2
  408c1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  408c22:	fbe0 e503 	umlal	lr, r5, r0, r3
  408c26:	f04f 0600 	mov.w	r6, #0
  408c2a:	fbe1 5603 	umlal	r5, r6, r1, r3
  408c2e:	f09c 0f00 	teq	ip, #0
  408c32:	bf18      	it	ne
  408c34:	f04e 0e01 	orrne.w	lr, lr, #1
  408c38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  408c3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  408c40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  408c44:	d204      	bcs.n	408c50 <__aeabi_dmul+0x80>
  408c46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  408c4a:	416d      	adcs	r5, r5
  408c4c:	eb46 0606 	adc.w	r6, r6, r6
  408c50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  408c54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  408c58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  408c5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  408c60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  408c64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408c68:	bf88      	it	hi
  408c6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408c6e:	d81e      	bhi.n	408cae <__aeabi_dmul+0xde>
  408c70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  408c74:	bf08      	it	eq
  408c76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  408c7a:	f150 0000 	adcs.w	r0, r0, #0
  408c7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408c82:	bd70      	pop	{r4, r5, r6, pc}
  408c84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  408c88:	ea46 0101 	orr.w	r1, r6, r1
  408c8c:	ea40 0002 	orr.w	r0, r0, r2
  408c90:	ea81 0103 	eor.w	r1, r1, r3
  408c94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  408c98:	bfc2      	ittt	gt
  408c9a:	ebd4 050c 	rsbsgt	r5, r4, ip
  408c9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408ca2:	bd70      	popgt	{r4, r5, r6, pc}
  408ca4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408ca8:	f04f 0e00 	mov.w	lr, #0
  408cac:	3c01      	subs	r4, #1
  408cae:	f300 80ab 	bgt.w	408e08 <__aeabi_dmul+0x238>
  408cb2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  408cb6:	bfde      	ittt	le
  408cb8:	2000      	movle	r0, #0
  408cba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  408cbe:	bd70      	pople	{r4, r5, r6, pc}
  408cc0:	f1c4 0400 	rsb	r4, r4, #0
  408cc4:	3c20      	subs	r4, #32
  408cc6:	da35      	bge.n	408d34 <__aeabi_dmul+0x164>
  408cc8:	340c      	adds	r4, #12
  408cca:	dc1b      	bgt.n	408d04 <__aeabi_dmul+0x134>
  408ccc:	f104 0414 	add.w	r4, r4, #20
  408cd0:	f1c4 0520 	rsb	r5, r4, #32
  408cd4:	fa00 f305 	lsl.w	r3, r0, r5
  408cd8:	fa20 f004 	lsr.w	r0, r0, r4
  408cdc:	fa01 f205 	lsl.w	r2, r1, r5
  408ce0:	ea40 0002 	orr.w	r0, r0, r2
  408ce4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  408ce8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408cec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408cf0:	fa21 f604 	lsr.w	r6, r1, r4
  408cf4:	eb42 0106 	adc.w	r1, r2, r6
  408cf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408cfc:	bf08      	it	eq
  408cfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408d02:	bd70      	pop	{r4, r5, r6, pc}
  408d04:	f1c4 040c 	rsb	r4, r4, #12
  408d08:	f1c4 0520 	rsb	r5, r4, #32
  408d0c:	fa00 f304 	lsl.w	r3, r0, r4
  408d10:	fa20 f005 	lsr.w	r0, r0, r5
  408d14:	fa01 f204 	lsl.w	r2, r1, r4
  408d18:	ea40 0002 	orr.w	r0, r0, r2
  408d1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408d20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408d24:	f141 0100 	adc.w	r1, r1, #0
  408d28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408d2c:	bf08      	it	eq
  408d2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408d32:	bd70      	pop	{r4, r5, r6, pc}
  408d34:	f1c4 0520 	rsb	r5, r4, #32
  408d38:	fa00 f205 	lsl.w	r2, r0, r5
  408d3c:	ea4e 0e02 	orr.w	lr, lr, r2
  408d40:	fa20 f304 	lsr.w	r3, r0, r4
  408d44:	fa01 f205 	lsl.w	r2, r1, r5
  408d48:	ea43 0302 	orr.w	r3, r3, r2
  408d4c:	fa21 f004 	lsr.w	r0, r1, r4
  408d50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408d54:	fa21 f204 	lsr.w	r2, r1, r4
  408d58:	ea20 0002 	bic.w	r0, r0, r2
  408d5c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  408d60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408d64:	bf08      	it	eq
  408d66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408d6a:	bd70      	pop	{r4, r5, r6, pc}
  408d6c:	f094 0f00 	teq	r4, #0
  408d70:	d10f      	bne.n	408d92 <__aeabi_dmul+0x1c2>
  408d72:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  408d76:	0040      	lsls	r0, r0, #1
  408d78:	eb41 0101 	adc.w	r1, r1, r1
  408d7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408d80:	bf08      	it	eq
  408d82:	3c01      	subeq	r4, #1
  408d84:	d0f7      	beq.n	408d76 <__aeabi_dmul+0x1a6>
  408d86:	ea41 0106 	orr.w	r1, r1, r6
  408d8a:	f095 0f00 	teq	r5, #0
  408d8e:	bf18      	it	ne
  408d90:	4770      	bxne	lr
  408d92:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  408d96:	0052      	lsls	r2, r2, #1
  408d98:	eb43 0303 	adc.w	r3, r3, r3
  408d9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  408da0:	bf08      	it	eq
  408da2:	3d01      	subeq	r5, #1
  408da4:	d0f7      	beq.n	408d96 <__aeabi_dmul+0x1c6>
  408da6:	ea43 0306 	orr.w	r3, r3, r6
  408daa:	4770      	bx	lr
  408dac:	ea94 0f0c 	teq	r4, ip
  408db0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408db4:	bf18      	it	ne
  408db6:	ea95 0f0c 	teqne	r5, ip
  408dba:	d00c      	beq.n	408dd6 <__aeabi_dmul+0x206>
  408dbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408dc0:	bf18      	it	ne
  408dc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408dc6:	d1d1      	bne.n	408d6c <__aeabi_dmul+0x19c>
  408dc8:	ea81 0103 	eor.w	r1, r1, r3
  408dcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408dd0:	f04f 0000 	mov.w	r0, #0
  408dd4:	bd70      	pop	{r4, r5, r6, pc}
  408dd6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408dda:	bf06      	itte	eq
  408ddc:	4610      	moveq	r0, r2
  408dde:	4619      	moveq	r1, r3
  408de0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408de4:	d019      	beq.n	408e1a <__aeabi_dmul+0x24a>
  408de6:	ea94 0f0c 	teq	r4, ip
  408dea:	d102      	bne.n	408df2 <__aeabi_dmul+0x222>
  408dec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  408df0:	d113      	bne.n	408e1a <__aeabi_dmul+0x24a>
  408df2:	ea95 0f0c 	teq	r5, ip
  408df6:	d105      	bne.n	408e04 <__aeabi_dmul+0x234>
  408df8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  408dfc:	bf1c      	itt	ne
  408dfe:	4610      	movne	r0, r2
  408e00:	4619      	movne	r1, r3
  408e02:	d10a      	bne.n	408e1a <__aeabi_dmul+0x24a>
  408e04:	ea81 0103 	eor.w	r1, r1, r3
  408e08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408e0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408e10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408e14:	f04f 0000 	mov.w	r0, #0
  408e18:	bd70      	pop	{r4, r5, r6, pc}
  408e1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  408e1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  408e22:	bd70      	pop	{r4, r5, r6, pc}

00408e24 <__aeabi_ddiv>:
  408e24:	b570      	push	{r4, r5, r6, lr}
  408e26:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408e2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408e2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408e32:	bf1d      	ittte	ne
  408e34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408e38:	ea94 0f0c 	teqne	r4, ip
  408e3c:	ea95 0f0c 	teqne	r5, ip
  408e40:	f000 f8a7 	bleq	408f92 <__aeabi_ddiv+0x16e>
  408e44:	eba4 0405 	sub.w	r4, r4, r5
  408e48:	ea81 0e03 	eor.w	lr, r1, r3
  408e4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408e50:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408e54:	f000 8088 	beq.w	408f68 <__aeabi_ddiv+0x144>
  408e58:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408e5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  408e60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  408e64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  408e68:	ea4f 2202 	mov.w	r2, r2, lsl #8
  408e6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  408e70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  408e74:	ea4f 2600 	mov.w	r6, r0, lsl #8
  408e78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  408e7c:	429d      	cmp	r5, r3
  408e7e:	bf08      	it	eq
  408e80:	4296      	cmpeq	r6, r2
  408e82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  408e86:	f504 7440 	add.w	r4, r4, #768	; 0x300
  408e8a:	d202      	bcs.n	408e92 <__aeabi_ddiv+0x6e>
  408e8c:	085b      	lsrs	r3, r3, #1
  408e8e:	ea4f 0232 	mov.w	r2, r2, rrx
  408e92:	1ab6      	subs	r6, r6, r2
  408e94:	eb65 0503 	sbc.w	r5, r5, r3
  408e98:	085b      	lsrs	r3, r3, #1
  408e9a:	ea4f 0232 	mov.w	r2, r2, rrx
  408e9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  408ea2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  408ea6:	ebb6 0e02 	subs.w	lr, r6, r2
  408eaa:	eb75 0e03 	sbcs.w	lr, r5, r3
  408eae:	bf22      	ittt	cs
  408eb0:	1ab6      	subcs	r6, r6, r2
  408eb2:	4675      	movcs	r5, lr
  408eb4:	ea40 000c 	orrcs.w	r0, r0, ip
  408eb8:	085b      	lsrs	r3, r3, #1
  408eba:	ea4f 0232 	mov.w	r2, r2, rrx
  408ebe:	ebb6 0e02 	subs.w	lr, r6, r2
  408ec2:	eb75 0e03 	sbcs.w	lr, r5, r3
  408ec6:	bf22      	ittt	cs
  408ec8:	1ab6      	subcs	r6, r6, r2
  408eca:	4675      	movcs	r5, lr
  408ecc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  408ed0:	085b      	lsrs	r3, r3, #1
  408ed2:	ea4f 0232 	mov.w	r2, r2, rrx
  408ed6:	ebb6 0e02 	subs.w	lr, r6, r2
  408eda:	eb75 0e03 	sbcs.w	lr, r5, r3
  408ede:	bf22      	ittt	cs
  408ee0:	1ab6      	subcs	r6, r6, r2
  408ee2:	4675      	movcs	r5, lr
  408ee4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  408ee8:	085b      	lsrs	r3, r3, #1
  408eea:	ea4f 0232 	mov.w	r2, r2, rrx
  408eee:	ebb6 0e02 	subs.w	lr, r6, r2
  408ef2:	eb75 0e03 	sbcs.w	lr, r5, r3
  408ef6:	bf22      	ittt	cs
  408ef8:	1ab6      	subcs	r6, r6, r2
  408efa:	4675      	movcs	r5, lr
  408efc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  408f00:	ea55 0e06 	orrs.w	lr, r5, r6
  408f04:	d018      	beq.n	408f38 <__aeabi_ddiv+0x114>
  408f06:	ea4f 1505 	mov.w	r5, r5, lsl #4
  408f0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  408f0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  408f12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  408f16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  408f1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  408f1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  408f22:	d1c0      	bne.n	408ea6 <__aeabi_ddiv+0x82>
  408f24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408f28:	d10b      	bne.n	408f42 <__aeabi_ddiv+0x11e>
  408f2a:	ea41 0100 	orr.w	r1, r1, r0
  408f2e:	f04f 0000 	mov.w	r0, #0
  408f32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  408f36:	e7b6      	b.n	408ea6 <__aeabi_ddiv+0x82>
  408f38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408f3c:	bf04      	itt	eq
  408f3e:	4301      	orreq	r1, r0
  408f40:	2000      	moveq	r0, #0
  408f42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408f46:	bf88      	it	hi
  408f48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408f4c:	f63f aeaf 	bhi.w	408cae <__aeabi_dmul+0xde>
  408f50:	ebb5 0c03 	subs.w	ip, r5, r3
  408f54:	bf04      	itt	eq
  408f56:	ebb6 0c02 	subseq.w	ip, r6, r2
  408f5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408f5e:	f150 0000 	adcs.w	r0, r0, #0
  408f62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408f66:	bd70      	pop	{r4, r5, r6, pc}
  408f68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  408f6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  408f70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  408f74:	bfc2      	ittt	gt
  408f76:	ebd4 050c 	rsbsgt	r5, r4, ip
  408f7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408f7e:	bd70      	popgt	{r4, r5, r6, pc}
  408f80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408f84:	f04f 0e00 	mov.w	lr, #0
  408f88:	3c01      	subs	r4, #1
  408f8a:	e690      	b.n	408cae <__aeabi_dmul+0xde>
  408f8c:	ea45 0e06 	orr.w	lr, r5, r6
  408f90:	e68d      	b.n	408cae <__aeabi_dmul+0xde>
  408f92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  408f96:	ea94 0f0c 	teq	r4, ip
  408f9a:	bf08      	it	eq
  408f9c:	ea95 0f0c 	teqeq	r5, ip
  408fa0:	f43f af3b 	beq.w	408e1a <__aeabi_dmul+0x24a>
  408fa4:	ea94 0f0c 	teq	r4, ip
  408fa8:	d10a      	bne.n	408fc0 <__aeabi_ddiv+0x19c>
  408faa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408fae:	f47f af34 	bne.w	408e1a <__aeabi_dmul+0x24a>
  408fb2:	ea95 0f0c 	teq	r5, ip
  408fb6:	f47f af25 	bne.w	408e04 <__aeabi_dmul+0x234>
  408fba:	4610      	mov	r0, r2
  408fbc:	4619      	mov	r1, r3
  408fbe:	e72c      	b.n	408e1a <__aeabi_dmul+0x24a>
  408fc0:	ea95 0f0c 	teq	r5, ip
  408fc4:	d106      	bne.n	408fd4 <__aeabi_ddiv+0x1b0>
  408fc6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  408fca:	f43f aefd 	beq.w	408dc8 <__aeabi_dmul+0x1f8>
  408fce:	4610      	mov	r0, r2
  408fd0:	4619      	mov	r1, r3
  408fd2:	e722      	b.n	408e1a <__aeabi_dmul+0x24a>
  408fd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  408fd8:	bf18      	it	ne
  408fda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  408fde:	f47f aec5 	bne.w	408d6c <__aeabi_dmul+0x19c>
  408fe2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  408fe6:	f47f af0d 	bne.w	408e04 <__aeabi_dmul+0x234>
  408fea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  408fee:	f47f aeeb 	bne.w	408dc8 <__aeabi_dmul+0x1f8>
  408ff2:	e712      	b.n	408e1a <__aeabi_dmul+0x24a>

00408ff4 <__gedf2>:
  408ff4:	f04f 3cff 	mov.w	ip, #4294967295
  408ff8:	e006      	b.n	409008 <__cmpdf2+0x4>
  408ffa:	bf00      	nop

00408ffc <__ledf2>:
  408ffc:	f04f 0c01 	mov.w	ip, #1
  409000:	e002      	b.n	409008 <__cmpdf2+0x4>
  409002:	bf00      	nop

00409004 <__cmpdf2>:
  409004:	f04f 0c01 	mov.w	ip, #1
  409008:	f84d cd04 	str.w	ip, [sp, #-4]!
  40900c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409010:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409014:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409018:	bf18      	it	ne
  40901a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40901e:	d01b      	beq.n	409058 <__cmpdf2+0x54>
  409020:	b001      	add	sp, #4
  409022:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  409026:	bf0c      	ite	eq
  409028:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40902c:	ea91 0f03 	teqne	r1, r3
  409030:	bf02      	ittt	eq
  409032:	ea90 0f02 	teqeq	r0, r2
  409036:	2000      	moveq	r0, #0
  409038:	4770      	bxeq	lr
  40903a:	f110 0f00 	cmn.w	r0, #0
  40903e:	ea91 0f03 	teq	r1, r3
  409042:	bf58      	it	pl
  409044:	4299      	cmppl	r1, r3
  409046:	bf08      	it	eq
  409048:	4290      	cmpeq	r0, r2
  40904a:	bf2c      	ite	cs
  40904c:	17d8      	asrcs	r0, r3, #31
  40904e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  409052:	f040 0001 	orr.w	r0, r0, #1
  409056:	4770      	bx	lr
  409058:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40905c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409060:	d102      	bne.n	409068 <__cmpdf2+0x64>
  409062:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409066:	d107      	bne.n	409078 <__cmpdf2+0x74>
  409068:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40906c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409070:	d1d6      	bne.n	409020 <__cmpdf2+0x1c>
  409072:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409076:	d0d3      	beq.n	409020 <__cmpdf2+0x1c>
  409078:	f85d 0b04 	ldr.w	r0, [sp], #4
  40907c:	4770      	bx	lr
  40907e:	bf00      	nop

00409080 <__aeabi_cdrcmple>:
  409080:	4684      	mov	ip, r0
  409082:	4610      	mov	r0, r2
  409084:	4662      	mov	r2, ip
  409086:	468c      	mov	ip, r1
  409088:	4619      	mov	r1, r3
  40908a:	4663      	mov	r3, ip
  40908c:	e000      	b.n	409090 <__aeabi_cdcmpeq>
  40908e:	bf00      	nop

00409090 <__aeabi_cdcmpeq>:
  409090:	b501      	push	{r0, lr}
  409092:	f7ff ffb7 	bl	409004 <__cmpdf2>
  409096:	2800      	cmp	r0, #0
  409098:	bf48      	it	mi
  40909a:	f110 0f00 	cmnmi.w	r0, #0
  40909e:	bd01      	pop	{r0, pc}

004090a0 <__aeabi_dcmpeq>:
  4090a0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4090a4:	f7ff fff4 	bl	409090 <__aeabi_cdcmpeq>
  4090a8:	bf0c      	ite	eq
  4090aa:	2001      	moveq	r0, #1
  4090ac:	2000      	movne	r0, #0
  4090ae:	f85d fb08 	ldr.w	pc, [sp], #8
  4090b2:	bf00      	nop

004090b4 <__aeabi_dcmplt>:
  4090b4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4090b8:	f7ff ffea 	bl	409090 <__aeabi_cdcmpeq>
  4090bc:	bf34      	ite	cc
  4090be:	2001      	movcc	r0, #1
  4090c0:	2000      	movcs	r0, #0
  4090c2:	f85d fb08 	ldr.w	pc, [sp], #8
  4090c6:	bf00      	nop

004090c8 <__aeabi_dcmple>:
  4090c8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4090cc:	f7ff ffe0 	bl	409090 <__aeabi_cdcmpeq>
  4090d0:	bf94      	ite	ls
  4090d2:	2001      	movls	r0, #1
  4090d4:	2000      	movhi	r0, #0
  4090d6:	f85d fb08 	ldr.w	pc, [sp], #8
  4090da:	bf00      	nop

004090dc <__aeabi_dcmpge>:
  4090dc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4090e0:	f7ff ffce 	bl	409080 <__aeabi_cdrcmple>
  4090e4:	bf94      	ite	ls
  4090e6:	2001      	movls	r0, #1
  4090e8:	2000      	movhi	r0, #0
  4090ea:	f85d fb08 	ldr.w	pc, [sp], #8
  4090ee:	bf00      	nop

004090f0 <__aeabi_dcmpgt>:
  4090f0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4090f4:	f7ff ffc4 	bl	409080 <__aeabi_cdrcmple>
  4090f8:	bf34      	ite	cc
  4090fa:	2001      	movcc	r0, #1
  4090fc:	2000      	movcs	r0, #0
  4090fe:	f85d fb08 	ldr.w	pc, [sp], #8
  409102:	bf00      	nop

00409104 <__aeabi_dcmpun>:
  409104:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409108:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40910c:	d102      	bne.n	409114 <__aeabi_dcmpun+0x10>
  40910e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409112:	d10a      	bne.n	40912a <__aeabi_dcmpun+0x26>
  409114:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409118:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40911c:	d102      	bne.n	409124 <__aeabi_dcmpun+0x20>
  40911e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409122:	d102      	bne.n	40912a <__aeabi_dcmpun+0x26>
  409124:	f04f 0000 	mov.w	r0, #0
  409128:	4770      	bx	lr
  40912a:	f04f 0001 	mov.w	r0, #1
  40912e:	4770      	bx	lr

00409130 <__aeabi_d2iz>:
  409130:	ea4f 0241 	mov.w	r2, r1, lsl #1
  409134:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  409138:	d215      	bcs.n	409166 <__aeabi_d2iz+0x36>
  40913a:	d511      	bpl.n	409160 <__aeabi_d2iz+0x30>
  40913c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  409140:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  409144:	d912      	bls.n	40916c <__aeabi_d2iz+0x3c>
  409146:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40914a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40914e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  409152:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409156:	fa23 f002 	lsr.w	r0, r3, r2
  40915a:	bf18      	it	ne
  40915c:	4240      	negne	r0, r0
  40915e:	4770      	bx	lr
  409160:	f04f 0000 	mov.w	r0, #0
  409164:	4770      	bx	lr
  409166:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40916a:	d105      	bne.n	409178 <__aeabi_d2iz+0x48>
  40916c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  409170:	bf08      	it	eq
  409172:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  409176:	4770      	bx	lr
  409178:	f04f 0000 	mov.w	r0, #0
  40917c:	4770      	bx	lr
  40917e:	bf00      	nop
  409180:	454c4449 	.word	0x454c4449
  409184:	00000000 	.word	0x00000000
  409188:	51726d54 	.word	0x51726d54
  40918c:	00000000 	.word	0x00000000
  409190:	20726d54 	.word	0x20726d54
  409194:	00637653 	.word	0x00637653
  409198:	686c6166 	.word	0x686c6166
  40919c:	6d652061 	.word	0x6d652061
  4091a0:	69726320 	.word	0x69726320
  4091a4:	6f207261 	.word	0x6f207261
  4091a8:	6d657320 	.word	0x6d657320
  4091ac:	726f6661 	.word	0x726f6661
  4091b0:	0000206f 	.word	0x0000206f
  4091b4:	686c6166 	.word	0x686c6166
  4091b8:	6d652061 	.word	0x6d652061
  4091bc:	69726320 	.word	0x69726320
  4091c0:	61207261 	.word	0x61207261
  4091c4:	6c696620 	.word	0x6c696620
  4091c8:	00002061 	.word	0x00002061
  4091cc:	75626564 	.word	0x75626564
  4091d0:	00000067 	.word	0x00000067
  4091d4:	6c696146 	.word	0x6c696146
  4091d8:	74206465 	.word	0x74206465
  4091dc:	7263206f 	.word	0x7263206f
  4091e0:	65746165 	.word	0x65746165
  4091e4:	62656420 	.word	0x62656420
  4091e8:	74206775 	.word	0x74206775
  4091ec:	0d6b7361 	.word	0x0d6b7361
  4091f0:	00000000 	.word	0x00000000
  4091f4:	6e696f63 	.word	0x6e696f63
  4091f8:	00000073 	.word	0x00000073
  4091fc:	6c696146 	.word	0x6c696146
  409200:	74206465 	.word	0x74206465
  409204:	7263206f 	.word	0x7263206f
  409208:	65746165 	.word	0x65746165
  40920c:	696f6320 	.word	0x696f6320
  409210:	7420736e 	.word	0x7420736e
  409214:	0d6b7361 	.word	0x0d6b7361
  409218:	00000000 	.word	0x00000000
  40921c:	79616c70 	.word	0x79616c70
  409220:	00000000 	.word	0x00000000
  409224:	64656553 	.word	0x64656553
  409228:	6c25203a 	.word	0x6c25203a
  40922c:	000a2066 	.word	0x000a2066
  409230:	6e696f43 	.word	0x6e696f43
  409234:	25203a73 	.word	0x25203a73
  409238:	000a2064 	.word	0x000a2064
  40923c:	63617473 	.word	0x63617473
  409240:	766f206b 	.word	0x766f206b
  409244:	6c667265 	.word	0x6c667265
  409248:	2520776f 	.word	0x2520776f
  40924c:	73252078 	.word	0x73252078
  409250:	00000a0d 	.word	0x00000a0d

00409254 <_global_impure_ptr>:
  409254:	20400018 0000000a 00464e49 00666e69     ..@ ....INF.inf.
  409264:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
  409274:	42413938 46454443 00000000 33323130     89ABCDEF....0123
  409284:	37363534 62613938 66656463 00000000     456789abcdef....
  409294:	6c756e28 0000296c 00000030              (null)..0...

004092a0 <blanks.7238>:
  4092a0:	20202020 20202020 20202020 20202020                     

004092b0 <zeroes.7239>:
  4092b0:	30303030 30303030 30303030 30303030     0000000000000000
  4092c0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

004092d0 <__mprec_bigtens>:
  4092d0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4092e0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  4092f0:	7f73bf3c 75154fdd                       <.s..O.u

004092f8 <__mprec_tens>:
  4092f8:	00000000 3ff00000 00000000 40240000     .......?......$@
  409308:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  409318:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409328:	00000000 412e8480 00000000 416312d0     .......A......cA
  409338:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  409348:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  409358:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  409368:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  409378:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  409388:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  409398:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4093a8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4093b8:	79d99db4 44ea7843                       ...yCx.D

004093c0 <p05.6055>:
  4093c0:	00000005 00000019 0000007d 00000043     ........}...C...
  4093d0:	49534f50 00000058 0000002e              POSIX.......

004093dc <_ctype_>:
  4093dc:	20202000 20202020 28282020 20282828     .         ((((( 
  4093ec:	20202020 20202020 20202020 20202020                     
  4093fc:	10108820 10101010 10101010 10101010      ...............
  40940c:	04040410 04040404 10040404 10101010     ................
  40941c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40942c:	01010101 01010101 01010101 10101010     ................
  40943c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40944c:	02020202 02020202 02020202 10101010     ................
  40945c:	00000020 00000000 00000000 00000000      ...............
	...

004094e0 <_init>:
  4094e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4094e2:	bf00      	nop
  4094e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4094e6:	bc08      	pop	{r3}
  4094e8:	469e      	mov	lr, r3
  4094ea:	4770      	bx	lr

004094ec <__init_array_start>:
  4094ec:	004061c1 	.word	0x004061c1

004094f0 <__frame_dummy_init_array_entry>:
  4094f0:	00400165                                e.@.

004094f4 <_fini>:
  4094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4094f6:	bf00      	nop
  4094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4094fa:	bc08      	pop	{r3}
  4094fc:	469e      	mov	lr, r3
  4094fe:	4770      	bx	lr

00409500 <__fini_array_start>:
  409500:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	0e28 2040                                   (.@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	8bb5 0040 8a59 0040 0000 0000 93dc 0040     ..@.Y.@.......@.
20400944:	93d8 0040 91f0 0040 91f0 0040 91f0 0040     ..@...@...@...@.
20400954:	91f0 0040 91f0 0040 91f0 0040 91f0 0040     ..@...@...@...@.
20400964:	91f0 0040 91f0 0040 ffff ffff ffff ffff     ..@...@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
